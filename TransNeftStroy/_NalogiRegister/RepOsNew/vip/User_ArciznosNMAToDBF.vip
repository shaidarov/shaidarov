#include KauReff.vih
#include xlReport.Vih

#doc
  Выгрузка данных из arciznos по картотеке ОС
#end
interface User_ArciznosNMAToDBF 'Выгрузка данных по картотеке ОС' (,,) escClose;
  show at (,,100,39);

var iKauReff : EditKauReff; // Переменная типа "Интерфеса EditKauReff"
    pXL      : XLSRepBuilder;
    DateFormat:string;
    wVybyt   : word;
    bActualFlag : boolean;
    bVybytFlag  : boolean;

#declare FieldsUKAU(Kau)
  , sKau#Kau        : string
  , kKau#Kau        : string
#end
#declare FieldsSKAU(Kau)
  , sKau#Kau        : string
  , kKau#Kau        : string
#end
#declare FieldsSKAU14(Kau)
  , dKau#Kau        : date
  , kKau#Kau        : string
#end
#declare FieldsSKAUOrg(Kau)
  , kKauNREC#Kau    : comp
  , kKauNum#Kau     : string
  , kKauINN#Kau     : string
  , kKauKPP#Kau     : string
#end

#declare FieldsVisKAU(Kau)
     stOs.sKau#Kau    'KauReff#Kau.name' : [10], protect;
     stOs.kKau#Kau    'KauReff#Kau.code' : [10], protect;
#end
#declare FieldsVisKAUOrg(Kau)
     stOs.kKauINN#Kau  'KauReff#Kau.INN' : protect;
     stOs.kKauKPP#Kau  'KauReff#Kau.KPP' : [10], protect;
#end
#declare FieldsVisKAU14(Kau)
     stOs.dKau#Kau    'KauReff#Kau.date' : protect;
     stOs.kKau#Kau    'KauReff#Kau.num' : [10], protect;
#end

#declare FillUKAU(Kau)
   stOs.sKau#Kau    := GetKauReffName   ('KatOs', KatOs.NRec, #Kau);
   stOs.kKau#Kau    := GetKauReffStrKod ('KatOs', KatOs.NRec, #Kau);
#end
#declare FillSKAU(Kau)
   stOs.sKau#Kau    := GetKauReffName   ('KatOs', KatOs.NRec, #Kau);
   stOs.kKau#Kau    := GetKauReffCode   ('KatOs', KatOs.NRec, #Kau);
#end
#declare FillSKAUOrg(Kau)
   _cRec := GetKauReffNRec('KatOs', KatOs.NRec, #Kau);
   if getfirst KatOrg where (( _cRec == KatOrg.NRec)) = tsOk
   {
     stOs.kKauNREC#Kau  := KatOrg.NRec;
     stOs.kKauNum#Kau   := KatOrg.Code;
     stOs.kKauINN#Kau   := KatOrg.UNN;
     stOs.kKauKPP#Kau   := KatOrg.KodPlatNDS;
   }
#end
#declare FillSKAU14(Kau)
   _cRec := GetKauReffNRec('KatOs', KatOs.NRec, #Kau);
   if getfirst Dogovor where (( _cRec == Dogovor.NRec)) = tsOk
   {
     stOs.dKau#Kau   := DOGOVOR.DINPUT;
     stOs.kKau#Kau   := DOGOVOR.NODOC;
   }
#end
#declare FillSKAU40(Kau)
   if getfirst KatStroy where (( GetKauReffNRec('KatOs', KatOs.NRec, #Kau) == KatStroy.NRec  )) = tsOk
     stOs.sKau#Kau    := KatStroy.Name;
   stOs.kKau#Kau    := GetKauReffCode ('KatOs', KatOs.NRec, #Kau);
#end

#declare SetXLSUKAU(Kau)
    pXL.SetTblStringFldValue('sKau' + #Kau    , stOs.sKau#Kau);
    pXL.SetTblStringFldValue('kKau' + #Kau    , stOs.kKau#Kau);
#end
#declare SetXLSSKAU(Kau)
    pXL.SetTblStringFldValue('sKau' + #Kau   , stOs.sKau#Kau);
    pXL.SetTblStringFldValue('kKau' + #Kau   , stOs.kKau#Kau);
#end
#declare SetXLSSKAU14(Kau)
    pXL.SetTblDateFldValue  ('dKau' + #Kau   , stOs.dKau#Kau);
    pXL.SetTblStringFldValue('kKau' + #Kau   , stOs.kKau#Kau);
#end
#declare SetDBFSKAU(Kau)
    DBFPutFieldValue(DBFHandle, 'S' + #Kau   , stOs.kKau#Kau);
#end
#declare SetDBFUKAU(Kau)
    DBFPutFieldValue(DBFHandle, 'U' + #Kau   , stOs.kKau#Kau);
#end

#declare CrtFldXLSUKAU(Kau)
  pXL.CreateTblFld('sKau' + #Kau);
  pXL.CreateTblFld('kKau' + #Kau);
#end
#declare CrtFldXLSUKAU14(Kau)
  pXL.CreateTblFld('dKau' + #Kau);
  pXL.CreateTblFld('kKau' + #Kau);
#end

#declare CrtFldDBFSKAU(Kau)
  DBFAddField(DBFHandle, 'S' + #Kau, DbChar, 20, 0);
#end

#declare CrtFldDBFUKAU(Kau)
  DBFAddField(DBFHandle, 'U' + #Kau, DbChar, 20, 0);
#end

Table struct stOs  (
    cKatOs        : comp
  , innum         : string
  , regnum        : string
  , nameos        : string
  , zavnom        : string
  , godv          : date
  , datek         : date
  , datok         : date
  , datv          : date
  , skodof        : string
  , kkodof        : string
  , kol           : double
  , srokisp       : double
  , stoim         : double
  , sumizn        : double
  , siznm         : double
  , stoimps       : double
  , stost         : double
  , svid          : string
  , kvid          : string
  , snorma        : string
  , norma         : double
  , koofsm        : double
  , sisp          : string
  , kisp          : string
  , ispcur        : double
  , ispps         : double
  , sgram         : string
  , kgram         : string
  , sPrSb         : string
  , spodr         : string
  , kpodr         : string
  , smol          : string
  , kmol          : string
  , smetod        : string
  , shozoper      : string
  , khozoper      : string
  , sco           : string
  , kco           : string
  , perstoim      : double
  , persumizn     : double
  , dbreserv      : double
  , psnum         : string

    #FieldsSKAUOrg(1)
    #FieldsSKAU(2)
    #FieldsSKAU14(14)
    #FieldsSKAU(22)
    #FieldsSKAU(40)
  , cKaborCode   : string
  , cKaborName   : string

  , KaElemCode   : string
  , KaElemKod    : string

    #FieldsUKAU(20009)
    #FieldsUKAU(20025)
    #FieldsUKAU(20054)
    #FieldsUKAU(20057)
    #FieldsUKAU(20067)
    #FieldsUKAU(20072)
    #FieldsUKAU(20073)
    #FieldsUKAU(20077)
    #FieldsUKAU(20101)

    );

  create view
  var
    sXLTFileName
  , sXLSFileName
                : string;
    nReport
                : word;
    n
                : double;
    _cnorma
  , _chozoper
  , _cmetod
  , _cmol
  , _ckatpodr
  , _cisp
  , _cvid
  , _cgram
  , _cco
  , _cPrSb
                : comp;
  as select
     if (UserDeskRep.ResComp[1] <> 0, afpco.Name,
     if (UserDeskRep.ResWord[1] <> 0, 'Множественный выбор (' + UserDeskRep.ResWord[1] + ')', ''))
           (FieldName = sfpco),
     if (UserDeskRep.ResComp[2] <> 0, nastros.Name, '')
           (FieldName = snastros),
     UserDeskRep.Resdate[1]  (FieldName = wdate)
  from
     PickRep
   , UserDeskRep
   , fpco
   , synonym fpco afpco
   , KatOs
   , arciznos
   , spKatOs
   , nastros
   , vidnorma
   , synonym vidnorma vidnormaval
   , hozoper
   , osalg
   , katmol
   , katpodr
   , synonym katpodr katpodr2
   , sterr
   , synonym sterr sterr2
   , ispos
   , PrSb
   , klassos
   , kodof
   , kaureff
   , synonym kaureff kaureff50001
   , synonym kaureff kaureff2
   , stOs

  where
  ((       UserName                              == UserDeskRep.OwnName
      and  nReport                               == UserDeskRep.nRep
      and  UserDeskRep.ResComp[1]                == afpco.nrec
      and  UserDeskRep.ResComp[2]                == nastros.nrec
      and  word(16)                              == KatOs.tidk
      and  word(1)                               == KatOs.isleaf

      and  KatOs.nrec                            == spKatOs.cKatOs
      and  UserDeskRep.ResComp[2]                == spKatOs.cnastros
      and  KatOs.nrec                            == arciznos.cKatOs
      and  UserDeskRep.ResComp[2]                == arciznos.cnastros
      and  UserDeskRep.Resdate[1]                == arciznos.data
      and  _cnorma                               == VIDNORMAval.nrec
      and  _chozoper                             == HOZOPER.nrec
      and  _cmetod                               == osalg.nrec
      and  _cmol                                 == katmol.nrec
      and  _ckatpodr                             == katpodr.nrec
      and  _cisp                                 == ispos.nrec
      and  _cPrSb                                == PrSb.NRec

      and  _cvid                                 == vidnorma.nrec
      and  _cgram                                == klassos.nrec
      and  _cco                                  == fpco.nrec
      and  KatOs.cokof                           == kodof.nrec

      and  word(3000)                            == kaureff2.cotable
      and  KatOs.nrec                            == kaureff2.crec
      and  word(2)                               == kaureff2.wkau
      and  kaureff2.ckau                         == katpodr2.nrec

      and  word(3000)                            == kaureff.cotable
      and  KatOs.nrec                            == kaureff.crec
      and  word(72)                              == kaureff.wkau
      and  kaureff.ckau                          == sterr.nrec

      and  word(3000)                            == kaureff50001.cotable
      and  KatOs.nrec                            == kaureff50001.crec
      and  word(50001)                           == kaureff50001.wkau
      and  kaureff50001.ckau                     == sterr2.nrec

  ))
  ;

#include pmarker.vpp

Function DateToStr2(_d : date) : string;
{
  result := if (double(_d) <> 0,  DateToStr(_d, DateFormat), '');
}

Function ToStr(_n : double) : string;
{
  result := trim(String(_n, 20, 10));
}

Function FindInPickRep ( _wList : word ; _cRec : comp ) : word;
{
  FindInPickRep := GetFirst PickRep where ((  UserName          == PickRep.OwnName
                                          and UserDeskRep.nRec  == PickRep.cUserDeskRep
                                          and _wList            == PickRep.wList
                                          and _cRec             == PickRep.cRec
                                          ))
}

Function ThisRecordIsOK  : boolean;
{
  ThisRecordIsOK := false;

// ЦО
  if( UserDeskRep.ResComp[1] = 0 )
    {if( UserDeskRep.ResWord[1] <> 0 )
         if (FindInPickRep( nReport, _cco) <> tsOK)
              Exit;
    }
    else if (_cco <> UserDeskRep.ResComp[1])
                   Exit ;
  ThisRecordIsOK := true;
}

screen inData;
  show at (1,1,99,11);
  noTableNavigation;
  fields
    wDate ('Дата отчета',,) : [,'MM/YYYY'], NoProtect;
    wVybyt ('Выгружать ли выбывшие',,) : NoProtect;
    sfpco ('Фильтр по ЦО',,sci13Esc  ): Protect, PickButton;
    snastros ('Метод учета',,sci13Esc  ): Protect, PickButton;
    UserDeskRep.RESNAME[1] ( 'Файл - шаблон отчета ',) : Protect, PickButton ;
  buttons
    cmRun;
    cmExcel;
    cmDBF;
    cmCancel;
<<
  Дата             .@@@@@@@@@@@    [.] выгружать действующие`
                                   [.] выгружать выбывшие`
  Фильтр по ЦО     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  Метод учета      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  Путь на шаблон   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 <.Заполнить выгрузку.>  <.Выгрузить в Excel.>   <. Выгрузить в DBF .>  <. Выйти .>

>>
end;
browse brw1;
  show at (1,12,99,38);
  noMove, excelColumns
  table stos;

fields
         stOs.innum     'Инв. ном.' : [10], protect;
         stOs.regnum    'Рег. ном.' : [10], protect;
         stOs.nameos    'Наименование ОС' : [10], protect;
         stOs.zavnom    'Заводской ном.' : [10], protect;
         stOs.godv      'Дата выпуска' : [10], protect;
         stOs.datek     'Дата ввода' : [10], protect;
         stOs.datok     'Дата поступления' : [10], protect;
         stOs.datv      'Дата выбытия' : [10], protect;
         stOs.skodof    'Наименование ОКОФ' : [10], protect;
         stOs.kkodof    'Код ОКОФ' : [10], protect;
         stOs.kol       'Количество' : [10], protect;
         stOs.srokisp   'arciznos.srokisp' : [10], protect;
         stOs.stoim     'arciznos.stoim' : [10], protect;
         stOs.sumizn    'arciznos.sumizn' : [10], protect;
         stOs.siznm     'arciznos.siznm' : [10], protect;
         stOs.stoimps   'arciznos.stoimps' : [10], protect;
         stOs.stost     'Ост. ст-ть' : [10], protect;
         stOs.snorma    'vidnormaval.kod' : [10], protect;
         stOs.norma     'vidnormaval.norma' : [10], protect;
         stOs.shozoper  'hozoper.name1' : [10], protect;
         stOs.khozoper  'hozoper.code' : [10], protect;
         stOs.smetod    'osalg.name' : [10], protect;
         stOs.koofsm    'arciznos.koofsm' : [10], protect;
         stOs.spodr     'katpodr.name' : [10], protect;
         stOs.kpodr     'katpodr.kod' : [10], protect;
         stOs.smol      'katmol.name' : [10], protect;
         stOs.kmol      'katmol.kod' : [10], protect;
         stOs.sisp      'ispos.nameis' : [10], protect;
         stOs.kisp      'ispos.prisp' : [10], protect;
         stOs.sPrSb     'PrSb.Name' : [10], protect;
         stOs.ispcur    'arciznos.ispcur' : [10], protect;
         stOs.ispps     'spKatOs.ispps' : [10], protect;
         stOs.svid      'vidnorma.name' : [10], protect;
         stOs.kvid      'vidnorma.kod' : [10], protect;
         stOs.sgram     'klassos.name' : [10], protect;
         stOs.kgram     'klassos.kod' : [10], protect;
         stOs.sco       'fpco.name' : [10], protect;
         stOs.kco       'fpco.levelcode' : [10], protect;
         stOs.perstoim  'arciznos.perstoim' : [10], protect;
         stOs.persumizn 'arciznos.persumizn' : [10], protect;
         stOs.dbreserv  'spKatOs.dbreserv' : [10], protect;
         stOs.psnum     'KatOs.psnum' : [10], protect;

          #FieldsVisKAUOrg(1)
          #FieldsVisKAU(2)
          #FieldsVisKAU14(14)
          #FieldsVisKAU(22)

          #FieldsVisKAU(20009)
          #FieldsVisKAU(20025)
          #FieldsVisKAU(20054)
          #FieldsVisKAU(20057)
          #FieldsVisKAU(20067)
          #FieldsVisKAU(20072)
          #FieldsVisKAU(20073)
          #FieldsVisKAU(20077)
          #FieldsVisKAU(20101)

end;


handleEvent
cmInsertRecord:
  Insert Current UserDeskRep;

cmUpdateRecord:
{  UserDeskRep.OwnName := UserName;
   update current UserDeskRep;
}

cmDeleteRecord:
    Delete Current UserDeskRep;
cmInit:
{
  nReport      := 21022;
  DateFormat   := 'YYYYMMDD';
  wVybyt       := 1;

  if (GetFirst UserDeskRep <> tsOK)
    {
      ClearBuffer(#UserDeskRep);
       UserDeskRep.OwnName := UserName;
       UserDeskRep.nRep    := nReport;
      insert current UserDeskRep;
    }
  if (GetFirst afpco    <> tsOK)
     set UserDeskRep.ResComp[1]:=0;
  if (GetFirst nastros  <> tsOK)
     set UserDeskRep.ResComp[2]:=0;
  if (UserDeskRep.Resdate[1]=0)
     set UserDeskRep.Resdate[1]:=cur_date;
  if UserDeskRep.RESNAME[1]='' or (not ExistFile(UserDeskRep.RESNAME[1]))
     set UserDeskRep.resname[1] := TranslatePath('%ClientStartPath%') + '_USER_\LOCAL\XLT\RepOs_v2.xlt';
  RescanPanel(#UserDeskRep);

  InitServTXO(0);
}

cmDone:
{
  DoneServTXO;
}

cmPick:
{
 var
  NumPick : Word;

  case CurField of
     #sfpco:
    {
      PickRep2Marker('GetSomeFpCO', NReport, comp(0));
      if (RunInterface('F_FPCATALOG::GetCO', word(cgiPickMult+cgiNotClear), comp(0), comp(0), UserDeskRep.ResComp[1]) <> cmCancel)
      {
        DelPickRep(NReport);
        Marker2PickRep('GetSomeFpCO', NReport, UserDeskRep.ResComp[1], NumPick)
        if (NumPick > 1)
          set UserDeskRep.ResWord[1] := NumPick;
        else
          set UserDeskRep.ResWord[1] := 0;
      }
    }
     #snastros:
    {
     RunInterface('f_os::NastrOS', word(16), word(5), UserDeskRep.ResComp[2], 0);
    }
     #UserDeskRep.RESNAME[1]:
    {
      sXLTFileName:=GetFileName ('*.XLT', 'Задайте файл шаблона' ) ;
      if sXLTFileName<>''
       set UserDeskRep.RESNAME[1] := sXLTFileName;
       if ( Not UpdateTable() ) Exit;
      RescanPanel(#UserDeskRep);
    }

   end; // case
        RescanPanel(#UserDeskRep);
}
cmDelOnProtect:
{
  case CurField of
      #sfpco:
      {
        DelPickRep( nReport );
        Set UserDeskRep.ResComp[1] := 0;
        Set UserDeskRep.ResWord[1] := 0;
      }
      #snastros:
        Set UserDeskRep.ResComp[2] := 0;

      #UserDeskRep.resname[1]:
        set UserDeskRep.resname[1] := TranslatePath('%ClientStartPath%') + '_USER_\LOCAL\XLT\RepOs_v2.xlt';

  end; // case
        RescanPanel(#UserDeskRep);
}
cmRun:
{
  var _cRec : comp;
  var _Date : date;

  set UserDeskRep.Resdate[1]:=date(last_day(UserDeskRep.Resdate[1]),month(UserDeskRep.Resdate[1]),year(UserDeskRep.Resdate[1]));
  if UserDeskRep.ResComp[2]<>0
  {
//   message(DateToStr(UserDeskRep.Resdate[1],'DD-MM-YY'));
 delete all stOs;
 n:=0;

 bActualFlag := ((wVybyt and 1) = 1);
 bVybytFlag  := ((wVybyt and 2) = 2);

 StartNewVisual (vtNumericVisual , vfTimer,  'Обработка данных', 1);
 _loop KatOs
  {

    if bActualFlag
      if not (Date (1, month(wdate), year(wdate)) <= KatOs.datv or date(0,0,0) = KatOs.datv)
        continue;

    if bVybytFlag
      if (Date (1, month(wdate), year(wdate)) <= KatOs.datv)
        continue;

   if (KatOs.otchper=UserDeskRep.Resdate[1])
   {
  _loop spKatOs
   {
    _cnorma   := spKatOs.cnorma;
    _chozoper := spKatOs.chozoper;
    _cmetod   := spKatOs.cmetod;
    _cmol     := KatOs.cmol;
    _ckatpodr := KatOs.cpodr;
    _cisp     := spKatOs.cisp;
    _cPrSb    := KatOs.cPrSb;

    _cvid     := KatOs.cvid;
    _cgram    := spKatOs.cgram;
    _cco      := KatOs.cco;
     if ThisRecordIsOK
       {
         ClearBuffer(#stOs);

         stOs.cKatOs    := KatOs.NRec;
         stOs.innum     := KatOs.innum;
         stOs.regnum    := KatOs.DOPINNUM;
         stOs.nameos    := KatOs.nameos;
         stOs.zavnom    := KatOs.zavnom;
         stOs.godv      := KatOs.godv;
         stOs.datek     := KatOs.datek;
         stOs.datok     := KatOs.datok;
         stOs.datv      := KatOs.datv;
         stOs.kol       := KatOs.kol;
         stOs.psnum     := KatOs.psnum;

         if getfirst katpodr = tsOk
         {
           stOs.spodr     := katpodr.name;
           stOs.kpodr     := katpodr.kod;
         }
         if getfirst katmol = tsOk
         {
           stOs.smol      := katmol.name;
           stOs.kmol      := katmol.kod;
         }

         if getfirst vidnorma = tsOk
         {
           stOs.svid      := vidnorma.name;
           stOs.kvid      := vidnorma.kod;
         }
         if getfirst kodof = tsOk
         {
           stOs.skodof    := kodof.name_of;
           stOs.kkodof    := kodof.kod_of;
         }
         if getfirst PrSb = tsOk
           stOs.sPrSb     := PrSb.Name;

         if getfirst VIDNORMAval =tsOk
         {
           stOs.snorma    := vidnormaval.kod;
           stOs.norma     := vidnormaval.norma;
         }
         if getfirst klassos = tsOk
         {
         stOs.sgram     := klassos.name;
         stOs.kgram     := klassos.kod;
         }
         if getfirst ispos = tsOk
         {
           stOs.sisp      := ispos.nameis;
           stOs.kisp      := ispos.prisp;
         }
         if getfirst hozoper = tsok
         {
           stOs.shozoper  := hozoper.name1;
           stOs.khozoper  := hozoper.code;
         }
         if getfirst OsAlg = tsOk
         {
           stOs.smetod    := osalg.name;
         }
         if getfirst fpco = tsOk
         {
           stOs.sco       := fpco.name;
           stOs.kco       := fpco.levelcode;
         }

         stOs.srokisp   := spKatOs.srokisp;
         stOs.stoim     := spKatOs.stoim*KatOs.kol;
         stOs.sumizn    := spKatOs.sumizn*KatOs.kol;
         stOs.siznm     := spKatOs.siznm*KatOs.kol;
         stOs.stoimps   := spKatOs.stoimps*KatOs.kol;
         stOs.koofsm    := spKatOs.poprkoef;
         stOs.stost     := (spKatOs.stoim-spKatOs.sumizn-spKatOs.siznm)*KatOs.kol;
         stOs.ispcur    := spKatOs.ispcur;
         stOs.ispps     := spKatOs.ispps;
         stOs.perstoim  := spKatOs.perstoim*KatOs.kol;
         stOs.persumizn := spKatOs.persumizn*KatOs.kol;
         stOs.dbreserv  := spKatOs.dbreserv;

          #FillSKAUOrg(1)
          #FillSKAU(2)
          #FillSKAU14(14)
          #FillSKAU(22)
          #FillSKAU40(40)
          if getfirst KatStroy where (( KatOs.cOrigDoc == KatStroy.NRec )) = tsOk
          {
            stOs.cKaborCode := KatStroy.Code;
            stOs.cKaborName := KatStroy.Name;
          }

          _cRec := 0;
          _cRec := GetKauReffNRec('KatOs', KatOs.NRec, 5017);
          if _cRec <> 0
            if getfirst KaElem where (( _cRec == KaElem.NRec )) = tsOk
            {
              stOs.KaElemCode := KaElem.Code;
              stOs.KaElemKod  := KaElem.Kod;
            }

          #FillUKAU(20009)
          #FillUKAU(20025)
          #FillUKAU(20054)
          #FillUKAU(20057)
          #FillUKAU(20067)
          #FillUKAU(20072)
          #FillUKAU(20073)
          #FillUKAU(20077)
          #FillUKAU(20101)

         insert current stOs;
         nextvisual;
         n:=n+1;
//        message('чета пишет');
       }
//message('лупит spKatOs');
   }

   };
  if (KatOs.otchper>UserDeskRep.Resdate[1])
   {
  _loop arciznos
   {
    _cnorma   := arciznos.cnorma;
    _chozoper := arciznos.chozoper;
    _cmetod   := arciznos.cmetod;
    _cmol     := arciznos.cmol;
    _ckatpodr := arciznos.ckatpodr;
    _cisp     := arciznos.cisp;
    _cPrSb    := arciznos.cPrSb;

    _cvid     := arciznos.cvid;
    _cgram    := arciznos.cgram;
    _cco      := arciznos.cco;
     if ThisRecordIsOK
       {
         ClearBuffer(#stOs);

         stOs.cKatOs    := KatOs.NRec;
         stOs.innum     := KatOs.innum;
         stOs.regnum    := KatOs.DOPINNUM;
         stOs.nameos    := KatOs.nameos;
         stOs.zavnom    := KatOs.zavnom;
         stOs.godv      := KatOs.godv;
         stOs.datek     := KatOs.datek;
         stOs.datok     := KatOs.datok;
         stOs.datv      := KatOs.datv;
         stOs.psnum     := KatOs.psnum;

         if getfirst katpodr = tsOk
         {
           stOs.spodr     := katpodr.name;
           stOs.kpodr     := katpodr.kod;
         }
         if getfirst katmol = tsOk
         {
           stOs.smol      := katmol.name;
           stOs.kmol      := katmol.kod;
         }
         if getfirst vidnorma = tsOk
         {
           stOs.svid      := vidnorma.name;
           stOs.kvid      := vidnorma.kod;
         }
         if getfirst kodof = tsOk
         {
           stOs.skodof    := kodof.name_of;
           stOs.kkodof    := kodof.kod_of;
         }
         if getfirst PrSb = tsOk
           stOs.sPrSb     := PrSb.Name;
         if getfirst klassos = tsOk
         {
         stOs.sgram     := klassos.name;
         stOs.kgram     := klassos.kod;
         }
         if getfirst VIDNORMAval =tsOk
         {
           stOs.snorma    := vidnormaval.kod;
           stOs.norma     := vidnormaval.norma;
         }
         if getfirst hozoper = tsok
         {
           stOs.shozoper  := hozoper.name1;
           stOs.khozoper  := hozoper.code;
         }
         if getfirst OsAlg = tsOk
         {
           stOs.smetod    := osalg.name;
         }
         if getfirst ispos = tsOk
         {
           stOs.sisp      := ispos.nameis;
           stOs.kisp      := ispos.prisp;
         }
         if getfirst fpco = tsOk
         {
           stOs.sco       := fpco.name;
           stOs.kco       := fpco.levelcode;
         }

         stOs.kol       := arciznos.kol;
         stOs.srokisp   := arciznos.srokisp;
         stOs.stoim     := arciznos.stoim*arciznos.kol;
         stOs.sumizn    := arciznos.sumizn*arciznos.kol;
         stOs.siznm     := arciznos.siznm*arciznos.kol;
         stOs.stoimps   := arciznos.stoimps*arciznos.kol;
         stOs.stost     := (arciznos.stoim-arciznos.sumizn-arciznos.siznm)*arciznos.kol;
         stOs.koofsm    := arciznos.koofsm;
         stOs.ispcur    := arciznos.ispcur;
         stOs.ispps     := spKatOs.ispps;  // !!! &&&&&&&&&&&&&&&&&&&
         stOs.perstoim  := arciznos.perstoim*arciznos.kol;
         stOs.persumizn := arciznos.persumizn*arciznos.kol;
         stOs.dbreserv  := spKatOs.dbreserv;

          #FillSKAUOrg(1)
          #FillSKAU(2)
          #FillSKAU14(14)
          #FillSKAU(22)
          #FillSKAU40(40)
          if getfirst KatStroy where (( KatOs.cOrigDoc == KatStroy.NRec )) = tsOk
          {
            stOs.cKaborCode := KatStroy.Code;
            stOs.cKaborName := KatStroy.Name;
          }

          _cRec := 0;
          _cRec := GetKauReffNRec('KatOs', KatOs.NRec, 5017);
          if _cRec <> 0
            if getfirst KaElem where (( _cRec == KaElem.NRec )) = tsOk
            {
              stOs.KaElemCode := KaElem.Code;
              stOs.KaElemKod  := KaElem.Kod;
            }

          #FillUKAU(20009)
          #FillUKAU(20025)
          #FillUKAU(20054)
          #FillUKAU(20057)
          #FillUKAU(20067)
          #FillUKAU(20072)
          #FillUKAU(20073)
          #FillUKAU(20077)
          #FillUKAU(20101)

         insert current stOs;
         nextvisual;
         n:=n+1;
//        message('чета пишет');
       }
//message('лупит arciznos');
   }
   };
//message('лупит KatOs');
  }
   stopvisual(0,0);
   RescanPanel(#stOs);

//   CloseInterface (cmRun);
  };
  else message('Заполните метод учета');

}
cmExcel:
{
  sXLTFileName:=UserDeskRep.resname[1];
  if (true)
    Set sXLSFileName := pXL.CreateReport(sXLTFileName, True);
  else
    Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);

  StartNewVisual (vtIndicatorVisual , vfTimer,  'Выгрузка в Excel', n);

  // Инициализация переменных
  pXL.CreateVar(sXLSFileName);

  // Выгрузка переменных

  pXL.SetStringVar('sMetod', snastros);
  pXL.SetStringVar('Date',   datetostr(wdate,'Month YYYY'));
  pXL.SetStringVar('Filtr',  sfpco);

  pXL.PublishVar;

  // Выгрузка таблицы отчёта
  pXL.CreateTbls(sXLSFileName);
  // Определение таблицы отчёта (DBTbl Constructor)
  pXL.CreateTbl('arciznos');

  // Определение полей таблицы
  pXL.CreateTblFld('innum');
  pXL.CreateTblFld('regnum');
  pXL.CreateTblFld('nameos');
  pXL.CreateTblFld('zavnom');
  pXL.CreateTblFld('godv');
  pXL.CreateTblFld('datek');
  pXL.CreateTblFld('datok');
  pXL.CreateTblFld('datv');
  pXL.CreateTblFld('skodof');
  pXL.CreateTblFld('kkodof');
  pXL.CreateTblFld('kol');
  pXL.CreateTblFld('srokisp');
  pXL.CreateTblFld('stoim');
  pXL.CreateTblFld('sumizn');
  pXL.CreateTblFld('siznm');
  pXL.CreateTblFld('stoimps');
  pXL.CreateTblFld('stost');
  pXL.CreateTblFld('snorma');
  pXL.CreateTblFld('norma');
  pXL.CreateTblFld('shozoper');
  pXL.CreateTblFld('khozoper');
  pXL.CreateTblFld('smetod');
  pXL.CreateTblFld('koofsm');
  pXL.CreateTblFld('smol');
  pXL.CreateTblFld('kmol');
  pXL.CreateTblFld('spodr');
  pXL.CreateTblFld('kpodr');
  pXL.CreateTblFld('sisp');
  pXL.CreateTblFld('kisp');
  pXL.CreateTblFld('sPrSb');
  pXL.CreateTblFld('ispcur');
  pXL.CreateTblFld('ispps');
  pXL.CreateTblFld('svid');
  pXL.CreateTblFld('kvid');
  pXL.CreateTblFld('sgram');
  pXL.CreateTblFld('kgram');
  pXL.CreateTblFld('sco');
  pXL.CreateTblFld('kco');
  pXL.CreateTblFld('perstoim');
  pXL.CreateTblFld('persumizn');
  pXL.CreateTblFld('dbreserv');
  pXL.CreateTblFld('psnum');

  #CrtFldXLSUKAU(1)
  #CrtFldXLSUKAU(2)
  #CrtFldXLSUKAU(14)
  #CrtFldXLSUKAU(22)
  #CrtFldXLSUKAU(40)
  pXL.CreateTblFld('cKaborCode');
  pXL.CreateTblFld('cKaborName');
  pXL.CreateTblFld('KaElemCode');
  pXL.CreateTblFld('KaElemKod');

  #CrtFldXLSUKAU(20009)
  #CrtFldXLSUKAU(20025)
  #CrtFldXLSUKAU(20054)
  #CrtFldXLSUKAU(20057)
  #CrtFldXLSUKAU(20067)
  #CrtFldXLSUKAU(20072)
  #CrtFldXLSUKAU(20073)
  #CrtFldXLSUKAU(20077)
  #CrtFldXLSUKAU(20101)

//
 _loop stOs
 {
    pXL.ClearTblBuffer;

    pXL.SetTblStringFldValue('innum'     , stOs.innum);
    pXL.SetTblStringFldValue('regnum'    , stOs.regnum);
    pXL.SetTblStringFldValue('nameos'    , stOs.nameos);
    pXL.SetTblStringFldValue('zavnom'    , stOs.zavnom);
    pXL.SetTblStringFldValue('psnum'     , stOs.psnum);

    pXL.SetTblDateFldValue  ('godv'      , stOs.godv);
    pXL.SetTblDateFldValue  ('datek'     , stOs.datek);
    pXL.SetTblDateFldValue  ('datok'     , stOs.datok);
    pXL.SetTblDateFldValue  ('datv'      , stOs.datv);

    pXL.SetTblStringFldValue('skodof'    , stOs.skodof);
    pXL.SetTblStringFldValue('kkodof'    , stOs.kkodof);
    pXL.SetTblNumberFldValue('kol'       , stOs.kol);
    pXL.SetTblNumberFldValue('srokisp'   , stOs.srokisp);
    pXL.SetTblNumberFldValue('stoim'     , stOs.stoim);
    pXL.SetTblNumberFldValue('sumizn'    , stOs.sumizn);
    pXL.SetTblNumberFldValue('siznm'     , stOs.siznm);
    pXL.SetTblNumberFldValue('stoimps'   , stOs.stoimps);
    pXL.SetTblNumberFldValue('stost'     , stOs.stost);
    pXL.SetTblStringFldValue('snorma'    , stOs.snorma);
    pXL.SetTblNumberFldValue('norma'     , stOs.norma);
    pXL.SetTblStringFldValue('shozoper'  , stOs.shozoper);
    pXL.SetTblStringFldValue('khozoper'  , stOs.khozoper);
    pXL.SetTblStringFldValue('smetod'    , stOs.smetod);
    pXL.SetTblNumberFldValue('koofsm'    , stOs.koofsm);
    pXL.SetTblStringFldValue('smol'      , stOs.smol);
    pXL.SetTblStringFldValue('kmol'      , stOs.kmol);
    pXL.SetTblStringFldValue('spodr'     , stOs.spodr);
    pXL.SetTblStringFldValue('kpodr'     , stOs.kpodr);
    pXL.SetTblStringFldValue('sisp'      , stOs.sisp);
    pXL.SetTblStringFldValue('kisp'      , stOs.kisp);
    pXL.SetTblStringFldValue('sPrSb'     , stOs.sPrSb);
    pXL.SetTblNumberFldValue('ispcur'    , stOs.ispcur);
    pXL.SetTblNumberFldValue('ispps'     , stOs.ispps);
    pXL.SetTblStringFldValue('svid'      , stOs.svid);
    pXL.SetTblStringFldValue('kvid'      , stOs.kvid);
    pXL.SetTblStringFldValue('sgram'     , stOs.sgram);
    pXL.SetTblStringFldValue('kgram'     , stOs.kgram);

    pXL.SetTblStringFldValue('sco'       , stOs.sco);
    pXL.SetTblStringFldValue('kco'       , stOs.kco);
    pXL.SetTblNumberFldValue('perstoim'  , stOs.perstoim);
    pXL.SetTblNumberFldValue('persumizn' , stOs.persumizn);

    pXL.SetTblNumberFldValue('dbreserv'  , stOs.dbreserv);

    pXL.SetTblStringFldValue('kKauNRec1', string(stOs.kKauNRec1,0,0));
    pXL.SetTblStringFldValue('kKauNum1',  stOs.kKauNum1);
    pXL.SetTblStringFldValue('kKauINN1',  stOs.kKauINN1);
    pXL.SetTblStringFldValue('kKauKPP1',  stOs.kKauKPP1);
    #SetXLSSKAU(2)
    pXL.SetTblDateFldValue  ('dKau14'   , stOs.dKau14);
    pXL.SetTblStringFldValue('kKau14'   , stOs.kKau14);
    #SetXLSSKAU(22)
    #SetXLSSKAU(40)
    pXL.SetTblStringFldValue('cKaborCode' , stOs.cKaborCode);
    pXL.SetTblStringFldValue('cKaborName' , stOs.cKaborName);

    pXL.SetTblStringFldValue('KaElemCode' , stOs.KaElemCode);
    pXL.SetTblStringFldValue('KaElemKod',   stOs.KaElemKod);

    #SetXLSUKAU(20009)
    #SetXLSUKAU(20025)
    #SetXLSUKAU(20054)
    #SetXLSUKAU(20057)
    #SetXLSUKAU(20067)
    #SetXLSUKAU(20072)
    #SetXLSUKAU(20073)
    #SetXLSUKAU(20077)
    #SetXLSUKAU(20101)

    //////////////////////////////////////////////////////////////////////////////////////////////
    // ДОПОЛНИТЕЛЬНЫЕ АТРИБУТЫ
    //////////////////////////////////////////////////////////////////////////////////////////////
    pXL.SetTblStringFldValue ( 'INNUM_OLD',  sTXOGetExtAttr ('KATOS', 'Предыдущий инвентарный номер', stOs.cKatOs));

    pXL.InsTblRow;
    nextvisual;
 }

  pXL.PublishTbl('arciznos');
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
  stopvisual(0,0);
}

cmDBF:
{
  var DBFHandle : longint;
  var DBFPath   : string;

    DBFPath   := GetStringParameter('Files','TmpFilesDirectory',0) + 'KatOs_ExtKAU.dbf';
    DBFHandle := DBFOpen(DBFPath, stCreate);

    StartNewVisual (vtIndicatorVisual , vfTimer,  'Выгрузка атрибутов картоеки ОС в DBF', n);

    // Определение полей таблицы
    DBFAddField(DBFHandle,'innum',  DbChar, 64, 0);
    DBFAddField(DBFHandle,'COS',    DbChar, 20, 0);

    DBFAddField(DBFHandle,'S1'    , DbChar, 20, 0);
    DBFAddField(DBFHandle,'S1NREC', DbChar, 20, 0);
    DBFAddField(DBFHandle,'S1INN' , DbChar, 20, 0);
    DBFAddField(DBFHandle,'S1KPP' , DbChar, 20, 0);
    #CrtFldDBFSKAU(2)
    DBFAddField(DBFHandle,'S14N',   DbChar, 40, 0);
    DBFAddField(DBFHandle,'S14D',   DbDate,  8, 0);
    #CrtFldDBFSKAU(22)
    DBFAddField(DBFHandle,'S40CODE',DbChar, 200, 0);
    DBFAddField(DBFHandle,'S40NAME',DbDate, 200, 0);
    DBFAddField(DBFHandle,'CKABORCODE',DbChar, 200, 0);
    DBFAddField(DBFHandle,'CKABORNAME',DbDate, 200, 0);

    DBFAddField(DBFHandle,'S5017CODE',DbDate, 200, 0);
    DBFAddField(DBFHandle,'S5017KOD',DbDate, 200, 0);

    #CrtFldDBFUKAU(20009)
    #CrtFldDBFUKAU(20025)
    #CrtFldDBFUKAU(20054)
    #CrtFldDBFUKAU(20057)
    #CrtFldDBFUKAU(20067)
    #CrtFldDBFUKAU(20072)
    #CrtFldDBFUKAU(20073)
    #CrtFldDBFUKAU(20077)
    #CrtFldDBFUKAU(20101)

 _loop stOs
 {
    DBFClearBuffer (DBFHandle);

    DBFPutFieldValue (DBFHandle,'innum'     , stOs.innum);
    DBFPutFieldValue (DBFHandle,'COS',        string(stOs.cKatOs,0,0) );

    DBFPutFieldValue (DBFHandle,'S1',         stOs.kKauNum1);
    DBFPutFieldValue (DBFHandle,'S1NREC',     string(stOs.kKauNRec1,0,0));
    DBFPutFieldValue (DBFHandle,'S1INN',      stOs.kKauINN1);
    DBFPutFieldValue (DBFHandle,'S1KPP',      stOs.kKauKPP1);
    #SetDBFSKAU(2)
    DBFPutFieldValue (DBFHandle,'S14N'  ,     stOs.kKau14);
    DBFPutFieldValue (DBFHandle,'S14D'  ,     DateToStr2(stOs.dKau14));
    #SetDBFSKAU(22)
    DBFPutFieldValue (DBFHandle,'S40CODE'  ,     stOs.kKau40);
    DBFPutFieldValue (DBFHandle,'S40NAME'  ,     stOs.sKau40);
    DBFPutFieldValue (DBFHandle,'CKABORCODE'  ,  stOs.cKaborCode);
    DBFPutFieldValue (DBFHandle,'CKABORNAME'  ,  stOs.cKaborName);

    DBFPutFieldValue (DBFHandle,'S5017CODE'  ,  stOs.KaElemCode);
    DBFPutFieldValue (DBFHandle,'S5017KOD'  ,   stOs.KaElemKod);

    #SetDBFUKAU(20009)
    #SetDBFUKAU(20025)
    #SetDBFUKAU(20054)
    #SetDBFUKAU(20057)
    #SetDBFUKAU(20067)
    #SetDBFUKAU(20072)
    #SetDBFUKAU(20073)
    #SetDBFUKAU(20077)
    #SetDBFUKAU(20101)

    DBFInsertRecord(DBFHandle);
    NextVisual;
 }

  DBFClose(DBFHandle);
  stopvisual(0,0);
  Message ('DBF-файл выгружен по пути ' + DBFPath);
}


cmCancel:
{
 CloseInterface (cmCancel);
}
end;
end.
