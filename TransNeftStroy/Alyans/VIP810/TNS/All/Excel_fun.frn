! DEFINE _EXCEL_MES_ приведет к дополнительным сообщения
!========================================================
! Пишем в Excel из консультанта
!========================================================
.var
 wklExcel :word ; // вывод в Excel
 wpicture :boolean ;
 wPictBook: string ;
 fbasname ,fmacroname,logfile :string ;
 wstartpath:string ;
 wexcel_num_0 :word ; // 0 - "-" если 0,иначе 0
 wrowu,wrowd,wcolr,wcoll :longint ;
 rowcur,collall,colcur :longint ; 
 mycountit :word ;
 wxlBorderL,wxlBorderR,wxlBorderT,wxlBorderB : word ;
 wxlInsideH,wxlInsideV,wxlDiagonalD,wxlDiagonalU :word; 
 wexcel:word ;//признак удачного запуска
 HeaderStrCount : longint ;
 wxlbold :word ;
 wxlCenter:word;
 wxlLeft  :word;
 wxlRight  :word;
 wxlTop    :word;
 wxlFill   :word;
 wxlGeneral:word;
//
 logfilekl:boolean ; // вести отладку
 wpoint :string ;  // разделитель в excel
 logfilenm: string ;
// для матричного вывода
 matrixrow,matrixsdvig,matrixlen : longint ;
 matrixkl  : boolean ;
//3 звенка   
 kl3zvenka :boolean ; // признак 3 звенки
//3 звенка   
.endvar
.Procedure MylogWrite(w: string) ;
begin
 if logfilekl
   logstrtofile(logfilenm,w)
 end.
! пробуем расшифровать стандартную кодировку ячейки
.Function GetRowCol(w:string ;var wrow : longint;var wcol:longint ) :boolean ;
var
 i,j : word ;    
 k:longint ;
 w1:string ;
begin
 GetRowCol:=true ;
 for(i:=1;i<=length(w) ;i:=i+1)
 { if substr(w,i,1)<='9' and substr(w,i,1)>='0'
   { wrow:=longint(substr(w,i,10))
     k:=0 ;
     for(j:=1;j<i ;j:=j+1)
     { w1:=substr(w,j,1) ;
       k:=k*26+(1+ord(w1)-ord('A'))
     }
     wcol:=k ;
     exit ;
   }
 
 }
 end.
! определяем диапазон вывода 
.Function MyRangeSelect(w: string) :boolean ;
var wb,we:string ;
begin
 wrowu:=0 ;wrowd:=0 ;wcolr:=0;wcolr:=0 ;
 w:=trim(upcase(w)) ;
 wb:=substr(w,1,pos(':',w)-1)
 we:=trim(substr(w,pos(':',w)+1,10))
 GetRowCol(wb,wrowu,wcoll)  
 GetRowCol(we,wrowd,wcolr)  
 MyRangeSelect:=true ; 
// Logstrtofile(fmacroname,'MyRangeSelect '+
//  w+';'+string(wrowu)+';'+string(wrowd)+';'+
//    string(wcoll)+';'+string(wcolr)+';') ;

 end.
! выводит по текущей строке 
.Function MyRangeSelect11(w1: string ;w2:string) :boolean ;
begin
 wrowu:=0 ;wrowd:=0 ;wcolr:=0;wcolr:=0 ;
 w1:=trim(upcase(w1)) ;
 w2:=trim(upcase(w2)) ;
 GetRowCol(w1+string(rowcur),wrowu,wcoll)  
 GetRowCol(w2+string(rowcur),wrowd,wcolr)  
 MyRangeSelect11:=true ; 
// Logstrtofile(fmacroname,'MyRangeSelect '+
//  w+';'+string(wrowu)+';'+string(wrowd)+';'+
//    string(wcoll)+';'+string(wcolr)+';') ;

 end.
! преобразуем в строку 
.Function v(w:double):string ;
begin
  v:=replace(trim(string(w,20,2)),'.',',')
 end.
! пишем в определенную ячейку  
.Function MySellWrite(w:string ) :boolean ;
begin
 MySellWrite:=xlSetCellStringValue(w,wrowu,wcoll,wrowd,wcolr) ; 
 end.
! пишем число 
.Function MySellWriteNum(w:double;tpwrite:word ) :boolean ;
begin
 MySellWriteNum:=xlSetCellNumberValue(w,wrowu,wcoll,wrowd,wcolr) ; 
 if wpoint='' then wpoint:=','
 case tpwrite of
 0: xlSetNumberFormat('0'+wpoint+'00',wrowu,wcoll,wrowd,wcolr) ; // сумма
 else xlSetNumberFormat('0'+wpoint+'0000',wrowu,wcoll,wrowd,wcolr) ; //кол-во
 end;
 end.
! делаем матрицу
.Function MyXlCreaMatrix(wrow :longint;wcol:longint) :boolean ;
begin
  MyXlCreaMatrix:=XLCREATEMATRIX(wrow,wcol) ;
  xlClearMatrix ;
  matrixsdvig:=rowcur-1 ;
  matrixkl:=true ;
  matrixlen:=wrow ;
  matrixrow:=0 ;
 end.             
.Function MyxlWriteMatrix(wrow:longint) :boolean ;
begin
  MyxlWriteMatrix:=xlWriteMatrixToExcel(matrixsdvig+1,0) ;
  xlClearMatrix ;
  matrixsdvig:=wrow-1 ;
 end.
!пишем строку в указанную позицию и перемещаемся в следующую колонку 
.Function MyxlWrite(w:string;wrow:longint;wcol:longint;
  tpwrite:word):string ;
var w1:string; 
begin
//tpwrite - допиывать или нет ячейку
//0 техт
//1 техт+ пред.содержимое
//2 число 
  if w='ДД/ММ/ГГГГ' then w:='-'
MyxlWrite:=w ;
  if wexcel=0
  { 
    exit ;
  
  }
  
  wrowu:=wrow ;
  wrowd:=wrow ;
  wcoll:=wcol ;
  wcolr:=wcol ;
  w1:='' ;
  if tpwrite=1 then xlGetCellValue(wrow,wcol,w1)
  if matrixkl
  { if wrow-matrixsdvig>matrixlen
    { MyxlWriteMatrix(wrow) ;  
       
    }
    if tpwrite<2 or tpwrite=3
      XLSTWRITETOMATRIX(wrow-matrixsdvig,wcol,''+w1+w+'') 
    else
    { if double(trim(w))=0 and pos(' ',w)=0 and wexcel_num_0=0
        XLSTWRITETOMATRIX(wrow-matrixsdvig,wcol,'-') 
      else 
        XLDOWRITETOMATRIX(wrow-matrixsdvig,wcol,double(trim(w)) ) 
//        XLSTWRITETOMATRIX(wrow-matrixsdvig,wcol,trim(w)) 
    }
  }
  else  
  { if tpwrite<2 or tpwrite=3 //length(w1)>0 or double(trim(w))=0 
    {
     MySellWrite(w1+w) 
     if tpwrite=0
       xlWrapText(wrow ,wcol,wrow,wcol) ;   

    } 
    else {
     if double(trim(w))=0 and wexcel_num_0=0
       MySellWrite('-') 
     else
       MySellWriteNum(double(trim(w)),tpwrite-2)
    } 
    xlAlignCellsEx(0,-4160,wrow ,wcol,wrow,wcol); // xltop
  }  
  colcur:=wcol+1 ;//colcur+1 ;будем сдвигаться по параметру
 end.
! делаем обрамление 
.Function  MyxlFrameCells(wru:longint;wcl:longint;wrb:longint;wcr:longint;w:longint) :boolean ;
begin
  MyxlFrameCells:=false ;
  if wcl>wcr then exit ; // правая колонка меньше правой
  if wru>wrb then exit ; // верх ниже низа
  if w=0 then
  {  w:=wxlBorderL or wxlBorderR or wxlBorderT or wxlBorderB ;
     if wru>wrb w:=w or  wxlInsideH ;
     if wcr>wcl w:=w or  wxlInsideV ;
  }   
  MyxlFrameCells:=xlFrameCells(w, 2, 0, 0,
            wru ,wcl,wrb,wcr) ; 
  //2 = xlthin          
 end.
! выходной каталог на трехзвенке
.function MyExDirectoryOut :string ;
begin
 if kl3zvenka
   MyExDirectoryOut:=TranslatePath('%ClientRoot%') + '\OUT\'+UserName + '\' ;
 else
   MyExDirectoryOut:=GetStringParameter('Files','OutputFilesDirectory',0) ;
 end. 
! открываем Excel             
.Function MyXlInit(nmform:string) :boolean ;
begin
  XLKILLEXCEL ;

//3 звенка   
//   if (TranslatePath('%ClientRoot%\')<>TranslatePath('%StartPath%'))   
//   and  (TranslatePath('%ClientRoot%\')<>'\')  
// да не будем проверять на трехзвенку
#ifdef MYATL51
   if upcase(TranslatePath('%ClientRoot%') + '\OUT\'+UserName + '\')
   <> upcase(GetStringParameter('Files','OutputFilesDirectory',0))
   then  kl3zvenka:=True ;
   else kl3zvenka:=false ;
#ELSE
  kl3zvenka:=false ;
#ENDIF
  wexcel_num_0:=0 ;
// log чистка  
  if logfilenm='' then logfilenm:='!excel.log' ;
//  logfile :=ExDirectoryOut+logfilenm ;
#ifdef ATL51
  logfile :=TranslatePath('%ClientRoot%') + '\OUT\'+UserName + '\'+logfilenm;
#ELSE
  logfile:=GetStringParameter('Files','OutputFilesDirectory',0)+logfilenm ;
#endif
  logfilenm:=GetStringParameter('Files','OutputFilesDirectory',0)+logfilenm ;
//   logfile:='!'+nmform+'.txt' ;
  if fileexist(logfile) deletefile(logfile) 
  if fileexist(logfilenm) deletefile(logfilenm) ;
// задание констант  
  wxlBorderL := 1;
  wxlBorderR := 2;
  wxlBorderT := 4;
  wxlBorderB := 8;
  wxlInsideH := 16;
  wxlInsideV := 32;
  wxlDiagonalD := 64;
  wxlDiagonalU := 128; 
  wxlBold :=1 ;
  wxlCenter := -4108;
  wxlLeft   := -4131;
  wxlRight  := -4152;
  wxlTop    := -4160;
  wxlFill   :=  5;
  wxlGeneral := 1;
   rowcur:=0 ;
   fbasname:=TranslatePath('%StartPath%XLS_ED\'+nmform)
   if kl3zvenka
   { fbasname:=TranslatePath('%ClientRoot%\XLS_ED\'+nmform)
   
   }

//3 звенка   
   mycountit:=0 ;
   wexcel:=0 ;
   if logfilekl
   logstrtofile(logfilenm,'Шаблон  '+fbasname) ;
//   message(fbasname)
   if fileexist(fbasname)  
   {
     //wPicture:=xlCreateExcelWithTemplate(fbasname,True) ;
     wPicture:= xlOpenNewExcel(True);
     if wPicture
       wPicture:= xlOpenWorkBook(fbasname)

     if wPicture
     { XLGETACTIVEWORKBOOKNAME(wPictBook) ;
       xlSetActiveWorkBookByName(wPictbook) ;
       fbasname:=MyExDirectoryOut+ wPictbook+'.xls' ;
       if fileexist(fbasname) deletefile(fbasname) 
       xlSaveAsWorkBookByName(wPictbook, fbasname)
       xlCloseWorkBookByName('Книга1')
       xlSetActiveWorkBookByName(wPictbook) ;
       
       wexcel:=1 ;
     } else
     { //Errwrite('Ошибка открытия файла с образчиком '+fbasname) ;
       message('Ошибка открытия файла с образчиком '+fbasname) ;
//       BkPrZkF.fexit ;
       wexcel:=0 ;
     }  

   } 
   else {
   //  message('Не найден образчик с шапкой '+ fbasname) ;
     wPicture:=xlCreateExcel(nmform,True) ;
     if wPicture
     { XLGETACTIVEWORKBOOKNAME(wPictBook) ;
       xlSetActiveWorkBookByName(wPictbook) ;
       wexcel:=2 ;
     } else
     { //Errwrite('Ошибка открытия файла с образчиком '+fbasname) ;
       message('Ошибка открытия Excel') ;
       wexcel:=0 ;
     } 
   }  
   if wexcel=0 then MyXlInit:=false else MyXlInit:=true ;
   matrixrow:=0 ; 
 end.  
.Function MyXlEnd :boolean ;
begin
 if wexcel>0
 {
  if matrixkl then
  { MyxlWriteMatrix(rowcur) ;
    xlFreeMatrix ;
  }
  XLGETACTIVEWORKBOOKNAME(wPictBook) ;
//под 2 звенку  fbasname:=GetStringParameter('Files','OutputFilesDirectory',0)+ wPictbook+'.xls' ;
  fbasname:=MyExDirectoryOut+ wPictbook+'.xls' ;
//  fbasname:=ExDirectoryOut+wPictbook+'.xls' ;
  if fileexist(fbasname) deletefile(fbasname) 
  
  xlSaveAsWorkBookByName(wPictbook, fbasname)
  XLKILLEXCEL ;
  MyXlEnd:=true ; 
#IFDEF _EXCEL_MES_  
  message('Переключитесь в Excel и смотрите отчет') ;
#ENDIF  
 } else
  MyXlEnd:=False ;
//  xlSetFontSize(8,rowcur,wcoll,rowcur,wcolr) ;
// xlWrapText(HeaderStrCount+1 ,1,wexrow,1) ;
//  xlAlignCellsEx(0,xlTop,HeaderStrCount+1 ,1,wexrow,11);
//  xlAlignCells(xlTop,HeaderStrCount+1 ,1,wexrow,11);
//xlSetColumnWidth (20,HeaderStrCount+1 ,1,wexrow,11);
 if logfilekl
   logstrtofile(logfilenm,'!!!!!! '+logfilenm+'/'+logfile) ;//тест протокола в 3 звенке
// message('1')
 if fileexist(logfilenm) 
 { 
//3 звенка   
   if kl3zvenka
   { // здесь наверное нужно чаго то сделать
#ifdef ATL51
     PutFileToClient(logfile,false)
#ENDIF   
   }
   else
     logfile:=logfilenm ;
//   message('1') ;
//   GetFileFromClient(logfilenm,false) ;
   message('В процесе формирования обнаружены ошибки'+chr(13)+
    'смотрите "'+logfile+'"')
     ProcessText(logfile,vfNewTitle+vfEscable+vfMacroSize+vfRunModal,
              logfile+' Протокол ошибок');
 
 }  
 end.