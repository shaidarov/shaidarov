
#include ConstAttr.vpp

#include ExtAttr.vih
#include PersNrCt.vih

const
 cTypeMcSFO   : comp = 0064000000000009h;     // Тип МЦ 1008
 cnstGrNal    : comp = 0064000000000001h;     // Группа налогов НДС_18
 cnstStZatr   : comp = 0;                     // Статья затрат
 cnstKaElem   : comp = 0;                     // Элемент затрат       Спецодежда
 cnstPartyREN : comp = 01C200000000002Ah;     // Партия РЭН
 pos_col_err  : word = 21;                    // с этой колонки записываем ошибки позиционирования
end;

Interface Saldo_SFO 'Импорт сальдо по Cпецодежде' (,,) , DoAccept;
  Show at (, , 85, 10);

#include ExtAttr.var          // var piExtAttr: iExtAttr;
#include PersNrCt.var         // var iPersNorm : PrsNrmCnt;

var
 _path
, Podr_Kod
, Podr_Kod_Prev
, Podr_toSFO
, Podr_toSFO_Prev
, Mol_Kod
, Mol_Kod_Prev
, Mol_ToSFO
, Mol_ToSFO_Prev
, OldTabN
, FIOrab
, MC_Kod
, MC_Name
, Norm_Kod
, strSrok
, EdIzmer
, tmpBarKod
, strFilial
, strDateVvod
         : string  ;
  DateVvod
, DateSaldo
         : date    ;
  pos_row
, ProtParty                   // переменная для функции MakeOptionsByDefines - не удалять её из описания
, wSchet
         : word    ;
  KolVo
, Stoim
, NDS_dbf
, Cena
, srok
, Iznos
, OstSumma
         : double  ;
  cGrDescr
         : comp    ;


create view
as select *
from
  KatMBP
, MBPin
, PersSFO
, GroupSFO
, Persons
, KatPodr
, KatMOL
, KatMC
, KatEd
, GroupMC
, KatOtpEd
, SoprHoz
, PersNorm
, GrDescr
! для функций генерации бар-кода
, synonym KatMC    KatMC2
where (( cGrDescr == GrDescr.nRec ))

;


#include BarKodMC.vpp // Ф-ции работы с баркодами

screen scrParam ('Параметры загрузки сальдо Спецодежды', , sci13Esc);
notablenavigation;

 Fields
  DateSaldo ('Дата закачки остатков'   , , ) : noProtect;

 wSchet     ('Загружаемый счёт') : [List '10.08'
                                       , '10.09'
                                       , '013'], Protect;

  GrDescr.DesGr ('Филиал'              , , ) : Protect;

      _path ('Excel-шаблон'            , , ) : noProtect;

 Buttons
  cmCheck  ;
  cmOk     ;
  cmCancel ;
<<

  `Дата закачки остатков : ` .@@@@@@@@@@

  `Загружаемый счёт      : ` .@@@@@@@@@@      `Филиал   : ` .@@@@@@@@@@

  `Файл Excel-шаблона    : ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

     <. Проверить файл .>         <. Загрузить .>         <. Отмена .>
>>
end;

function FindFiled : boolean; {

    Podr_Kod   := '';           xlGetCellValue(pos_row,  1, Podr_Kod  );
    Mol_Kod    := '';           xlGetCellValue(pos_row,  3, Mol_Kod   );
    OldTabN    := '';           xlGetCellValue(pos_row,  5, OldTabN   );
    FIOrab     := '';           xlGetCellValue(pos_row,  6, FIOrab    );
    MC_Kod     := '';           xlGetCellValue(pos_row,  7, MC_Kod    );  MC_Kod  := trim(MC_Kod) ;
    MC_Name    := '';           xlGetCellValue(pos_row,  8, MC_Name   );  MC_Name := trim(MC_Name);
    Norm_Kod   := '';           xlGetCellValue(pos_row, 10, Norm_Kod  );




 case wSchet of
  0    : {
    strDateVvod:= '';           xlGetCellValue(pos_row, 18, strDateVvod  );    // Год приобритения для анализа нелеквидных складских запасов
    DateVvod   := date(01, 01, strDateVvod);
  }

  1, 2 : {
    strDateVvod:= '';           xlGetCellValue(pos_row, 12, strDateVvod  );
    DateVvod   := StrToDate(strDateVvod, 'DD/MM/YYYY');
   if DateVvod = date(0, 0, 0)
    DateVvod   := StrToDate(strDateVvod, 'DD.MM.YYYY');
  }
 end;


    strSrok    := '';           xlGetCellValue(pos_row, 13, strSrok   );
    KolVo      :=  0;           xlGetCellValue(pos_row, 14, KolVo     );
    Stoim      :=  0;           xlGetCellValue(pos_row, 15, Stoim     );
    EdIzmer    := '';           xlGetCellValue(pos_row,  9, EdIzmer   );
!    Cena       :=  0;           Cena := Stoim / KolVo                  ;
    Iznos      :=  0;           xlGetCellValue(pos_row, 16, Iznos     );
    OstSumma   :=  0;           xlGetCellValue(pos_row, 17, OstSumma  );

    FindFiled  := true ;

    if ( Podr_Kod = '') {
      FindFiled := false ;
      Exit;
    }

    if GetFirst KatPodr  where (( Podr_Kod == KatPodr.Kod     )) != tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 1, pos_row, pos_col_err + 1);
    }

    if GetFirst KatMol   where (( Mol_Kod  == KatMol.Kod      )) != tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 2, pos_row, pos_col_err + 2);
    }


    case upCase(strSrok) of
      ''          : srok := 0;
      'НА СКЛАДЕ' : srok := 0;
      'ДО ИЗНОСА' : srok := MaxWord;
               else srok := round(double(replace(strSrok, ',', '.')),0);              // могут быть запятые в сроках
    end;


   if ( (srok != 0 and OldTabN != '') or FIOrab != '' ) {                                                         // в эксплуатации и Дежурная

    if GetFirst Persons  where ((   OldTabN    ==        Persons.PassNmb  (noIndex)
!    if GetFirst Persons  where ((   OldTabN   ==        Persons.StrTabN  (noIndex)
                         and ( Trim(UpCase(FIOrab))  = Trim(UpCase(Persons.FIO))  )
                                                                       )) <> tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 3, pos_row, pos_col_err + 3);
    } else {
         if GetFirst lSchet where (( Persons.nRec == lSchet.tPerson )) <> tsOK {
          FindFiled := false ;
          xlSetCellStringValue('ошибка lSchet', pos_row, pos_col_err + 3, pos_row, pos_col_err + 3);
         } else {
               if GetFirst PersCard where (( lSchet.nRec == PersCard.clSchet )) <> tsOK {
                FindFiled := false ;
                xlSetCellStringValue('ошибка PersCard', pos_row, pos_col_err + 3, pos_row, pos_col_err + 3);
               }
           }
      }
   }

    if GetFirst GroupSFO where (( Norm_Kod == GroupSFO.Kod    )) <> tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 4, pos_row, pos_col_err + 4);
    }

    if GetFirst GroupMC where (( Norm_Kod == GroupMC.Kod    )) <> tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка GroupMC', pos_row, pos_col_err + 8, pos_row, pos_col_err + 8);
    }

    if KolVo = 0 {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 5, pos_row, pos_col_err + 5);
    }



    if GetFirst KatEd where (( EdIzmer == KatEd.Name    )) <> tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 6, pos_row, pos_col_err + 6);
    }

    if MC_Name = '' {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 7, pos_row, pos_col_err + 7);
    }

    case wSchet of
      1 : {   //10.09
       if DateVvod = date(0, 0, 0) {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 9, pos_row, pos_col_err + 9);
       }
      }
      2 : {   // 013
       if ( DateVvod = date(0, 0, 0) and Srok != 0 ) {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 9, pos_row, pos_col_err + 9);
       }

       if ( OldTabN != '' and Srok = 0 ) {                  // Если это не проверить, тогда будет приход в состояние "на склад", но с Работником - потом отчёт сверки разлезается, да и в Личную карточку наличие не попадёт, PersSFO не будет создан
        FindFiled := false ;
        xlSetCellStringValue('ошибка есть работник, но нет срока', pos_row, pos_col_err + 9, pos_row, pos_col_err + 9);
       }
      }
    end;
}



Procedure Insert_KatMC; {

    if GetFirst KatMC    where (( cTypeMcSFO == KatMC.cType   (noIndex)
                              and MC_Name    == KatMC.Name
                              and MC_Kod     == KatMC.BarKod
                              and KatEd.nRec == KatMC.cEd     (noIndex)
                               )) = tsOK
          { Exit; }

    if GetFirst KatMC    where (( cTypeMcSFO == KatMC.cType   (noIndex)
                              and MC_Name    == KatMC.Name
!                              and MC_Kod     == KatMC.BarKod2 (noIndex)
                              and KatEd.nRec == KatMC.cEd     (noIndex)
                               )) = tsOK
          { Exit; }

! не надо нам эти Соответствия - там всего 520 позиций, а при сравнении MC_Name == UserDeskRep.ResName[1] автоматом обрезается переменная, и надо использовать сцепку трёх полей UserDeskRep.ResName[1] + UserDeskRep.ResName[2] + UserDeskRep.ResName[3]
/*
    if GetFirst UserDeskRep  where (( 50111   == UserDeskRep.nRep
                                   ))
                      and MC_Name == UserDeskRep.ResName[1] + UserDeskRep.ResName[2] + UserDeskRep.ResName[3]
!                                  and MC_Kod  == UserDeskRep.ResCode[1]        (noIndex)
                                   )) = tsOK {

        if GetFirst KatMC    where (( UserDeskRep.ResComp[11]  == KatMC.nRec
                                  and cTypeMcSFO               == KatMC.cType  (noIndex)
                                   )) = tsOK
          { Exit; }
    }


    if GetFirst KatMC    where (( cTypeMcSFO == KatMC.cType   (noIndex)
                              and MC_Name    == KatMC.Name
                               )) = tsOK
          { Exit; }
*/

! Если не вышли раньше - значит МЦ не существует и её надо создать
  {

          ClearBuffer(#KatMC);
          KatMC.Name       := MC_Name;
          KatMC.cGroupMC   := GroupMC.nRec;
          KatMC.kGroupMC   := GroupMC.Kod;


! Бар-код обязательно присваиваем после KatMC.cGroupMC
        if (MC_Kod != '') {
!          KatMC.BarKod2    := MC_Kod;
        }
!          SetDefaultBarKod;    //     в "Связи" есть оракловый триггер на формирование Бар-кода

          KatMC.cEd        := KatEd.nRec;
          KatMC.cType      := cTypeMcSFO;
          KatMC.cGrNal     := cnstGrNal;
          KatMC.cStZatr    := cnstStZatr;
          KatMC.cKaElem    := cnstKaElem;
          Insert Current KatMC;

              ClearBuffer(#KatOtpEd)           ;
              KatOtpEd.Name    := KatEd.Name   ;
              KatOtpEd.cMcUsl  := KatMC.nRec   ;
              KatOtpEd.Diskret := KatEd.Diskret;
              KatOtpEd.PrMC    := 1;
              KatOtpEd.Koef    := 1;
              KatOtpEd.Akt     := 1;
              KatOtpEd.Pr      := if(boGetTune('McUsl.McDefPr'), 1, 0);  // производственная еди
              KatOtpEd.cKatEd  := KatEd.nRec   ;
              KatOtpEd.ABBR    := KatEd.Abbr   ;
              insert current KatOtpEd          ;
    }

}

procedure Insert_MBPin; {

      if (GetFirst KatMBP where (( KatMC.nRec == KatMBP.cMc )) <> tsOk) {

        ClearBuffer(#KatMBP);
        KatMBP.cMc      := KatMc.nRec   ;
        KatMBP.Name     := KatMc.Name   ;
        KatMBP.nNumber  := KatMc.BarKod ;
        KatMBP.cEd      := KatMc.cEd    ;
        KatMBP.cWriteOff:= coGetTune('Fin.MBP.DefMethSpis');

        // Группа материальных ценностей
        if (KatMBP.cMC <> 0)
          if (GetFirst GroupMC where (( KatMc.cGroupMC == GroupMC.nRec )) = tsOk) {
            KatMBP.cGroupMC  := GroupMC.nRec;
            KatMBP.KodGr     := GroupMC.Kod;
          }

        KatMBP.MBPkind := 1;
        Insert Current KatMBP;
      }

      ClearBuffer(#MBPin)                     ;
      MBPin.InState   := 9                    ; // bpOverOp  = 9;   // Оприходование излишка
      MBPin.cMBP      := KatMBP.nRec          ;
      MBPin.Nom       := MBPmove.Nom          ;
      MBPin.cSopr     := MBPmove.nRec         ;
      MBPin.cMBPOut   := 0                    ;

      MBPin.cPodr     := MBPmove.cPodrT       ;
      MBPin.cMol      := MBPmove.cMolT        ;
      MBPin.cPartyF   := cnstPartyREN         ;
!      MBPin.DopInfo   := SpSoprSFO.nKvit      ;
      MBPin.Status    := 1                    ;
      MBPin.StatAvto  := 1                    ;
      MBPin.DateZero  := date(31, 12, 2050)   ;

      MBPin.KolDoc    := KolVo                ;
      MBPin.KolFact   := KolVo                ;

      MBPin.Summa     := OstSumma + Iznos                ;   // всё-таки лучше высчитать, а не брать из Excel
      MBPin.SumFact   := MBPin.Summa                     ;
      MBPin.Price     := MBPin.SumFact / MBPin.KolFact   ;
      MBPin.SummaIsnN := Iznos                           ;
      MBPin.SumIsnF   := MBPin.SummaIsnN                 ;
      MBPin.PercNach  := ( Iznos / MBPin.SumFact ) * 100 ;
      MBPin.tPercent  := MBPin.PercNach                  ;

    case wSchet of
      0 : {
        MBPin.dIn      := DateVvod      ;
      }

      1 : {
        MBPin.dIn      := DateVvod      ;   // раньше был MBPmove.dMove, но тогда в Печать личной карточки выходит у всех МЦ одинаковая дата
        MBPin.InEkspl  := 1             ;
        MBPin.DateEksp := DateVvod      ;

       if (OldTabN != '')                                 // Дежурная спецодежда
        MBPin.cPers    := PersCard.nRec ;

       if (Srok > 0 and Srok != MaxWord)
        MBPin.DateEnd  := Add_Months(MBPin.DateEksp, Srok);
      }

      2 : {                                               // 013
        MBPin.dIn      := DateVvod      ;  // раньше был MBPmove.dMove, но тогда в Печать личной карточки выходит у всех МЦ одинаковая дата

       if (OldTabN != '')                                 // Дежурная спецодежда
        MBPin.cPers    := PersCard.nRec ;

       if (Srok > 0) {
        MBPin.InEkspl  := 1             ;
        MBPin.DateEksp := DateVvod      ;

          if (Srok != MaxWord) {                          // до износа
           MBPin.DateEnd  := Add_Months(MBPin.DateEksp, Srok);
          }
       }

      }
    end;


      Insert Current MBPin;


! если срок не соответствует счёту - проставим Атрибутик
    case wSchet of
       0 : {                // 10.08
            if ( Iznos > 0 )
             piExtAttr.coSetAttr(coMBPin, MBPin.nRec, ct_PrizSch     , ct_coBalans  , ct_stBalans    );
       }

       1 : {                // 10.09
            if ( ( Srok >= 0 and Srok <= 12 )
                or Srok  = MaxWord
               )
             piExtAttr.coSetAttr(coMBPin, MBPin.nRec, ct_PrizSch     , ct_coBalans  , ct_stBalans    );
       }

       2 : {                // 013
            if ( (Srok = 0 or  Srok > 12) and Srok != MaxWord ) {
             piExtAttr.coSetAttr(coMBPin, MBPin.nRec, ct_PrizSch     , ct_coZaBalans, ct_stZaBalans  );
             piExtAttr.coSetAttr(coMBPin, MBPin.nRec, ct_PrizSchSklad, ct_coZaBalans, ct_stZaBalans  );
            }
       }
    end;


    ClearBuffer(#SoprHoz)             ;
    SoprHoz.DesGr    := GrDescr.DesGr ;
    SoprHoz.Descr    := sGetTune('User.Descr');
    SoprHoz.TipDoc   := 704           ;
    SoprHoz.TiDkGal  := 704           ;
    SoprHoz.VhSumHoz := '+'           ;
    SoprHoz.Direct   := 1             ;
    SoprHoz.DatOb    := MBPIn.dIn     ;
    SoprHoz.NoDoc    := MBPIn.Nom     ;
    SoprHoz.cSoprDoc := MBPIn.nRec    ;
    SoprHoz.Summa    := MBPIn.Summa   ;
    insert current SoprHoz            ;
}

procedure Insert_PersSFO; {

    if (Srok = 0 or OldTabN = '' or wSchet = 0) Exit;  // Здесь надо учесть срок "до износа" с работником !

        ClearBuffer(#PersSFO);
        PersSFO.cKatMBP   := KatMBP.nRec    ;
        PersSFO.cPersCard := PersCard.nRec  ;
        PersSFO.cPersSpec := 0;
        PersSFO.cSpReqSFO := 0;
        PersSFO.SpecFlag  := 1;
        PersSFO.OperDate  := MBPin.dIn      ;
        PersSFO.GiveDate  := MBPin.dIn      ;
        PersSFO.ExplDate  := MBPin.DateEksp ;
        PersSFO.EndDate   := MBPin.DateEnd  ;
        PersSFO.Srok      := Srok           ;
        PersSFO.DopAttr   := Srok           ;  // Обязательно заполнять! иначе при перемещении срок в новом PersSFO будет браться из нормы
        PersSFO.CurKol    := MBPin.KolDoc   ;
        PersSFO.DocKol    := MBPin.KolDoc   ;
        PersSFO.ZeroKol   := 1              ;
        PersSFO.cDocMBPIn := MBPin.nRec     ;
        PersSFO.cCurMBPIn := MBPin.nRec     ;
        PersSFO.GiveNom   := MBPin.Nom      ;
        PersSFO.cGroupSFO := GroupSFO.nRec  ;
        insert current PersSFO;

        if GetFirst PersSpec where ((  PersCard.nRec   == PersSpec.cPersCard
                                   and GroupSFO.nRec   == PersSpec.cGroupSFO
                                   and ZeroDate        == PersSpec.ToDate           // дата окончания
                                   )) = tsOk {

           PersSFO.cPersSpec := PersSpec.nRec;
           upDate current PersSFO;

           PersSpec.GivKol := PersSpec.GivKol + MBPin.KolDoc ;
           upDate current PersSpec;
        } else {
                  if GetFirst PersSpec where ((  PersCard.nRec     == PersSpec.cPersCard
                                             and 01C2000000000010h == PersSpec.cGroupSFO
                                             )) = tsOk {
                     PersSFO.cPersSpec := PersSpec.nRec;
                     upDate current PersSFO;

                     PersSpec.GivKol := PersSpec.GivKol + PersSFO.DocKol ;
                     upDate current PersSpec;
                  }
                     else {
                            ClearBuffer(#PersNorm)                   ;
                            PersNorm.cNormSFO  := 01C200000000025Eh  ; // ЯR Сальдо - норма для загрузки остатков
                            PersNorm.cPersCard := PersCard.nRec      ;
                            PersNorm.FrDate    := date(01, 01, 2000) ;
                            PersNorm.Status    := 1                  ;
                            PersNorm.OsnFlag   := 1                  ;
                            PersNorm.SpecFlag  := 0                  ;
                            Insert current PersNorm                  ;

                            iPersNorm.ReCalcPersNorms(PersCard.nRec, false);

                                  if GetFirst PersSpec where ((  PersCard.nRec     == PersSpec.cPersCard
                                                             and 01C2000000000010h == PersSpec.cGroupSFO
                                                             )) = tsOk {
                                     PersSFO.cPersSpec := PersSpec.nRec;
                                     upDate current PersSFO;

                                     PersSpec.GivKol := PersSpec.GivKol + PersSFO.DocKol ;
                                     upDate current PersSpec;
                                  }


                     }
               }

}


Procedure Insert_MBPmove; {

  ClearBuffer(#MBPmove)                       ;
  MBPmove.Nom       := GrDescr.DesGr + '_' + bCase(wSchet = 0: '10.08', wSchet = 1: '10.09', wSchet = 2: '013');
  MBPmove.dMove     := DateSaldo              ;
  MBPmove.cPodrT    := KatPodr.nRec           ;
  MBPmove.cMolT     := KatMOL.nRec            ;
  MBPmove.Summa     := 0                      ;
  MBPmove.SummaIsn  := 0                      ;
  MBPmove.Status    := 9                      ; // bpOverOp  = 9;   // Оприходование излишка
  MBPmove.DesCr     := sGetTune('User.Descr') ;
  MBPmove.DesGr     := GrDescr.DesGr          ;
  MBPmove.MBPkind   := 1                      ;
  MBPMove.cValOld   := to_days(DateSaldo)     ; // Это ДАТА проведения
  insert current MBPmove                      ;
}

#declare ErrorField
    xlSetCellStringValue('Нет подразделения'  , 1, pos_col_err + 1, 1, pos_col_err + 1);
    xlSetCellStringValue('Нет МОЛ'            , 1, pos_col_err + 2, 1, pos_col_err + 2);
    xlSetCellStringValue('Нет работника'      , 1, pos_col_err + 3, 1, pos_col_err + 3);
    xlSetCellStringValue('Нет нормы'          , 1, pos_col_err + 4, 1, pos_col_err + 4);
    xlSetCellStringValue('Нет количества'     , 1, pos_col_err + 5, 1, pos_col_err + 5);
    xlSetCellStringValue('Нет единица изм.'   , 1, pos_col_err + 6, 1, pos_col_err + 6);
    xlSetCellStringValue('Нет МЦ'             , 1, pos_col_err + 7, 1, pos_col_err + 7);
    xlSetCellStringValue('Нет группы МЦ'      , 1, pos_col_err + 8, 1, pos_col_err + 8);
    xlSetCellStringValue('Нет Даты ввода'     , 1, pos_col_err + 9, 1, pos_col_err + 9);
#end


HandleEvent

cmPick: {
  case CurField of
    #_path: {
      set _path := GetFileName('*.xls;*.xlsx','Укажите файл с остатками Спецодежды для загрузки сальдо');
    }

    #GrDescr.DesGr: {
      RunInterface('GetGrDescr', '', FALSE, FALSE, cGrDescr);
    }
  end;
}


cmCancel: {
   CloseInterface(cmCancel);
}

cmCheck: {
    if (_path = '' ) {
      message('Должен быть указан файл!', Error);
      Exit;
    }

    StartNewVisual(vtRotateVisual, vfTimer,'Идёт анализ данных...', 0);

    xlCreateExcelWithTemplate (_path,true);
    xlSetActiveSheet(1);

    pos_row       :=  2;

    #ErrorField;

    Do {
      iNextVisual('Идёт анализ данных... ' + pos_row);

      FindFiled;
      pos_row := pos_row + 1;
    } While (Podr_Kod <> '')


   xlKillExcel;                         // Окончание работы с Excel
   StopVisual('Проверка закончена. Смотрите исходный файл', 0);
}

cmOk: {
    if (_path = '' or DateSaldo = date(0,0,0) ) {
      message('Должны быть указаны все поля на экране!', Error);
      Exit;
    }

    if (DateSaldo <= dGetTune('FIN.USER.DTECBUH') ) {
      message('Загрузка остатков в закрытом периоде БухКонтура запрещена!', Error);
      Exit;
    }

    StartNewVisual(vtRotateVisual, vfTimer,'Идёт анализ данных...', 0);
    xlCreateExcelWithTemplate (_path,true);
    xlSetActiveSheet(1);

    pos_row        :=  2;
    Podr_Kod_Prev  := '';
     Mol_Kod_Prev  := '';

    #ErrorField;

    Do {
      iNextVisual('Идёт анализ данных... ' + pos_row);

      if not FindFiled {
           pos_row := pos_row + 1;
           Continue;
      };

    Insert_KatMC;


    if ( Podr_Kod_Prev   != Podr_Kod   or Mol_Kod_Prev   !=  Mol_Kod )
      Insert_MBPmove   ;


      Insert_MBPin     ;
      Insert_PersSFO   ;

      pos_row := pos_row + 1;

      Podr_Kod_Prev :=   Podr_Kod;
       Mol_Kod_Prev :=    Mol_Kod;

    } While ( Podr_Kod <> '' )

    xlKillExcel;                         // Окончание работы с Excel
    StopVisual('Закачка закончена', 0);
}

end;

end. // interface
