
#include ConstAttr.vpp

#include ExtAttr.vih
#include PersNrCt.vih

const
 cTypeMcSFO   : comp = 0064000000000009h;     // Тип МЦ 1008
 cnstGrNal    : comp = 0064000000000001h;     // Группа налогов НДС_18
 cnstStZatr   : comp = 0;                     // Статья затрат
 cnstKaElem   : comp = 0;                     // Элемент затрат       Спецодежда
 cnstPartyREN : comp = 01C200000000002Ah;     // Партия РЭН
 pos_col_err  : word = 21;                    // с этой колонки записываем ошибки позиционирования
end;

Interface Korrect_Saldo_SFO_LongMC 'Корректировка Импорта сальдо по Cпецодежде, перепривязка к длинным МЦ' (,,) , DoAccept;
  Show at (, , 85, 10);

#include ExtAttr.var          // var piExtAttr: iExtAttr;
#include PersNrCt.var // var iPersNorm : PrsNrmCnt;

var
 _path
, Podr_Kod
, Podr_Kod_Prev
, Podr_toSFO
, Podr_toSFO_Prev
, Mol_Kod
, Mol_Kod_Prev
, Mol_ToSFO
, Mol_ToSFO_Prev
, OldTabN
, FIOrab
, MC_Kod
, MC_Name
, Norm_Kod
, strSrok
, EdIzmer
, tmpBarKod
, strFilial
, strDateVvod
         : string  ;
  DateVvod
, DateSaldo
         : date    ;
  pos_row
, ProtParty                   // переменная для функции MakeOptionsByDefines - не удалять её из описания
, wSchet
         : word    ;
  KolVo
, Stoim
, NDS_dbf
, Cena
, srok
, Iznos
, OstSumma
         : double  ;
  cGrDescr
         : comp    ;


create view
as select *
from
  KatMBP
, MBPin
, PersSFO
, GroupSFO
, Persons
, KatPodr
, KatMOL
, KatMC
, KatEd
, GroupMC
, KatOtpEd
, SoprHoz
, PersNorm
, GrDescr
! для функций генерации бар-кода
, synonym KatMC    KatMC2
where (( cGrDescr == GrDescr.nRec ))

;


#include BarKodMC.vpp // Ф-ции работы с баркодами

screen scrParam ('Параметры загрузки сальдо Спецодежды', , sci13Esc);
notablenavigation;

 Fields
  DateSaldo ('Дата закачки остатков'   , , ) : noProtect;

 wSchet     ('Загружаемый счёт') : [List '10.08'
                                       , '10.09'
                                       , '013'], Protect;

  GrDescr.DesGr ('Филиал'              , , ) : Protect;

      _path ('Excel-шаблон'            , , ) : noProtect;

 Buttons
  cmCheck  ;
  cmOk     ;
  cmCancel ;
<<

  `Дата закачки остатков : ` .@@@@@@@@@@

  `Загружаемый счёт      : ` .@@@@@@@@@@      `Филиал   : ` .@@@@@@@@@@

  `Файл Excel-шаблона    : ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

     <. Проверить файл .>         <. Загрузить .>         <. Отмена .>
>>
end;

function FindFiled : boolean; {

    Podr_Kod   := '';           xlGetCellValue(pos_row,  1, Podr_Kod  );
    Mol_Kod    := '';           xlGetCellValue(pos_row,  3, Mol_Kod   );
    OldTabN    := '';           xlGetCellValue(pos_row,  5, OldTabN   );
    FIOrab     := '';           xlGetCellValue(pos_row,  6, FIOrab    );
    MC_Kod     := '';           xlGetCellValue(pos_row,  7, MC_Kod    );
    MC_Name    := '';           xlGetCellValue(pos_row,  8, MC_Name   );
    Norm_Kod   := '';           xlGetCellValue(pos_row, 10, Norm_Kod  );




 case wSchet of
  0    : {
    strDateVvod:= '';           xlGetCellValue(pos_row, 18, strDateVvod  );    // Год приобритения для анализа нелеквидных складских запасов
    DateVvod   := date(01, 01, strDateVvod);
  }

  1, 2 : {
    strDateVvod:= '';           xlGetCellValue(pos_row, 12, strDateVvod  );
    DateVvod   := StrToDate(strDateVvod, 'DD/MM/YYYY');
   if DateVvod = date(0, 0, 0)
    DateVvod   := StrToDate(strDateVvod, 'DD.MM.YYYY');
  }
 end;


    strSrok    := '';           xlGetCellValue(pos_row, 13, strSrok   );
    KolVo      :=  0;           xlGetCellValue(pos_row, 14, KolVo     );
    Stoim      :=  0;           xlGetCellValue(pos_row, 15, Stoim     );
    EdIzmer    := '';           xlGetCellValue(pos_row,  9, EdIzmer   );
!    Cena       :=  0;           Cena := Stoim / KolVo                  ;
    Iznos      :=  0;           xlGetCellValue(pos_row, 16, Iznos     );
    OstSumma   :=  0;           xlGetCellValue(pos_row, 17, OstSumma  );

    FindFiled  := true ;

    if ( Podr_Kod = '') {
      FindFiled := false ;
      Exit;
    }

    if GetFirst KatPodr  where (( Podr_Kod == KatPodr.Kod     )) != tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 1, pos_row, pos_col_err + 1);
    }

    if GetFirst KatMol   where (( Mol_Kod  == KatMol.Kod      )) != tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 2, pos_row, pos_col_err + 2);
    }


    case strSrok of
      ''          : srok := 0;
      'на складе' : srok := 0;
      'до износа' : srok := MaxWord;
      else srok := round(double(replace(strSrok, ',', '.')),0);              // могут быть запятые в сроках
    end;


   if ( (srok != 0 and OldTabN != '') or FIOrab != '' ) {                                                         // в эксплуатации и Дежурная

    if GetFirst Persons  where ((   OldTabN   ==        Persons.PassNmb  (noIndex)
!    if GetFirst Persons  where ((   OldTabN   ==        Persons.StrTabN  (noIndex)
                         and ( UpCase(FIOrab)  = UpCase(Persons.FIO) )   )) <> tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 3, pos_row, pos_col_err + 3);
    } else {
         if GetFirst lSchet where (( Persons.nRec == lSchet.tPerson )) <> tsOK {
          FindFiled := false ;
          xlSetCellStringValue('ошибка lSchet', pos_row, pos_col_err + 3, pos_row, pos_col_err + 3);
         } else {
               if GetFirst PersCard where (( lSchet.nRec == PersCard.clSchet )) <> tsOK {
                FindFiled := false ;
                xlSetCellStringValue('ошибка PersCard', pos_row, pos_col_err + 3, pos_row, pos_col_err + 3);
               }
           }
      }
   }

    if GetFirst GroupSFO where (( Norm_Kod == GroupSFO.Kod    )) <> tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 4, pos_row, pos_col_err + 4);
    }

    if GetFirst GroupMC where (( Norm_Kod == GroupMC.Kod    )) <> tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка GroupMC', pos_row, pos_col_err + 8, pos_row, pos_col_err + 8);
    }

    if KolVo = 0 {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 5, pos_row, pos_col_err + 5);
    }



    if GetFirst KatEd where (( EdIzmer == KatEd.Name    )) <> tsOK {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 6, pos_row, pos_col_err + 6);
    }

    if MC_Name = '' {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 7, pos_row, pos_col_err + 7);
    }

    case wSchet of
      1 : {   //10.09
       if DateVvod = date(0, 0, 0) {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 9, pos_row, pos_col_err + 9);
       }
      }
      2 : {   // 013
       if ( DateVvod = date(0, 0, 0) and Srok != 0 ) {
        FindFiled := false ;
        xlSetCellStringValue('ошибка', pos_row, pos_col_err + 9, pos_row, pos_col_err + 9);
       }
      }
    end;
}



Procedure Find_KatMC; {

! не надо нам эти Соответствия - там всего 520 позиций, а при сравнении MC_Name == UserDeskRep.ResName[1] автоматом обрезается переменная, и надо использовать сцепку трёх полей UserDeskRep.ResName[1] + UserDeskRep.ResName[2] + UserDeskRep.ResName[3]

    if GetFirst UserDeskRep  where (( 50111   == UserDeskRep.nRep
                                  and MC_Name == UserDeskRep.ResName[1]  (noIndex)
                                   )) = tsOK {

        if GetFirst KatMC    where (( UserDeskRep.ResComp[11]  == KatMC.nRec
                                  and cTypeMcSFO               == KatMC.cType  (noIndex)
                                   )) = tsOK
          { Exit; }
    }



    if GetFirst KatMC    where (( cTypeMcSFO == KatMC.cType   (noIndex)
                              and MC_Name    == KatMC.Name
                              and MC_Kod     == KatMC.BarKod
                               )) = tsOK
          { Exit; }

    if GetFirst KatMC    where (( cTypeMcSFO == KatMC.cType   (noIndex)
                              and MC_Name    == KatMC.Name
                              and MC_Kod     == KatMC.BarKod2 (noIndex)
                               )) = tsOK
          { Exit; }



    if GetFirst KatMC    where (( cTypeMcSFO == KatMC.cType   (noIndex)
                              and MC_Name    == KatMC.Name
                               )) = tsOK
          { Exit; }
}


Procedure Insert_KatMC; {

    if GetFirst KatMC    where (( cTypeMcSFO == KatMC.cType   (noIndex)
                              and MC_Name    == KatMC.Name
                              and MC_Kod     == KatMC.BarKod
                               )) = tsOK
          { Exit; }

    if GetFirst KatMC    where (( cTypeMcSFO == KatMC.cType   (noIndex)
                              and MC_Name    == KatMC.Name
                              and MC_Kod     == KatMC.BarKod2 (noIndex)
                               )) = tsOK
          { Exit; }

! не надо нам эти Соответствия - там всего 520 позиций, а при сравнении MC_Name == UserDeskRep.ResName[1] автоматом обрезается переменная, и надо использовать сцепку трёх полей UserDeskRep.ResName[1] + UserDeskRep.ResName[2] + UserDeskRep.ResName[3]
/*
    if GetFirst UserDeskRep  where (( 50111   == UserDeskRep.nRep
                                  and MC_Name == UserDeskRep.ResName[1]
!                                  and MC_Kod  == UserDeskRep.ResCode[1]        (noIndex)
                                   )) = tsOK {

        if GetFirst KatMC    where (( UserDeskRep.ResComp[11]  == KatMC.nRec
                                  and cTypeMcSFO               == KatMC.cType  (noIndex)
                                   )) = tsOK
          { Exit; }
    }
*/

    if GetFirst KatMC    where (( cTypeMcSFO == KatMC.cType   (noIndex)
                              and MC_Name    == KatMC.Name
                               )) = tsOK
          { Exit; }


! Если не вышли раньше - значит МЦ не существует и её надо создать
  {

          ClearBuffer(#KatMC);
          KatMC.Name       := MC_Name;
          KatMC.cGroupMC   := GroupMC.nRec;
          KatMC.kGroupMC   := GroupMC.Kod;


! Бар-код обязательно присваиваем после KatMC.cGroupMC
        if (MC_Kod != '') {
          KatMC.BarKod2    := MC_Kod;
        }
!          SetDefaultBarKod;    //     в Связи есть оракловый триггер на формирование Бар-кода

          KatMC.cEd        := KatEd.nRec;
          KatMC.cType      := cTypeMcSFO;
          KatMC.cGrNal     := cnstGrNal;
          KatMC.cStZatr    := cnstStZatr;
          KatMC.cKaElem    := cnstKaElem;
          Insert Current KatMC;

              ClearBuffer(#KatOtpEd)           ;
              KatOtpEd.Name    := KatEd.Name   ;
              KatOtpEd.cMcUsl  := KatMC.nRec   ;
              KatOtpEd.Diskret := KatEd.Diskret;
              KatOtpEd.PrMC    := 1;
              KatOtpEd.Koef    := 1;
              KatOtpEd.Akt     := 1;
              KatOtpEd.Pr      := if(boGetTune('McUsl.McDefPr'), 1, 0);  // производственная еди
              KatOtpEd.cKatEd  := KatEd.nRec   ;
              KatOtpEd.ABBR    := KatEd.Abbr   ;
              insert current KatOtpEd          ;
    }

}

procedure upDate_MBPin; {

    if ( trim(KatMC.Name) = trim(MC_Name) )
     Exit;

    if (GetFirst KatMBP where (( KatMC.nRec == KatMBP.cMc )) != tsOk)
     Exit;


    case wSchet of
      0 : {
          if (GetFirst MBPin where ((  1            == MBPin.Status
                                   and KatPodr.nRec == MBPin.cPodr
                                   and KatMOL.nRec  == MBPin.cMOL
                                   and DateVvod     == MBPin.dIn
                                   and KatMBP.nRec  == MBPin.cMBP         (noIndex)
                                   and KolVo        == MBPin.KolDoc       (noIndex)
                                   and OstSumma + Iznos  ==  MBPin.Summa  (noIndex)
                                   and 0            == MBPin.InEkspl      (noIndex)
                                   )) != tsOK )
                                 Exit;
      }
      1 : {
       if (OldTabN = '')  {                               // Дежурная спецодежда
          if (GetFirst MBPin where ((  1                 == MBPin.Status
                                   and KatPodr.nRec      == MBPin.cPodr
                                   and KatMOL.nRec       == MBPin.cMOL
                                   and DateSaldo         == MBPin.dIn
                                   and KatMBP.nRec       == MBPin.cMBP         (noIndex)
                                   and KolVo             == MBPin.KolDoc       (noIndex)
                                   and OstSumma + Iznos  == MBPin.Summa        (noIndex)
                                   and 1                 == MBPin.InEkspl      (noIndex)
                                   and DateVvod          == MBPin.DateEksp     (noIndex)
                                   and 0                 == MBPin.cPers        (noIndex)
                                   )) != tsOK )
                                 Exit;
       } else {
          if (GetFirst MBPin where ((  1                 == MBPin.Status
                                   and KatPodr.nRec      == MBPin.cPodr
                                   and KatMOL.nRec       == MBPin.cMOL
                                   and DateSaldo         == MBPin.dIn
                                   and KatMBP.nRec       == MBPin.cMBP         (noIndex)
                                   and KolVo             == MBPin.KolDoc       (noIndex)
                                   and OstSumma + Iznos  == MBPin.Summa        (noIndex)
                                   and 1                 == MBPin.InEkspl      (noIndex)
                                   and DateVvod          == MBPin.DateEksp     (noIndex)
                                   and PersCard.nRec     == MBPin.cPers        (noIndex)
                                   )) != tsOK )
                                 Exit;
        }
      }

      2 : {

       if (Srok = 0) {
          if (GetFirst MBPin where ((  1                 == MBPin.Status
                                   and KatPodr.nRec      == MBPin.cPodr
                                   and KatMOL.nRec       == MBPin.cMOL
                                   and DateSaldo         == MBPin.dIn
                                   and KatMBP.nRec       == MBPin.cMBP         (noIndex)
                                   and KolVo             == MBPin.KolDoc       (noIndex)
                                   and OstSumma + Iznos  == MBPin.Summa        (noIndex)
                                   and 0                 == MBPin.InEkspl      (noIndex)
                                   and date(0, 0, 0)     == MBPin.DateEksp     (noIndex)
                                   and 0                 == MBPin.cPers        (noIndex)
                                   )) != tsOK )
                                 Exit;
       }  else {

       if (OldTabN = '')  {                               // Дежурная спецодежда
          if (GetFirst MBPin where ((  1                 == MBPin.Status
                                   and KatPodr.nRec      == MBPin.cPodr
                                   and KatMOL.nRec       == MBPin.cMOL
                                   and DateSaldo         == MBPin.dIn
                                   and KatMBP.nRec       == MBPin.cMBP         (noIndex)
                                   and KolVo             == MBPin.KolDoc       (noIndex)
                                   and OstSumma + Iznos  == MBPin.Summa        (noIndex)
                                   and 1                 == MBPin.InEkspl      (noIndex)
                                   and date(0, 0, 0)     == MBPin.DateEksp     (noIndex)
                                   and 0                 == MBPin.cPers        (noIndex)
                                   )) != tsOK )
                                 Exit;
       } else {
          if (GetFirst MBPin where ((  1                 == MBPin.Status
                                   and KatPodr.nRec      == MBPin.cPodr
                                   and KatMOL.nRec       == MBPin.cMOL
                                   and DateSaldo         == MBPin.dIn
                                   and KatMBP.nRec       == MBPin.cMBP         (noIndex)
                                   and KolVo             == MBPin.KolDoc       (noIndex)
                                   and OstSumma + Iznos  == MBPin.Summa        (noIndex)
                                   and 1                 == MBPin.InEkspl      (noIndex)
                                   and date(0, 0, 0)     == MBPin.DateEksp     (noIndex)
                                   and PersCard.nRec     == MBPin.cPers        (noIndex)
                                   )) != tsOK )
                                 Exit;
        }


       }

      }
   end;


      Insert_KatMC;

      if (GetFirst KatMBP where (( KatMC.nRec == KatMBP.cMc )) <> tsOk) {

        ClearBuffer(#KatMBP);
        KatMBP.cMc      := KatMc.nRec   ;
        KatMBP.Name     := KatMc.Name   ;
        KatMBP.nNumber  := KatMc.BarKod ;
        KatMBP.cEd      := KatMc.cEd    ;
        KatMBP.cWriteOff:= coGetTune('Fin.MBP.DefMethSpis');

        // Группа материальных ценностей
        if (KatMBP.cMC <> 0)
          if (GetFirst GroupMC where (( KatMc.cGroupMC == GroupMC.nRec )) = tsOk) {
            KatMBP.cGroupMC  := GroupMC.nRec;
            KatMBP.KodGr     := GroupMC.Kod;
          }

        KatMBP.MBPkind := 1;
        Insert Current KatMBP;
      }


      MBPin.cMBP      := KatMBP.nRec          ;
      upDate Current MBPin;


    if ( GetFirst Oborot where (( 704        == Oborot.TiDk
                              and MBPin.nRec == Oborot.cSoprDoc
                               )) != tsOK )
                            Exit;

    case wSchet of
      0, 1 : {
          Oborot.KauOS[3] := KatMC.nRec;
      }
      2 : {
          Oborot.KauOS[2] := KatMC.nRec;
      }
   end;

          upDate current Oborot;

}


HandleEvent

cmPick: {
  case CurField of
    #_path: {
      set _path := GetFileName('*.xls;*.xlsx','Укажите файл с остатками Спецодежды для загрузки сальдо');
    }

    #GrDescr.DesGr: {
      RunInterface('GetGrDescr', '', FALSE, FALSE, cGrDescr);
    }
  end;
}


cmCancel: {
   CloseInterface(cmCancel);
}


cmOk: {
    if (_path = '' or DateSaldo = date(0,0,0) ) {
      message('Должны быть указаны все поля на экране!', Error);
      Exit;
    }

    if (DateSaldo <= dGetTune('FIN.USER.DTECBUH') ) {
      message('Загрузка остатков в закрытом периоде БухКонтура запрещена!', Error);
      Exit;
    }

    StartNewVisual(vtRotateVisual, vfTimer,'Идёт анализ данных...', 0);
    xlCreateExcelWithTemplate (_path,true);
    xlSetActiveSheet(1);

    pos_row        :=  2;

    Do {
      iNextVisual('Идёт анализ данных... ' + pos_row);

      if not FindFiled {
           pos_row := pos_row + 1;
           Continue;
      };

    Find_KatMC;

    upDate_MBPin;


      pos_row := pos_row + 1;


    } While ( Podr_Kod <> '' )

    xlKillExcel;                         // Окончание работы с Excel
    StopVisual('Закачка закончена', 0);
}

end;

end. // interface
