#ifndef _PodrFilterDef_INCLUDED_
#define _PodrFilterDef_INCLUDED_

#ifdef ComponentVersion
#component "F_UserReport"
#end
ObjInterface ObjPodrFilterDef;
//==============================
// инициализировать фильтр
//==============================
Procedure  Zar_InitFltPodr ;
//==============================
// проверить фильтр
//==============================
Function Zar_CheckFltPodr(wwc_podr :comp ) :boolean ;
// установить выбор по внешнему атрибуту "Краткое наименование"
Procedure SetShot_Name(w : boolean ) ;
// записать в протокол
Procedure SetLogFile (w :string) ;
procedure Mylog(w :string );
//============================================
// проверить наличие записи в значениях
//============================================
Function CheckAttr(wtbl :word ;wname :string;wtype :word ) :boolean ;
//============================================
// проверить наличие записи в значениях
//============================================
Function CheckAttrVal(wtbl :word ;wname :string ;wwcrec:comp ) :boolean ;
//============================================
// получить значение атрибута 
//============================================
Function GetAttr(wtbl :word ;wname :string ;wcrec:comp ) :string ;
//============================================
// установить значение атрибута 
//============================================
Procedure SetAttr(wtbl :word ;wname :string ;wwcrec:comp;wval:string );
//============================================
// устновить атрибут с типом ссылка
//============================================
Procedure SetAttrComp(wtbl :word ;wname :string ;wwcrec:comp; wtblan : word ; wval:string );
//============================================
// установить значение атрибута из DBF
//============================================
Procedure SetAttrDBF(wtbl :word ;wname :string ;wwcrec:comp;wfld:string;whandler:longint );
//============================================
// установить загрузить мемо значение атрибута из DBF
//============================================
Function SetAttrMemoFromDbf(wtbl :word ;wname :string ;wwcrec:comp;whandler:longint ;wnmfield :string ) : word;

//================================
// перенести данные из маркера в маркер
//================================
// Копирует данные из маркера fromMarker в маркер toMarker
 procedure MarkCopyMarkers(fromMarker : LongInt ; toMarker : LongInt) ;
// перенести в Pick
Procedure Mark2Pic(fromMarker : LongInt ;wListDest : word) ;
Procedure Pic2Mark(toMarker : LongInt ;wListDest : word) ;
//================================
// перенести данные из заданного маркера в маркер по имени
//================================
procedure MarkCopyMyToCat(fromMarker :longint;nmmarker :string) ;
//================================
// перенести данные в заданный маркер из маркера по имени
//================================
  procedure MarkCopyCatToMy(fromMarker :longint;nmmarker :string) ;
// получить фильтр по подразделению в кадрах(catalogs) 
public Function GetPodrFilterName(wMarker :longint ):string  ;
public Function GetPodrFilterName1(wMarker :longint;wwhist:boolean;wdate_hist:date ):string  ;
public Function GetKatPodrFilterName(wMarker :longint ):string  ;
// получить значение на уровне
Function katpodrGetLevel(wwpodr:string;wcnrec : comp; wlev :word ) :string ;
// получить значение на уровне
Function katpodrGetLevelName(wlev :word) :string ;
// получить значение на уровне nrec
Function katpodrGetLevelNrec(wlev :word) :comp ;

// инициализация свертки до уровня
Procedure katpodrGetLevelInit ;
// найти подразделение по наименованию центра ответсвенности 
function FindKatPodrByFpco(wwpodr :string ) :comp ;
//получить инициалы 
Function MyGetInitial(w :string; fpoz:boolean):string; //Первые фамилия и инициалы
//=============================
//просклонять что угодно
//=============================
Function My_Sclonenie(odecl_w :string ;odecl_NCase: word ): string ;
//=========================
// Проверить подчиненость одного центра ответсвенносит другому
//=========================
Function CheckPodchinenieFPCO(w_Fpco_main :comp; w_Fpco_slave :comp):boolean;
//=========================
// Проверить подчиненость одного подразделения другому
//=========================
Function CheckPodchineniePodr(w_podr_main :comp; w_podr_slave :comp):boolean;
end; 

VipInterface PodrFilterDef Implements ObjPodrFilterDef
#ifdef ATL51
Licensed (free)
#end
parameters
(tp_spr :word ;
 marker :longint ;
 namefilter :string 
 )
;
#end