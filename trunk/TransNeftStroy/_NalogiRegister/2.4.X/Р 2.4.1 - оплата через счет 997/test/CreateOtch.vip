#include PickBuh.vih
//============================================================================================================
//----------------------------------------------- CreateOtchet -----------------------------------------------
//============================================================================================================
Interface CreateOtchet;
var
NastrOSNrec
, nRecCO         :comp; //Фильтр по филиалам

CurIndex
, Npp
         :integer;

  DFrom
, DTo
         :date;

  Sum1
, Sum2
         :double;

  OrgName
, INN
, NameCO
  :string; //Фильтр по филиалам


i :  byte;

FullObSum : double;

 min_summa,
 summ_opl
          : double;

 itogo10,
 itogo11,
 itogo12,
 itogo13,
 itogo14,
 itogo15 : double;
#include 2.4.X_Oborot997.var

create view
 from
    KatOs                      (ReadOnly)
  , FPCO                       (ReadOnly)    // фильтр филиалы
  , Vidnorma                   (ReadOnly)
  , KAUREFF                    (ReadOnly)
  , dogovor                    (ReadOnly)
  , synonym KAUREFF VipPr      (ReadOnly)
  , synonym SpKau SpKauVidPr   (ReadOnly)
//  , NastrOs                    (ReadOnly)
  , SpKatOs                    (ReadOnly)
  , synonym KAUREFF Schet      (ReadOnly)
  , synonym SpKau SpKauShet    (ReadOnly)
  , SALDMOUN                   (ReadOnly)
  , synonym SALDMOUN SALDMOUNK (ReadOnly)
  , oborot                     (ReadOnly)
  , katPodr                    (ReadOnly)
  , ArcIznos                   (ReadOnly)
  //---------
  ,StoimStruct                 (ReadOnly)
  ,AttrNam AttrNamSch          (ReadOnly)
  ,AttrVal AttrValSch          (ReadOnly)
  ,SpKau SpKauSch              (ReadOnly)

  ,AttrNam AttrNamVid          (ReadOnly)
  ,AttrVal AttrValVid          (ReadOnly)
  ,SpKau SpKauVid              (ReadOnly)
//------
#include 2.4.X_Oborot997_From.vpp
      where
    ((
                 cgKau_FpCO == PickBuh.KodTable and
      16                   ==  KatOs.TIDK // фильтр на НМА
      and  PickBuh.PickRec ==  KatOS.cCO  (NoIndex)       // фильтр филиалы
      and  PickBuh.PickRec ==  FPCO.nRec           // фильтр филиалы

      and KatOs.CVID   /== VIDNORMA.nrec
          and (SubStr(VIDNORMA.Kod,1,4)='1102' or SubStr(VIDNORMA.Kod,1,4)='1101') //Страхование имущества, Страхование гражданской ответственности
      and '3000'       ==  KAUREFF.COTABLE //Внешнее КАУ "Договора" к каталогу ОС
      and KatOs.Nrec   ==  KAUREFF.cRec
      and '14'         ==  KAUREFF.WKAU
      and KAUREFF.CKAU ==  DOGOVOR.Nrec
      and KatOs.CPODR  ==  KatPodr.Nrec //Подразделение учета
      and '3000'       ==  VipPr.COTABLE //Внешнее КАУ виды продукции, работ, услуг
      and KatOs.Nrec   ==  VipPr.cRec
      and '20009'      ==  VipPr.WKAU
      and VipPr.CKAU   ==  SpKauVidPr.Nrec
      and NastrOSNrec  ==  SpKatOs.CNASTROS
      and KatOs.Nrec   ==  SpKatOs.CKATOS
      and '3000'       ==  Schet.COTABLE //Внешнее КАУ счет БУ для начисления амортизации
      and KatOs.Nrec   ==  Schet.cRec
      and '20077'      ==  Schet.WKAU
      and Schet.CKAU   ==  SpKauShet.Nrec

      and KatOS.nrec   ==  StoimStruct.cDoc
      and word(16)     ==  StoimStruct.wType

      and 'N997'       ==  SALDMOUN.SCHETO    //Условие на сальдо для суммы оплаты на начало периода
      and dFrom        ==  SALDMOUN.DATESAL
      and '33'         ==  SALDMOUN.SUBOSSCH
      and KatOs.Nrec   ==  SALDMOUN.KAUOS[2] (noindex)
  //    and word(1)      ==  SALDMOUN.VIOB    (noindex)

      and 'N997'       ==  SALDMOUNK.SCHETO    //Условие на сальдо для суммы оплаты на начало периода
      and dFrom        ==  SALDMOUNK.DATESAL
      and '33'         ==  SALDMOUNK.SUBOSSCH
      and KatOs.Nrec   ==  SALDMOUNK.KAUOS[2]  (noindex)
      and word(2)      ==  SALDMOUNK.VIOB      (noindex)
//------------------------------------------
      and 'N997'       ==  Oborot.SCHETO  //Условие на оборот для суммы оплаты за период
      and '33'         ==  Oborot.SUBOSSCH
      and KatOs.Nrec   ==  Oborot.KAUOS[2] (noindex)
      and dFrom        <<= Oborot.DATOB
      and dTo          >>= Oborot.DATOB
//------------------------------------------

#include 2.4.X_Oborot997_Where.vpp

      and KatOS.nrec==StoimStruct.cDoc
      and word(16)==StoimStruct.wType

      and 'СчетЗатрат'==AttrNamSch.name
      and coStoimStruct==AttrNamSch.wtable
      and AttrNamSch.nrec==AttrValSch.cattrnam
      and StoimStruct.nrec==AttrValSch.cRec(noindex)
      and coStoimStruct==attrvalSch.wtable(noindex)
      and AttrValSch.vComp==SpKauSch.nrec

//------------------------------------------
      and 'Виды продукции, работ, услуг'==AttrNamVid.name
      and coStoimStruct==AttrNamVid.wtable
      and AttrNamVid.nrec==AttrValVid.cattrnam
      and StoimStruct.nrec==AttrValVid.cRec(noindex)
      and coStoimStruct==attrvalVid.wtable(noindex)
      and AttrValVid.vComp==SpKauVid.nrec
//------------------------------------------
      and KatOS.Nrec   ==  ArcIznos.cKatOS
      and NastrOSNrec  ==  ArcIznos.cNastrOS
      and KatOS.Nrec   ==  TabStoimStruct.cTabKatOS
      ))

         and dFrom     <=  ArcIznos.DATA
         and dTo       >=  ArcIznos.DATA

        //and  dFrom>=KATOS.DATEK
        //and  (dTo<=KATOS.DATV or KATOS.DATV=date(0,0,0));
//order by KatOs.Innum;
;
parameters
  DFrom,DTo, NameCO;       // фильтр филиалы  + NameCO


function GetMonthName (NoMonth : word) : string;
{
  if (NoMonth=1) GetMonthName:='Январь';
  if (NoMonth=2) GetMonthName:='Февраль';
  if (NoMonth=3) GetMonthName:='Март';
  if (NoMonth=4) GetMonthName:='Апрель';
  if (NoMonth=5) GetMonthName:='Май';
  if (NoMonth=6) GetMonthName:='Июнь';
  if (NoMonth=7) GetMonthName:='Июль';
  if (NoMonth=8) GetMonthName:='Август';
  if (NoMonth=9) GetMonthName:='Сентябрь';
  if (NoMonth=10) GetMonthName:='Октябрь';
  if (NoMonth=11) GetMonthName:='Ноябрь';
  if (NoMonth=12) GetMonthName:='Декабрь';
}

#include 2.4.X_Oborot997.vpp

  HandleEvent
    cmInit:{

      xlCreateExcel('',true);
      xlCreateMatrix(5000,16);


      //xlSetColumnWidth(25,1,1,1,1);
      //xlSetFontStyle(1,1,1,1,1);
      //xlAlignCellsEx(3,2,1,1,1,1);
      //xlMergeCells(CurIndex,2,CurIndex,3);
      //xlSTWriteToMatrix(1,1,'Оплаченность отгрузок за период с '+dBeg+' по '+dEnd);


      xlSetColumnWidth(4,1,1,1,1);
      xlSetColumnWidth(12,1,2,1,17);
      CurIndex:=1;

      xlMergeCells(CurIndex,1,CurIndex,3);
      xlSTWriteToMatrix(CurIndex,1,DateToStr(Cur_Date,'DD.MM.YYYY') +' '+TimeToStr(Cur_Time,'HH:MM:SS'));
      CurIndex:=CurIndex+1;

      RunInterface(getOrgNP,OrgName,INN);
      xlMergeCells(CurIndex,1,CurIndex,11);
      xlAlignCellsEx(2,2,CurIndex,1,CurIndex,11);
      xlSTWriteToMatrix(CurIndex,1,'Наименование организации налогоплательщика: '+OrgName);
      CurIndex:=CurIndex+1;

      xlMergeCells(CurIndex,1,CurIndex,11);
      xlAlignCellsEx(2,2,CurIndex,1,CurIndex,11);
      xlSTWriteToMatrix(CurIndex,1,'ИНН налогоплательщика: '+INN);
      CurIndex:=CurIndex+2;

      //Фильтр филиалы   ---->>>>
      xlMergeCells(CurIndex,1,CurIndex,14);
      xlAlignCellsEx(2,2,CurIndex,1,CurIndex,14);
      xlSTWriteToMatrix(CurIndex,1,'По филиалу: '+NameCO);
      CurIndex:=CurIndex+2;
      //Фильтр филиалы   <<<----



      xlMergeCells(CurIndex,1,CurIndex,11);
      xlAlignCellsEx(2,2,CurIndex,1,CurIndex,11);
      xlSTWriteToMatrix(CurIndex,1,'Дата составления "__" ___________200_г.');
      CurIndex:=CurIndex+2;

      xlMergeCells(CurIndex,1,CurIndex,11);
      xlSetFontStyle(1,CurIndex,1,CurIndex,1);
      xlAlignCellsEx(2,2,CurIndex,1,CurIndex,11);
      xlSetFontSize(12,1,1,2,1);
      xlSTWriteToMatrix(CurIndex,1,'Регистр №Р 2.4.1. Расчет суммы расходов на страхование имущества');
      CurIndex:=CurIndex+1;

      xlMergeCells(CurIndex,1,CurIndex,11);
      xlSetFontStyle(1,CurIndex,1,CurIndex,1);
      xlAlignCellsEx(2,2,CurIndex,1,CurIndex,11);
      xlSetFontSize(12,1,1,1,1);
      xlSTWriteToMatrix(CurIndex,1,'гражданской ответственности за период с '+dateToStr(dFrom,'DD.MM.YYYY')+' по '+dateToStr(dTo,'DD.MM.YYYY'));
      CurIndex:=CurIndex+1;

      xlAlignCellsEx(3,2,CurIndex,1,CurIndex,17);
      xlSetFontStyle(1,CurIndex,1,CurIndex,11);
      xlSTWriteToMatrix(CurIndex,1,'№ п/п');
      xlSTWriteToMatrix(CurIndex,2,'Номер объекта');
      xlSTWriteToMatrix(CurIndex,3,'Наименование объекта по справочнику "Объекты расходов будущих периодов"');
      xlSTWriteToMatrix(CurIndex,4,'Номер договора');
      xlSTWriteToMatrix(CurIndex,5,'Дата договора');
      xlSTWriteToMatrix(CurIndex,6,'Дата вступления в силу договора');
      xlSTWriteToMatrix(CurIndex,7,'Дата окончания срока действия договора страхования');
      xlSTWriteToMatrix(CurIndex,8,'Месяц отчетного (налогового) периода');
      xlSTWriteToMatrix(CurIndex,9,'Дебет счета НУ для признания расходов');
      xlSTWriteToMatrix(CurIndex,10,'КАУ "Виды продукции, работ, услуг", "Подразделения"');
     // xlSTWriteToMatrix(CurIndex,11,'Процент распределения');
      xlSTWriteToMatrix(CurIndex,11,'Сумма оплаты нарастающим итогом на начало периода');
      xlSTWriteToMatrix(CurIndex,12,'Начисление части страховой премии нарастающим итогом на начало периода');
      xlSTWriteToMatrix(CurIndex,13,'Сумма оплаты за период');
      xlSTWriteToMatrix(CurIndex,14,'Начисление части страховой премии за период');
      xlSTWriteToMatrix(CurIndex,15,'Минимальная сумма из оплаченной нарастающим итогом и начисленной нарастающим итогом на конец периода');
      xlSTWriteToMatrix(CurIndex,16,'Сумма оплаченного расхода за период, подлежащая признанию');
      CurIndex:=CurIndex+1;

      xlAlignCellsEx(3,2,CurIndex,1,CurIndex,11);
      xlSTWriteToMatrix(CurIndex,1,'1');
      xlSTWriteToMatrix(CurIndex,2,'2');
      xlSTWriteToMatrix(CurIndex,3,'3');
      xlSTWriteToMatrix(CurIndex,4,'4');
      xlSTWriteToMatrix(CurIndex,5,'5');
      xlSTWriteToMatrix(CurIndex,6,'6');
      xlSTWriteToMatrix(CurIndex,7,'7');
      xlSTWriteToMatrix(CurIndex,8,'8');
      xlSTWriteToMatrix(CurIndex,9,'9');
      xlSTWriteToMatrix(CurIndex,10,'10');
      xlSTWriteToMatrix(CurIndex,11,'11');
      xlSTWriteToMatrix(CurIndex,12,'12');
      xlSTWriteToMatrix(CurIndex,13,'13');
      xlSTWriteToMatrix(CurIndex,14,'14');
      xlSTWriteToMatrix(CurIndex,15,'15');
      xlSTWriteToMatrix(CurIndex,16,'16');
   //   xlSTWriteToMatrix(CurIndex,17,'17');
      CurIndex:=CurIndex+1;

      Sum1:=0;
      Sum2:=0;

      Npp:=1;

      RunInterface(GetNastrOSNrec,NastrOSNrec);

      StartNewVisual(vtRotateVisual, vfTimer+vfBreak+vfConfirm, 'Идет обработка карточек НМА',1);
      i:=0;
      _Loop PickBuh
      {
        _loop KatOS
        {
          SetVisualHeader('Обработка карточки № '+ KatOS.InNum);

          summ_opl := 0;
          min_summa :=0;
          GetSaldo997_33;
          GetSaldo997_34;
          GetOborot997_33;
          GetOborot97_01;

          if Saldo997_33 <> 0 or Oborot997_33 <> 0
          {
            if (Saldo997_33 = Saldo997_34) and Oborot997_33 = 0
              Continue;

            if (NOT NextVisual)
            {
              PutCommand(cmError);
              StopVisual('', 0);
              Exit;
            }
            i:=i+1;

          //  GetIzmStoim;
            If not(isvalidall(tnsaldmoun))
            {
              if not(isvalidall(tnOborot))
              {
                min_summa := 0;
                summ_opl  := 0;
              }
              else
              {
                if (Oborot997_33 <= Saldo997_34 + Oborot97_01 + Oborot76_04)
                  min_summa := Oborot997_33;
                else
                  min_summa := Saldo997_34 + Oborot97_01+Oborot76_04;
                summ_opl := min_summa;
              }
            }
            else
            {
              if not(isvalidall(tnOborot))
              {
                if Saldo997_33 <= Saldo997_34 + Oborot97_01+Oborot76_04 then
                  min_summa := Saldo997_33;
                else
                  min_summa := Saldo997_34 + Oborot97_01+Oborot76_04;
              }
              else
                if (Saldo997_33 + Oborot997_33)<=(Saldo997_34 + Oborot97_01+Oborot76_04) then
                  min_summa := Saldo997_33 + Oborot997_33;
                else
                  min_summa:=Saldo997_34 + Oborot97_01+Oborot76_04;

                if Saldo997_33 <= Saldo997_34
                  summ_opl := min_summa - Saldo997_33;
                else
                  summ_opl := min_summa - Saldo997_34;
             }

            delete all from TabStoimStruct;

            //GetOborot997;
            FillTabStoim;
           //  if isvalidall(tnSaldmoun)
           //    itogo10:= SALDMOUN.SUMS+itogo10;
           //  itogo11:= ArcIznos.SumIZN+itogo11;
             itogo10 := Saldo997_33+itogo10;
             itogo11 := Saldo997_34+itogo11;
             if isvalidall(tnOborot)
               itogo12:= Oborot997_33 + itogo12;

             itogo13:= itogo13+ Oborot97_01+Oborot76_04;
             itogo14:= min_summa+itogo14;
             itogo15:= summ_opl+itogo15;
            xlAlignCellsEx(3,2,CurIndex,1,CurIndex,1);

            xlSetNumberFormat ( '@', CurIndex, 11, CurIndex, 16);
            xlSetNumberFormat ( '@', CurIndex, 2, CurIndex, 2 );
            xlSTWriteToMatrix(CurIndex,1,i);
            xlSTWriteToMatrix(CurIndex,2,KatOs.InNum);
            xlSTWriteToMatrix(CurIndex,3,KatOs.NameOs);
            xlSetNumberFormat ( '@', CurIndex, 4, CurIndex, 7 );
            if (isValid(#Dogovor))
               {
               xlSTWriteToMatrix(CurIndex,4,DOGOVOR.NODOC);
               xlSTWriteToMatrix(CurIndex,5,DateToStr(Dogovor.DDoc,'DD.MM.YYYY'));
               xlSTWriteToMatrix(CurIndex,6,DateToStr(DOGOVOR.DBEG,'DD.MM.YYYY'));
               xlSTWriteToMatrix(CurIndex,7,DateToStr(DOGOVOR.DEND,'DD.MM.YYYY'));
               }
            if DateToStr(dfrom,'MM YYYY') = DateToStr(dTo ,'MM YYYY')
              xlSTWriteToMatrix(CurIndex,8,DateToStr(dTo ,'MM YYYY'));
            else
              xlSTWriteToMatrix(CurIndex,8,DateToStr(dfrom ,'MM YYYY')+' -     '+ DateToStr(dTo ,'MM YYYY'));
           // if GetFirst TabStoimStruct <> tsOk
           // {
           //   if (isValid(#SpKauShet))
           //     xlSTWriteToMatrix(CurIndex,9,GetNalogShet(SubStr(SpKauShet.Name,1,2), SubStr(SpKauShet.Name,3,2)));
           //   if(isvalid(#SpKauVidPr))
           //     xlSTWriteToMatrix(CurIndex,10,SpKauVidPr.NAME);//+' / '+KatPodr.NAME);
           //   else xlSTWriteToMatrix(CurIndex,10,KatPodr.NAME);
      //-----------------------

            xlSetNumberFormat ( '# ##0,00', CurIndex, 11, CurIndex, 17 );
            //if (isValid(#SALDMOUN))
            xlSTWriteToMatrix(CurIndex,11,Saldo997_33);
            xlSTWriteToMatrix(CurIndex,12,Saldo997_34);
            if (isValid(#oborot))
              xlSTWriteToMatrix(CurIndex,13,Oborot997_33);
           // xlSTWriteToMatrix(CurIndex,15,ARCIZNOS.SIZNM+sumMove);
            xlSTWriteToMatrix(CurIndex,14,Oborot97_01+Oborot76_04);
            xlSTWriteToMatrix(CurIndex,15,min_summa);
            xlSTWriteToMatrix(CurIndex,16,summ_opl);
          //  if GetFirst TabStoimStruct <> tsOk
           // xlSTWriteToMatrix(CurIndex,11,100);
            CurIndex:=CurIndex+1;

        //    _loop TabStoimStruct
        //    {
        //      if TabStoimStruct.SumNachVh <> 0 or TabStoimStruct.Percent <> 0
        //      {
        //        xlAlignCellsEx(2,2,CurIndex,1,CurIndex,11);
        //        xlAlignCellsEx(4,2,CurIndex,7,CurIndex,7);
        //        xlAlignCellsEx(4,2,CurIndex,11,CurIndex,11);
        //
        //        xlSTWriteToMatrix(CurIndex,9,TabStoimStruct.Schet);
        //        if(TabStoimStruct.Vid <>'')
        //          xlSTWriteToMatrix(CurIndex,10,TabStoimStruct.Vid);//+' / '+TabStoimStruct.Podrazd);
        //    //    else
        //    //      xlSTWriteToMatrix(CurIndex,10,TabStoimStruct.Podrazd);
        //        if TabStoimStruct.Percent <> 0
        //          xlSTWriteToMatrix(CurIndex,11,TabStoimStruct.Percent);
        //        xlSetNumberFormat ( '# ##0,00', CurIndex, 10, CurIndex, 17 );
        //      // if TabStoimStruct.SumOplVh <> 0
        //      //    xlSTWriteToMatrix(CurIndex,12,OsSumOplVh*TabStoimStruct.SumNachVh/OsSumNachVh);
        //      //  if TabStoimStruct.SumNachVh <> 0
        //      //   xlSTWriteToMatrix(CurIndex,13,TabStoimStruct.SumNachVh);
        //        if TabStoimStruct.Percent <> 0
        //        {
        //     //     xlSTWriteToMatrix(CurIndex,14,FullObSum*TabStoimStruct.Percent/double(100));
        //          xlSTWriteToMatrix(CurIndex,15,Oborot97_01*TabStoimStruct.Percent/double(100));
        //     //     xlSTWriteToMatrix(CurIndex,16,min_summa*TabStoimStruct.Percent/double(100));
        //          xlSTWriteToMatrix(CurIndex,17,summ_opl*TabStoimStruct.Percent/double(100));
        //        }
        //    //  Sum2:=Sum2+summ_opl*TabStoimStruct.Percent/double(100);
        //        CurIndex:=CurIndex+1;
        //      }
          }
        }
      }


        xlSetFontStyle(1,CurIndex,1,CurIndex,16);
        xlMergeCells(CurIndex,1,CurIndex,2);
        xlSTWriteToMatrix(CurIndex,1,'ВСЕГО:');
        xlSetNumberFormat ( '# ##0,00', CurIndex, 11, CurIndex, 16 );
        xlSTWriteToMatrix(CurIndex,11,itogo10);
        xlSTWriteToMatrix(CurIndex,12,itogo11);
        xlSTWriteToMatrix(CurIndex,13,itogo12);
        xlSTWriteToMatrix(CurIndex,14,itogo13);
        xlSTWriteToMatrix(CurIndex,15,itogo14);
        xlSTWriteToMatrix(CurIndex,16,itogo15);

        xlWrapText(3,1,CurIndex,16);
        xlFrameCells(1 or 2 or 4 or 8 or 16 or 32,2,0,0,8,1,CurIndex,16);

        CurIndex:=CurIndex+2;
        xlMergeCells(CurIndex,1,CurIndex,16);
        xlAlignCellsEx(2,2,CurIndex,1,CurIndex,16);
        xlSTWriteToMatrix(CurIndex,1,'Составил_________________________/_______________________');

        xlMergeCells(CurIndex,1,CurIndex,16);
        xlAlignCellsEx(2,2,CurIndex,1,CurIndex,15);
        CurIndex:=CurIndex+1;
        xlSTWriteToMatrix(CurIndex,1,'                     (должность,подпись)              Фамилия, И.О.  ');
        CurIndex:=CurIndex+1;

        xlWriteMatrixToExcel(1,1);
        xlFreeMatrix;
        xlKillExcel;

        abort;
        StopVisual('', 0);
  }
  end;
end.
