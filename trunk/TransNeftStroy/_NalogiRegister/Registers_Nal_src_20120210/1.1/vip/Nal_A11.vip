VipInterface UserRep_NalA_11   Licensed(Free);
#include NalFunc.vih
// ==============================  Получение имени организации-налогоплательщика и ее ИНН =======================================
Interface UserRep_NalA_11 'Затраты по приобретению (строительству) основных средств либо увеличению стоимости';
create view
var
  dFrom
 ,dTo: date;
  iNalFunc: NalFunc;
//var
//  OrgName, INN:string;
as select
  katos.nrec
 ,katos.innum
 ,katos.nameos
 ,klassos.kod
from
  katos
 ,spkatos
 ,klassos
 ,nastros
 ,oborot
 ,spKau
 ,pickBuh
where
((
  katos.nrec == spkatos.ckatos
  and spkatos.cgram == klassos.nrec
  and spkatos.cnastros==nastros.nrec
))
and nastros.name='Бухгалтерский учет'
;
// ==============================   Сумма по графе 5(A1.1) =======================================
Function GetSum1(dFrom, dTo: date; KatOSNrec: comp;  var SchetK: string): double;
{
  Result := 0;
  SchetK := '';
  _loop oborot where(('T08' == oborot.schetk
                   and dTo >>= oborot.datob
                   and dFrom <<= oborot.datob  ))
                   and oborot.tblos[5]=15
                   and oborot.kauos[5]=KatOSNrec
                   and (oborot.scheto='T01'  or oborot.scheto='T03')
                   and (oborot.subschk='20' or oborot.subschk='99')

                   // ))
  {
//    if not iNalFunc.CheckOborotCo(Oborot.KodSpo)
//      continue;
    Result += Oborot.SumOb;
		if (oborot.subschk='20' and SchetK = '  08.99  ')
      SchetK := '08.20, 08.99'
    else
		{
      if (oborot.subschk = '20')
        SchetK := '  08.20  ';
		  if (oborot.subschk = '99' and SchetK = '  08.20  ')
        SchetK := '08.20, 08.99'
      else
			  if (oborot.subschk='99')
          SchetK := '  08.99  ';
	  }
  }

}
!--------------------------------------------------------------------------------------------------------------
!A1.1  Сумма по графе 6 (Summ21) - по обороту 01-08.10,20=======================================
!!!!!Переделать все функции ниже на вложенный селект sum или DirectSQl одним запросом вытянет
!--------------------------------------------------------------------------------------------------------------
function GetSum21(dFrom, dTo: date; KatOSNrec: tNrec): double ;
{
  Result := 0;
  _loop Oborot where ((15 == oborot.tblos[5] and KatOSNrec/==oborot.kauos[5] and oborot.kauks[3]/==spkau.nrec))
                  //фильтры
                  and (oborot.scheto='T01' or oborot.scheto='T03')
                  and oborot.schetk='T08' and (oborot.subschk='20')
                  and (spkau.code='002008' or spkau.code='002009')
                  and  oborot.datob <= dTo and oborot.datob >= dFrom
  {
//    if not iNalFunc.CheckOborotCo(Oborot.KodSpo)
//      continue;

    Result += Oborot.SumOb;
  }

}

// ==============================   Сумма по графе 6 - обороты 01-08.99=======================================
function GetSum01(dFrom,dTo: date; KatOSNrec: comp; var KatStroyNrec: comp): double;
{
  Result := 0;
  _loop Oborot where ((15 == oborot.tblos[5] and KatOSNrec/==oborot.kauos[5]))
                   and oborot.scheto='T01'
                   and oborot.schetk='T08'
                   and oborot.subschk='99'
                   and oborot.datob<=dTo and oborot.datob>=dFrom
  {
//    if not iNalFunc.CheckOborotCo(Oborot.KodSpo)
//      continue;

    Result += Oborot.SumOb;
	  KatStroyNrec := oborot.kauks[1];
  }
}


// ==============================  Для получения суммы 08.99 - 08.30,50 ( с аналитикой) по конкретному Капвложению =======================================
function GetSum0899(dTo: date; KatStroyNrec: tNrec): double ;
{
  Result := 0;
  _loop oborot where ((40 == oborot.tblos[1] and KatStroyNrec/==Oborot.Kauos[1] and oborot.kauks[3]==spkau.nrec ))
        	  and (oborot.tblks[1]=40 ) and (oborot.kauks[1]=KatStroyNrec)
            and oborot.scheto='T08' and oborot.subossch='99'
            and oborot.schetk='T08' and   (oborot.subschk='30' or  oborot.subschk='50')
            and spkau.code='005012'
            and oborot.datob <= dTo
  {
//    if not iNalFunc.CheckOborotCo(Oborot.KodSpo)
//      continue;

    Result += Oborot.SumOb;
  }
}
// ==============================  Для получения суммы 08.99 - 08.30,50 (весь) по конкретному Капвложению =======================================
function GetSum0899all(dTo: date; KatStroyNrec: tNrec): double ;
{
  Result := 0;

 _loop oborot where ((40 == oborot.tblos[1] and KatStroyNrec/==Oborot.Kauos[1]   ))
        	  and (oborot.tblks[1]=40 ) and (oborot.kauks[1]=KatStroyNrec)
            and oborot.scheto='T08' and oborot.subossch='99'
            and oborot.schetk='T08' and   (oborot.subschk='30' or  oborot.subschk='50')
            and spkau.code='005012'
            and oborot.datob <= dTo
  {
//    if not iNalFunc.CheckOborotCo(Oborot.KodSpo)
//      continue;

    Result += Oborot.SumOb;
  }
}

// ==============================   Сумма по графе 7 =======================================
function GetSum3(dFrom, dTo: date; KatOSNrec: tNrec): double ;
{
  Result := 0;
  _loop Oborot where ((15 == oborot.tblos[5] and KatOSNrec/==oborot.kauos[5] and oborot.kauks[3]/==spkau.nrec))
                  and (oborot.scheto = 'T01' or oborot.scheto = 'T03')
                  and  oborot.schetk = 'T08' and (oborot.subschk = '20')
                  and (spkau.code = '002010003002' or spkau.code = '002010003004')
                  and  oborot.datob<=dTo and oborot.datob>=dFrom
  {
//    if not iNalFunc.CheckOborotCo(Oborot.KodSpo)
//      continue;

    Result += Oborot.SumOb;
  }
}
// ==============================   Сумма по графе 8 =======================================
function GetSum4(dFrom, dTo: date; KatOSNrec: tNrec): double ;
{
  Result := 0;
  _loop Oborot where ((15 == oborot.tblos[5] and KatOSNrec/==oborot.kauos[5] and oborot.kauks[3]/==spkau.nrec))
                  and (oborot.scheto = 'T01' or oborot.scheto = 'T03')
                  and  oborot.schetk = 'T08' and (oborot.subschk = '20')
                  and (spkau.code='002010008002' or spkau.code='003002')
                  and  oborot.datob<=dTo and oborot.datob>=dFrom
  {
//    if not iNalFunc.CheckOborotCo(Oborot.KodSpo)
//      continue;

    Result += Oborot.SumOb;
  }
}

// ==============================   Налоговая стоимость ОС =======================================
function GetNStoim(dFrom, dTo: date; KatOSNrec: tNrec): double ;
{
  Result := 0;
  _loop Oborot where ((15 == oborot.tblos[5] and KatOSNrec /== oborot.kauos[5] ))
                   and oborot.scheto = 'N901'
                   and oborot.schetk = 'N900'
                   and oborot.datob >= dFrom and oborot.datob <= dTo

  {
//    if not iNalFunc.CheckOborotCo(Oborot.KodSpo)
//      continue;

		Result += oborot.sumob;
  }
}

procedure PrintReport;
var
  CurIndex
 ,NPP, i: word;
  Sum :double;
  numCol: word;
  OrgName, OrgInn: string;
  SchetK: string;
  KatStroyNrec: tNrec;
  Summ1, Summ21
 ,XX, Summ01
 ,Summ0899all, Summ0899
 ,Summ3, Summ4
 ,Summ22, Summ2
 ,Summ8a, gr9new, gr9
 ,itogo4, itogo5
 ,itogo6, itogo7
 ,itogo8a, itogoNalStoim
 ,itogo9, itogo9new : double;
{
  numCol := 13;

  iNalFunc.GetOrgInfo(OrgName, OrgInn);
  xlCreateExcel('report.xls',true);
  xlCreateMatrix(5000, numCol);

 // xlSetColumnWidth(4,1,1,1,1);
 // xlSetColumnWidth(20,1,2,1,2);
 // xlSetColumnWidth(25,1,3,1,3);
 // xlSetColumnWidth(10,1,4,1,8);

  CurIndex:=1;

  xlAlignCellsEx(3,2,CurIndex,1,CurIndex,numCol);
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  xlSTWriteToMatrix(CurIndex,1,'А 1.1');
  CurIndex ++;
  xlSetFontStyle(1,CurIndex,1,CurIndex + 3,numCol);
  xlSetFontSize(8, CurIndex, 1, CurIndex + 3, 1);
  xlSTWriteToMatrix(CurIndex,1,'Наименование организации-налогоплательщика: '+ OrgName);
  CurIndex ++;
  xlSTWriteToMatrix(CurIndex, 1,'ИНН налогоплательщика: ' + OrgInn);
  CurIndex ++;
  xlSTWriteToMatrix(CurIndex,1,'Дата составления: ' + dateToStr(Cur_Date,'DD Mon YYYY г.'));
  CurIndex ++;


  xlMergeCells(CurIndex, 1, CurIndex, numCol);
  xlSetFontStyle(1, CurIndex, 1, CurIndex + 4, numCol);
  xlAlignCellsEx(3, 2, CurIndex, 1, CurIndex + 4, numCol);
  xlSetFontSize(12, CurIndex, 1, CurIndex + 3, 1);
  xlSTWriteToMatrix(CurIndex,1,'Регистр №А 1.1  "Затраты по приобретению (строительству) основных средств либо увеличению стоимости"');
  CurIndex += 2;

  xlMergeCells(CurIndex,1,CurIndex, numCol);
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  //xlAlignCellsEx(2,2,CurIndex,1,CurIndex, numCol);
  //xlSetFontSize(12,1,1,1,1);
  xlSTWriteToMatrix(CurIndex, 1, 'за период с '+dateToStr(dFrom,'DD/MM/YYYY')+' по '+dateToStr(dTo,'DD/MM/YYYY'));
  CurIndex ++;
  xlMergeCells(CurIndex,1,CurIndex, numCol);
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  xlSTWriteToMatrix(CurIndex, 1, 'отчетный (налоговый) период');
  CurIndex ++;

  xlAlignCellsEx(3,2,CurIndex,1,CurIndex,numCol);
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  xlSTWriteToMatrix(CurIndex,1,'№ п/п');
  xlSTWriteToMatrix(CurIndex,2,'Инвентарный номер');
  xlSTWriteToMatrix(CurIndex,3,'Код амортизационной группы');
  xlSTWriteToMatrix(CurIndex,4,'Наименование объекта');
  xlSTWriteToMatrix(CurIndex,5,'Кредит счета бухгалтерского учета');
  xlSTWriteToMatrix(CurIndex,6,'Сумма затрат (бухучет), руб.');
  xlSTWriteToMatrix(CurIndex,7,'в т.ч. проценты по кредитам и займам');
  xlSTWriteToMatrix(CurIndex,8,'сверхнормативные командировочные расходы');
  xlSTWriteToMatrix(CurIndex,9,'иные неучитываемые расходы');
  xlSTWriteToMatrix(CurIndex,10,'Расходы, не включаемые в перв. стоимость ОС для целей НУ, но не учтенные при формировании гр. 6,7,8 я');
  xlSTWriteToMatrix(CurIndex,11,'Первоначальная стоимость (увеличение первоначальной стоимости) для целей налогообложения');
  xlSTWriteToMatrix(CurIndex,12,'Аморт. льгота (1-2, 8-10 гр.) 10%(справочно)');
  xlSTWriteToMatrix(CurIndex,13,'Аморт. льгота (3-7 гр.) 30% (справочно)');
  CurIndex++;

  xlAlignCellsEx(3,2,CurIndex,1,CurIndex,numCol);
   for(i := 0; i <= numCol; i++)
    xlSTWriteToMatrix(CurIndex, i, string(i));

  CurIndex++;

  Npp:=1;
  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm, 'Формирование отчета', 0);
  _loop PickBuh where ((cgKau_FpCO == PickBuh.KodTable ))
  {
    _loop KatOS  where((15 == katos.tidk and PickBuh.PickRec == katos.cCo(NoIndex)))ordered by katos.isLeaf, katos.innum
    {
      if not NextVisual
        break;
      if not iNalFunc.CheckCO(KatOs.cCO)
        continue;

      Summ1 := GetSum1(dFrom, dTo, KatOS.Nrec, SchetK);
      if (SumNdeEq(Summ1, 0))
        continue;

      Summ21 := GetSum21(dFrom, dTo, KatOS.Nrec);
      XX := GetNStoim(dFrom, dTo, KatOS.Nrec);
      Summ01 := GetSum01(dFrom, dTo, KatOS.Nrec, KatStroyNrec);
      Summ0899all := GetSum0899all(dTo, KatStroyNrec);
      Summ0899 := GetSum0899(dTo, KatStroyNrec);
      Summ3 := GetSum3(dFrom, dTo, KatOS.Nrec);
      Summ4 := GetSum4(dFrom, dTo, KatOS.Nrec);
      if (Summ0899all > 0)
        Summ22:= round(Summ01 * Summ0899 / Summ0899all,  2);

      Summ2  := Summ21 + Summ22;
      Summ8a := Summ1 - Summ2 - Summ3 - Summ4 - XX;
      gr9new := 0;
      gr9 := 0;
      if (klassos.kod='03' or klassos.kod='04' or klassos.kod='05' or klassos.kod='06' or klassos.kod='07')
        gr9new:=XX*0.3;
      else
        gr9:=XX*0.1;


      xlAlignCellsEx(3,2,CurIndex,1,CurIndex,1);
      xlSTWriteToMatrix(CurIndex,1,Npp);
      xlSTWriteToMatrix(CurIndex, 2, katos.innum);

      if GetFirst klassos = tsOk
        xlSTWriteToMatrix(CurIndex, 3, klassos.kod);

      xlSTWriteToMatrix(CurIndex, 4, katos.nameos);
      xlSTWriteToMatrix(CurIndex, 5, SchetK);
      iNalFunc.WriteSum(CurIndex, 6, Summ1);//DoubleToStr(Summ1, '[|-]366 666 666 666,88'));
      iNalFunc.WriteSum(CurIndex, 7, Summ2);//DoubleToStr(Summ2, '[|-]366 666 666 666,88'));
      iNalFunc.WriteSum(CurIndex, 8, Summ3);// DoubleToStr(Summ3, '[|-]366 666 666 666,88'));
      iNalFunc.WriteSum(CurIndex, 9, Summ4);// DoubleToStr(Summ4, '[|-]366 666 666 666,88'));
      iNalFunc.WriteSum(CurIndex, 10, Summ8a);// DoubleToStr(Summ8a, '[|-]366 666 666 666,88'));
      iNalFunc.WriteSum(CurIndex, 11, XX);// DoubleToStr(XX, '[|-]366 666 666 666,88'));
      iNalFunc.WriteSum(CurIndex, 12,  gr9);//DoubleToStr(gr9, '[|-]366 666 666 666,88'));
      iNalFunc.WriteSum(CurIndex, 13,  gr9new);//DoubleToStr(gr9new, '[|-]366 666 666 666,88'));

      itogo4 += Summ1;
      itogo5 += Summ2;
      itogo6 += Summ3;
      itogo7 += Summ4;
      itogo8a += Summ8a;
      itogoNalStoim += XX;
      itogo9 += gr9;
      itogo9new += gr9new;


      Npp++;
      CurIndex++;
    }
  }
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  xlMergeCells(CurIndex,1,CurIndex,2);
  xlSTWriteToMatrix(CurIndex,1,'ИТОГО:');
  iNalFunc.WriteSum(CurIndex, 6, itogo4);//DoubleToStr(itogo4, '[|-]366 666 666 666,88'));
  iNalFunc.WriteSum(CurIndex, 7, itogo5);//DoubleToStr(itogo5, '[|-]366 666 666 666,88'));
  iNalFunc.WriteSum(CurIndex, 8, itogo6);//DoubleToStr(itogo6, '[|-]366 666 666 666,88'));
  iNalFunc.WriteSum(CurIndex, 9, itogo7);//DoubleToStr(itogo7, '[|-]366 666 666 666,88'));
  iNalFunc.WriteSum(CurIndex, 10, itogo8a);//DoubleToStr(itogo8a, '[|-]366 666 666 666,88'));
  iNalFunc.WriteSum(CurIndex, 11, itogoNalStoim);//DoubleToStr(itogoNalStoim, '[|-]366 666 666 666,88'));
  iNalFunc.WriteSum(CurIndex, 12, itogo9);//DoubleToStr(itogo9, '[|-]366 666 666 666,88'));
  iNalFunc.WriteSum(CurIndex, 13, itogo9new);//DoubleToStr(itogo9new, '[|-]366 666 666 666,88'));

  xlWrapText(9,1,CurIndex,numCol);
  xlFrameCells(1 or 2 or 4 or 8 or 16 or 32, 3,0,0,9,1,CurIndex,numCol);
  CurIndex:=CurIndex+2;
  xlMergeCells(CurIndex,1,CurIndex,numCol);
  xlAlignCellsEx(2,2,CurIndex,1,CurIndex,numCol);
  xlSTWriteToMatrix(CurIndex,1,'Составил_________________________/_______________________');

  xlMergeCells(CurIndex,1,CurIndex,numCol);
  xlAlignCellsEx(2,2,CurIndex,1,CurIndex,numCol);
  CurIndex:=CurIndex+1;
  xlSTWriteToMatrix(CurIndex,1,'                     (должность,подпись)              Фамилия, И.О.  ');
  CurIndex:=CurIndex+1;

  xlWriteMatrixToExcel(1,1);
  xlFreeMatrix;
  xlKillExcel;
  StopVisual('',0);

}
procedure Run;
{
//  MtClear(#TabVeksl, mfNormal);
//  FillTable;
  PrintReport;
}
HandleEvent
cmInit:
{
  if iNalFunc.RunTune(dFrom, dTo)
    Run;
}
end;



end.


















!-------------------------------------------------------------------------------
// подключение в меню отчетов
!-------------------------------------------------------------------------------

#include UserReport.vih

VipInterface UserReport_NalA_11 Implements IUserReport Licensed(Free);

Interface UserReport_NalA_11  ;
Create View;

//-------------------------------------------------------------------------------
// Запуск отчета на выполнение при выборе его из списка отчетов
procedure Run;
//var
//  RepParams: TVipReportParams;
begin
  RunInterface('UserRep_NalA_11');//, RepParams);;
end;

//-------------------------------------------------------------------------------
// Наименование отчета в списке
function GetReportName: String;
begin
  GetReportName := 'А 1.1 Затраты по приобретению (строительству) основных средств либо увеличению стоимости';
end;

!-------------------------------------------------------------------------------
// Наименования групп, в которые входит отчет
// Группа n+1 делается подчиненной группе n
// В данном случае будет иерархия:
// [+] Группа 1
//     [+] Группа 2
//         Отчет 1
function GetGroupName (Level : Word) : String;
begin
  GetGroupName := '';
  case Level of
    1 : GetGroupName := 'Налоговые регистры';
    2 : GetGroupName := 'A';
  end;
end;

!-------------------------------------------------------------------------------
// Приоритет отчета - сортировка внутри группы выполняется сначала
// по приоритету, а затем по наименованию
function GetPriority : Integer;
begin
  GetPriority := 0;
end;

!-------------------------------------------------------------------------------
// ModuleID модулей, в которых будет виден отчет
// '*' - отчет будет виден в любом модуле
function VisibleInModule(Ind : Byte) : String;
begin
  VisibleInModule := '';
  case Ind of
    1 : VisibleInModule := '*';
  end;
end;

end. // interface
