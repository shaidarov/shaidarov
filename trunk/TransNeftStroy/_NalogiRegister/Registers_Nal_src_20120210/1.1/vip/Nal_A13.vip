#include NalFunc.vih
// ==============================  Получение имени организации-налогоплательщика и ее ИНН =======================================
Interface UserRep_NalA_13 'Определение первоначальной стоимости основных средств';
create view
var
  dFrom
 ,dTo: date;
  iNalFunc: NalFunc;
//var
//  OrgName, INN:string;
as select
  katos.nrec
 ,katos.innum
 ,katos.nameos

from
  katos,
  spmove,
  oborot,
  spkau,
  kaureff


;
Function GetSum4(KatOSNrec: comp; dFrom, dTo: date): double;
{
  Result := 0;
  _loop oborot where ((15==oborot.tblos[5]
                   and KatOSNrec/==oborot.kauos[5]
                   and oborot.csoprdoc == spmove.nrec  ))  //так индекс будет!!!
                  and  spmove.sysoper = 1
                  and  oborot.tidk = 15
                  and  oborot.scheto='T01'
                  and  oborot.schetk='T08'
                  and  oborot.datob<=dTo and oborot.datob>=dFrom
  {
    Result += Oborot.SumOb;
  }
}
Function GetSum5(KatOSNrec: comp; dFrom, dTo: date): double;
{
  Result := 0;
  _loop oborot where ((15==oborot.tblos[5] and KatOSNrec/==oborot.kauos[5]
                  and oborot.csoprdoc == spmove.nrec    )) //так индекс будет!!!
                  and  spmove.sysoper = 1
                  and  oborot.tidk = 15
                  and  oborot.scheto='N901'
                  and  oborot.schetk='N900'
                  and  oborot.datob<=dTo and oborot.datob>=dFrom
  {
    Result += Oborot.SumOb;
  }
}
procedure PrintReport;
var
  CurIndex
 ,NPP, i: word;
  Sum :double;
  numCol: word;
  OrgName, OrgInn: string;
  SchetK: string;
  KatStroyNrec: tNrec;
  Summ1, Summ21
 ,XX, Summ01
 ,Summ0899all, Summ0899
 ,Summ3, Summ4, Summ5
 ,Summ22, Summ2
 ,Summ8a, gr9new, gr9
 ,itogo4, itogo5
 ,itogo6, itogo7
 ,itogo8a, itogoNalStoim
 ,itogo9, itogo9new : double;
{
  numCol := 6;

  iNalFunc.GetOrgInfo(OrgName, OrgInn);
  xlCreateExcel('report.xls',true);
  xlCreateMatrix(5000, numCol);

  xlSetColumnWidth(4,1,1,1,1);
  xlSetColumnWidth(15,1,2,1,2);
  xlSetColumnWidth(35,1,3,1,3);
  xlSetColumnWidth(20,1,4,1,6);

  CurIndex:=1;

  xlAlignCellsEx(3,2,CurIndex,1,CurIndex,numCol);
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  xlSTWriteToMatrix(CurIndex,1,'А 1.3');
  CurIndex ++;
  xlSetFontStyle(1,CurIndex,1,CurIndex + 3,numCol);
  xlSetFontSize(8, CurIndex, 1, CurIndex + 3, 1);
  xlSTWriteToMatrix(CurIndex,1,'Наименование организации-налогоплательщика: '+ OrgName);
  CurIndex ++;
  xlSTWriteToMatrix(CurIndex, 1,'ИНН налогоплательщика: ' + OrgInn);
  CurIndex ++;
  xlSTWriteToMatrix(CurIndex,1,'Дата составления: ' +  dateToStr(Cur_Date,'DD Mon YYYY г.'));
  CurIndex ++;


  xlMergeCells(CurIndex, 1, CurIndex, numCol);
  xlSetFontStyle(1, CurIndex, 1, CurIndex + 5, numCol);
  xlAlignCellsEx(3, 2, CurIndex, 1, CurIndex + 5, numCol);
  xlSetFontSize(12, CurIndex, 1, CurIndex + 4, 1);
  xlSTWriteToMatrix(CurIndex,1,'Регистр №А 1.3  "Определение первоначальной стоимости основных средств при их получении ');
  CurIndex ++;
  xlMergeCells(CurIndex, 1, CurIndex, numCol);
  xlSTWriteToMatrix(CurIndex,1,'в качестве взноса в уставный капитал либо безвозмездно');
  CurIndex += 2;

  xlMergeCells(CurIndex,1,CurIndex, numCol);
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  //xlAlignCellsEx(2,2,CurIndex,1,CurIndex, numCol);
  //xlSetFontSize(12,1,1,1,1);
  xlSTWriteToMatrix(CurIndex, 1, 'за период с '+dateToStr(dFrom,'DD/MM/YYYY')+' по '+dateToStr(dTo,'DD/MM/YYYY'));
  CurIndex ++;
  xlMergeCells(CurIndex,1,CurIndex, numCol);
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  xlSTWriteToMatrix(CurIndex, 1, 'отчетный (налоговый) период');
  CurIndex ++;

  xlAlignCellsEx(3,2,CurIndex,1,CurIndex,numCol);
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  xlSTWriteToMatrix(CurIndex,1,'№ п/п');
  xlSTWriteToMatrix(CurIndex,2,'Инвентарный номер');
  xlSTWriteToMatrix(CurIndex,3,'Наименование объекта');
  xlSTWriteToMatrix(CurIndex,4,'Стоимость по данным бухгалтерского учета');
  xlSTWriteToMatrix(CurIndex,5,'Налоговая остаточная стоимость по данным передающей стороны');
  xlSTWriteToMatrix(CurIndex,6,'Разница в стоимости');
  CurIndex++;

  xlAlignCellsEx(3,2,CurIndex,1,CurIndex,numCol);
   for(i := 0; i <= numCol; i++)
    xlSTWriteToMatrix(CurIndex, i, string(i));

  CurIndex++;

  Npp:=1;
  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm, 'Формирование отчета', 0);
  _loop PickBuh where ((cgKau_FpCO == PickBuh.KodTable ))
  {
    _loop KatOS where ((15 == katos.tidk and PickBuh.PickRec == katos.cCo(NoIndex))) ordered by katos.isLeaf, katos.innum
    {
      if not ((getfirst kaureff  where ((Katos.nrec == Kaureff.cRec and '3000'==kaureff.cotable and '20067'==kaureff.WKAU)) = tsOk)
          and (getfirst spkau  where ((kaureff.ckau==spkau.nrec)) = tsOk)  and (spkau.code='003' or spkau.code='004') )
        continue;
      if not NextVisual
        break;
      if not iNalFunc.CheckCO(KatOs.cCO)
        continue;
      PushPos(#KatOS);
      Summ4 := GetSum4(KatOS.Nrec, dFrom, dTo);
      Summ5 := GetSum5(KatOS.Nrec, dFrom, dTo);
       PopPos(#KatOS);

      if (Summ4 = 0 and Summ5 = 0)
        continue;

      xlAlignCellsEx(3,2,CurIndex,1,CurIndex,1);
      xlSTWriteToMatrix(CurIndex,1, Npp);
      xlSTWriteToMatrix(CurIndex, 2, katos.innum);
      xlSTWriteToMatrix(CurIndex, 3, katos.nameos);
      iNalFunc.WriteSum(CurIndex, 4, Summ4);
      iNalFunc.WriteSum(CurIndex, 5, Summ5);
      iNalFunc.WriteSum(CurIndex, 6, Summ4-Summ5);
      itogo4 += Summ4;
      itogo5 += Summ5;
      itogo6 += Summ4-Summ5;

      Npp++;
      CurIndex++;
    }
  }
  xlSetFontStyle(1,CurIndex,1,CurIndex,numCol);
  xlMergeCells(CurIndex,1,CurIndex,2);
  xlSTWriteToMatrix(CurIndex,1,'ИТОГО:');
  iNalFunc.WriteSum(CurIndex, 4, itogo4);
  iNalFunc.WriteSum(CurIndex, 5, itogo5);
  iNalFunc.WriteSum(CurIndex, 6, itogo6);

  xlWrapText(9,1,CurIndex,numCol);
  xlFrameCells(1 or 2 or 4 or 8 or 16 or 32, 3,0,0,9,1,CurIndex,numCol);

  CurIndex:=CurIndex+2;
  xlMergeCells(CurIndex,1,CurIndex,numCol);
  xlAlignCellsEx(2,2,CurIndex,1,CurIndex,numCol);
  xlSTWriteToMatrix(CurIndex,1,'Составил_________________________/_______________________');

  xlMergeCells(CurIndex,1,CurIndex,numCol);
  xlAlignCellsEx(2,2,CurIndex,1,CurIndex,numCol);
  CurIndex:=CurIndex+1;
  xlSTWriteToMatrix(CurIndex,1,'                     (должность,подпись)              Фамилия, И.О.  ');
  CurIndex:=CurIndex+1;

  xlWriteMatrixToExcel(1,1);
  xlFreeMatrix;
  xlKillExcel;
  StopVisual('',0);

}
procedure Run;
{
//  MtClear(#TabVeksl, mfNormal);
//  FillTable;
  PrintReport;
}
HandleEvent
cmInit:
{
  if iNalFunc.RunTune(dFrom, dTo)
    Run;
}
end;



end.


















!-------------------------------------------------------------------------------
// подключение в меню отчетов
!-------------------------------------------------------------------------------

#include UserReport.vih

VipInterface UserReport_NalA_13 Implements IUserReport Licensed(Free);

Interface UserReport_NalA_13  ;
Create View;

//-------------------------------------------------------------------------------
// Запуск отчета на выполнение при выборе его из списка отчетов
procedure Run;
//var
//  RepParams: TVipReportParams;
begin
  RunInterface('UserRep_NalA_13');//, RepParams);;
end;

//-------------------------------------------------------------------------------
// Наименование отчета в списке
function GetReportName: String;
begin
  GetReportName := 'А 1.3 Определение первоначальной стоимости основных средств при их получении в качестве взноса в уставный капитал либо безвозмездно';
end;

!-------------------------------------------------------------------------------
// Наименования групп, в которые входит отчет
// Группа n+1 делается подчиненной группе n
// В данном случае будет иерархия:
// [+] Группа 1
//     [+] Группа 2
//         Отчет 1
function GetGroupName (Level : Word) : String;
begin
  GetGroupName := '';
  case Level of
    1 : GetGroupName := 'Налоговые регистры';
    2 : GetGroupName := 'A';
  end;
end;

!-------------------------------------------------------------------------------
// Приоритет отчета - сортировка внутри группы выполняется сначала
// по приоритету, а затем по наименованию
function GetPriority : Integer;
begin
  GetPriority := 0;
end;

!-------------------------------------------------------------------------------
// ModuleID модулей, в которых будет виден отчет
// '*' - отчет будет виден в любом модуле
function VisibleInModule(Ind : Byte) : String;
begin
  VisibleInModule := '';
  case Ind of
    1 : VisibleInModule := '*';
  end;
end;

end. // interface
