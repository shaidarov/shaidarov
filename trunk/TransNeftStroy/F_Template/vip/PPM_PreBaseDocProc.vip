//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 5.80 - модуль "Макросы назначения"
// Список ДО на предоплату (Macros API)
//------------------------------------------------------------------------------

#include PPMacros.vih  

VipInterface PPM_PreBaseDocProc implements ObjPPMacros #Licensed_Free;

#doc
 Список ДО (Macros API)
#end

Interface PPM_PreBaseDocProc;

Table Struct PPMPreBaseDocInfo
(
  NumDoc  : string,
  dDoc    : date,
  PrimDoc : string,
  ProcDoc : string
)
With Index
(
  PPMPreBaseDocInfo01 = dDoc + NumDoc
);

Create view
Var
  curTiDkUser : word;
  curTiDkGal  : word;
  curSoprDoc  : comp;
  PParam1,
  PParam2,
  PParam3     : word;
  PList       : word;
As select *
From
  PlPor,
  BaseDoc,
  PPMPreBaseDocInfo (PPMPreBaseDocInfo01),
  SoprHoz
Where ((
      CurSoprDoc         == PlPor.Nrec
  and CurTiDkUser        == SoprHoz.TipDoc
  and CurSoprDoc         == SoprHoz.cSoprDoc
  and SoprHoz.cPredoplDO == BaseDoc.Nrec
))
;

Function GetInfo: string;
{
  GetInfo := 'Список ДО на предоплату с возможностью указания %';
}

Window wParamPreBasedoc 'Параметры макроса PreBaseDocProc ' (, hcBankOknoParametryMakrosa, sci1EnEsc) EscClose, DoAccept;
  Show at(,, 80, 6);

Screen scParam;
Fields
  PParam1 ('Выберите формат вывода реквизитов'):
      [LIST 0 'Пусто',
            1 'Номер',
            2 'от Дата г.',
            3 'Примечание',
            4 'Дата',       
            5 'Процент '], Protect;

  PParam2 ('Выберите формат вывода реквизитов'):
      [LIST 0 'Пусто',
            1 'Номер',
            2 'от Дата г.',
            3 'Примечание',
            4 'Дата',       
            5 'Процент '       ], Protect;

  PParam3 ('Выберите формат вывода реквизитов'):
      [LIST 0 'Пусто',
            1 'Номер',
            2 'от Дата г.',
            3 'Примечание',
            4 'Дата',       
            5 'Процент '       ], Protect;

  PList ('Выберите формат списка результатов'):
      [LIST 0 'Все',
            1 'Первый',
            2 'Последний'  ], Protect;
<<

  `Формат`  `1.`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            `2.`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            `3.`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Список`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>

End; // scParam
End; // wParamBasedoc

Function ParamMaster: string;
{
  // вызов окошка, чтобы помочь пользователю заполнить строку дополнительных параметров идентификатора
  ParamMaster := '';
  PParam1     := 1;
  PParam2     := 2;
  PParam3     := 3;
  if (RunWindowModal(wParamPreBasedoc) = cmDefault)
  {
    PackFields;
    case PParam1 of
      0: ParamMaster := '';
      1: ParamMaster := '[П1:Н]';
      2: ParamMaster := '[П1:Д]';
      3: ParamMaster := '[П1:П]';
      4: ParamMaster := '[П1:ДД]';
      5: ParamMaster := '[П1:ПР]';
    end;
    case PParam2 of
      0: ParamMaster := ParamMaster + '';
      1: ParamMaster := ParamMaster + '[П2:Н]';
      2: ParamMaster := ParamMaster + '[П2:Д]';
      3: ParamMaster := ParamMaster + '[П2:П]';
      4: ParamMaster := ParamMaster + '[П2:ДД]';
      5: ParamMaster := ParamMaster + '[П2:ПР]';
    end;
    case PParam3 of
      0: ParamMaster := ParamMaster + '';
      1: ParamMaster := ParamMaster + '[П3:Н]';
      2: ParamMaster := ParamMaster + '[П3:Д]';
      3: ParamMaster := ParamMaster + '[П3:П]';
      4: ParamMaster := ParamMaster + '[П3:ДД]';
      5: ParamMaster := ParamMaster + '[П3:ПР]';
    end;
    case PList of
      0: ParamMaster := ParamMaster + '';
      1: ParamMaster := ParamMaster + '[Список:Перв]';
      2: ParamMaster := ParamMaster + '[Список:Послед]';
    end;
  }
}
Procedure ParamParser(PpmServer: ObjPPTemplate; var Err: string);
{
  if (PPmServer.ParamCount = 0)
  {
    PParam1 := 1; // значение по умолч. 1-го пар-ра
    PParam2 := 2; // значение по умолч. 2-го пар-ра
    PParam3 := 3; // значение по умолч. 3-го пар-ра
  }
  else
  {
    PParam1 := 0; // значение по умолч. 1-го пар-ра
    PParam2 := 0; // значение по умолч. 2-го пар-ра
    PParam3 := 0; // значение по умолч. 3-го пар-ра
  }
  PList := 0; // значение по умолч. 4-го пар-ра
  var i: word;
  for(i := 1; i <= PPmServer.ParamCount; i := i + 1)
  {
    case UpCase(PPMServer.ParamName(i)) of
      'П1':
        case UpCase(PPMServer.ParamValue(i)) of
          'Н':  PParam1 := 1;
          'Д':  PParam1 := 2;
          'ДД': PParam1 := 4;
          'П':  PParam1 := 3;
          'ПР': PParam1 := 5;
        end;
      'П2':
        case UpCase(PPMServer.ParamValue(i)) of
          'Н':  PParam2 := 1;
          'Д':  PParam2 := 2;
          'ДД': PParam2 := 4;
          'П':  PParam2 := 3;
          'ПР': PParam2 := 5;
        end;
      'П3':
        case UpCase(PPMServer.ParamValue(i)) of
          'Н':  PParam3 := 1;
          'Д':  PParam3 := 2;
          'ДД': PParam3 := 4;
          'П':  PParam3 := 3;
          'ПР': PParam3 := 5;
        end;
      'СПИСОК':
        case UpCase(PPMServer.ParamValue(i)) of
          'ПЕРВ':   PList := 1;
          'ПОСЛЕД': PList := 2;
        end;
    else
    {
      Err := PPMServer.ParamName(i);
      exit;
    }
    end;
  }
}

Function DocHandle: string;
{
#declare MyCase(PParam)
  case #PParam of
    0: DocHandle := DocHandle + '';
    1: DocHandle := DocHandle + PPMPreBaseDocInfo.NumDoc + ' ';
    2: DocHandle := DocHandle + FrazaOt + ' ' + Data + LYear + ' ';
    4: DocHandle := DocHandle + ' ' + Data + ' ';
    3: DocHandle := DocHandle + PPMPreBaseDocInfo.PrimDoc + ' ';
    5: DocHandle := DocHandle + PPMPreBaseDocInfo.ProcDoc + ' ';
  end; // case
#end

  DocHandle := '';
  var LYear, FrazaOt: string[3];
  var Data: string;
  if (wGetTune('Country') = ccUkr)
  {
    LYear   := 'р.';
    FrazaOt := 'вiд'
  }
  else
  {
    LYear   := 'г.';
    FrazaOt := 'от'
  }
  Data := string(PPMPreBaseDocInfo.dDoc);
  Data := Replace(Data, '/', '.');
  #MyCase(PParam1)
  #MyCase(PParam2)
  #MyCase(PParam3)
}

Function Culc(TiDkGal, TiDkUser: word; cSoprDoc: comp; PpmServer: ObjPPTemplate; 
              isSyntaxCheck: boolean; var ErrDescr: string): string;
{
  Culc        := '';
  curTiDkGal  := TiDkGal;
  curSoprDoc  := cSoprDoc;
  curTiDkUser := TiDkUser;
  ParamParser(PpmServer, ErrDescr);
  // //////////////////////////
  if isSyntaxCheck
    exit; // если проверка синтаксиса, то не надо запускать все расчеты (на выход), иначе -- надо
  // //////////////////////////
  delete all PPMPreBaseDocInfo;
  _loop SoprHoz
  {
      if (GetFirst BaseDoc = tsOk)
      {
        PPMPreBaseDocInfo.NumDoc  := BaseDoc.NoDoc;
        PPMPreBaseDocInfo.dDoc    := BaseDoc.dDoc;
        PPMPreBaseDocInfo.PrimDoc := BaseDoc.Name;
        PPMPreBaseDocInfo.PrimDoc := Replace(PPMPreBaseDocInfo.PrimDoc, '/', '.');
        PPMPreBaseDocInfo.ProcDoc := string(BASEDOC.PROCOPL,0,2);
//????        PPMPreBaseDocInfo.ProcDoc := Replace(PPMPreBaseDocInfo.ProcDoc, '.', ',');//????
        insert current PPMPreBaseDocInfo;
      }
  }
  case PList of
    0:
    {
      _loop PPMPreBaseDocInfo
      {
        if length(Culc) + length(DocHandle) <= 248
          culc:= culc +  DocHandle + ';';
        else
          Break; // чтобы превышения строки не было
      }
    }
    1:
      if (GetFirst PPMPreBaseDocInfo = tsOK)
        if length(Culc) + length(DocHandle) <= 248
          Culc := Culc + DocHandle + '; ';
    2:
      if (GetLast PPMPreBaseDocInfo = tsOK)
        if length(Culc) + length(DocHandle) <= 248
          Culc := Culc + DocHandle + '; ';
  end; // case
  Culc := rTrim(Trim(Culc), ';');
}

HandleEvent // Interface

cmOnVipLoad:
{
}

cmOnVipUnLoad:
{
}
End;
End.
