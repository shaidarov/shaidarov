/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,2011 корпорация ГАЛАКТИКА                    ║
 ╚═══════════════════════════════════════════════════════════════════════════╝

Свое распределение по пропорциональной схеме.
Стандартное распределение игнорируется.

*/

Function InitExcel: boolean;
{

    if xlCreateExcelWithTemplate(vTemplateFilePathName, True) = true
    {
        xlGetActiveWorkBookName(vWBName);
        InitExcel := True;
    }
     else
     {
        xlKillExcel;
        InitExcel := False;
     }
}

Function TerminateExcel: boolean;
{
        xlSetActiveSheetByName('Параметры');
        xlSetCellStringValue(vDataFilePath, 1, 2, 1, 2);
        xlSetCellStringValue(vDataFileName, 2, 2, 2, 2);
        xlSetCellNumberValue(vMaxlevel,     3, 2, 3, 2);
        xlSetCellNumberValue(3, 4, 2, 4, 2);

        xlSetCellNumberValue( 0,   5, 2, 5, 2);

        xlSetCellNumberValue( 0, 7, 2, 7, 2);

        xlSetCellNumberValue( 0, 8, 2, 8, 2);

        xlSetCellStringValue(DateToStr(bound_DateBeg,'DD/MM/YYYY'),9,2,9,2);
        xlSetCellStringValue(DateToStr(bound_DateEnd,'DD/MM/YYYY'),10,2,10,2);

        i := 20;
        xlSetCellStringValue  ('DataType', i, 1, i, 1);
        xlSetCellStringValue  ('SaldType', i, 2, i, 2);
        xlSetCellStringValue  ('StAn1'   , i, 3, i, 3);
        xlSetCellStringValue  ('StAn2'   , i, 4, i, 4);
        xlSetCellStringValue  ('StAn3'   , i, 5, i, 5);
        xlSetCellStringValue  ('StAn4'   , i, 6, i, 6);
        xlSetCellStringValue  ('StAn5'   , i, 7, i, 7);
        xlSetCellStringValue  ('StAn6'   , i, 8, i, 8);
        xlSetCellStringValue  ('StPodr'  , i, 63,i,63);
        xlSetCellStringValue  ('StVal'   , i, 9, i, 9);

        xlSetCellStringValue  ('DDate'   , i,10, i,10);
        xlSetCellStringValue  ('DDateS'  , i,11, i,11);
        xlSetCellStringValue  ('DolgAge' , i,12, i,12);

        xlSetCellStringValue  ('Summa'   , i,13, i,13);
        xlSetCellStringValue  ('StSchet'   , i,14, i,14);
        xlSetCellStringValue  ('StSubSchet', i,15, i,15);

        xlSetCellStringValue  ('StTypeIDoc', i,16, i,16);
        xlSetCellStringValue  ('STNoIDoc'  , i,17, i,17);

        xlSetCellStringValue  ('DORPunkt'    , i,28, i,28);
        xlSetCellStringValue  ('SpecItem'    , i,29, i,29);
        xlSetCellStringValue  ('MonthAge'    , i,30, i,30);
        xlSetCellStringValue  ('PrDolgAge'   , i,31, i,31);
        xlSetCellStringValue  ('DaysKOpl'    , i,32, i,32);
        xlSetCellStringValue  ('TypeDays'    , i,33, i,33);
        xlSetCellStringValue  ('DaysKOplK'   , i,34, i,34);
        xlSetCellStringValue  ('Dogovor'     , i,35, i,35);
        xlSetCellStringValue  ('OtklDays'    , i,36, i,36);
        xlSetCellStringValue  ('SumValut'    , i,37, i,37);
        xlSetCellStringValue  ('OrgAddr'     , i,38, i,38);
        xlSetCellStringValue  ('OrgTel'      , i,39, i,39);
        xlSetCellStringValue  ('PlanDate'    , i,40, i,40);
        xlSetCellStringValue  ('PlanDS'      , i,41, i,41);
        xlSetCellStringValue  ('GroupMCU'    , i,62, i,62);
        xlSetCellStringValue  ('PodrOtpr'    , i,64, i,64);
        //атрибуты договора из аналитики по счету
        xlSetCellStringValue  ('DogVid'      , i,65, i,65);
        xlSetCellStringValue  ('DogSubj'     , i,66, i,66);
        xlSetCellStringValue  ('DogPodr'     , i,67, i,67);
        xlSetCellStringValue  ('DogOtvFIO'   , i,68, i,68);

        xlSetCellStringValue  ('DogDBeg'     , i,69, i,69);
        xlSetCellStringValue  ('DogDEnd'     , i,70, i,70);
        xlSetCellStringValue  ('DogSum'      , i,71, i,71);
        xlSetCellStringValue  ('DogSumNDS'   , i,72, i,72);
        xlSetCellStringValue  ('DogNrec'     , i,73, i,73);
        xlSetCellStringValue  ('DogDesCr'    , i,74, i,74);
        xlSetCellStringValue  ('DogDesGr'    , i,75, i,75);
        xlSetCellStringValue  ('NoVnut'      , i,76, i,76);
        xlSetCellStringValue  ('NoVnesh'     , i,77, i,77);
        xlSetCellStringValue  ('DogStatus'   , i,78, i,78);
        xlSetCellStringValue  ('OrgName'     , i,79, i,79);
        xlSetCellStringValue  ('OrgUNN'      , i,80, i,80);
        xlSetCellStringValue  ('DogDdoc'     , i,81, i,81);
        xlSetCellStringValue  ('DogOrgName'  , i,82, i,82);
        xlSetCellStringValue  ('DogOrgUNN'   , i,83, i,83);

        xlSetCellStringValue  ('PersFIO'     , i,84, i,84);
        xlSetCellStringValue  ('PersTabN'    , i,85, i,85);
        xlSetCellStringValue  ('PersPodrN'   , i,86, i,86);
        xlSetCellStringValue  ('PersPodrK'   , i,87, i,87);
        xlSetCellStringValue  ('PersDolzh'   , i,88, i,88);

        xlSetCellStringValue  ('KBK'         , i,89, i,89);

        i := 21;

        xlSetCellStringValue ('Дата сальдо', i, 1, i, 1);
        xlSetCellStringValue ('Тип сальдо', i, 2, i,2);
        xlSetCellStringValue ('Аналитический признак 1', i, 3, i,3);
        xlSetCellStringValue ('Аналитический признак 2', i, 4, i,4);
        xlSetCellStringValue ('Аналитический признак 3', i, 5, i,5);
        xlSetCellStringValue ('Аналитический признак 4', i, 6, i,6);
        xlSetCellStringValue ('Аналитический признак 5', i, 7, i,7);
        xlSetCellStringValue ('Аналитический признак 6', i, 8, i,8);
        xlSetCellStringValue ('Подразделение', i, 63, i,63);
        xlSetCellStringValue ('Валюта сальдо', i, 9, i, 9);

        xlSetCellStringValue ('Дата задолженности', i, 10, i, 10);
        xlSetCellStringValue ('Дата задолженности в текстовом виде для контроля', i, 11, i, 11);
        xlSetCellStringValue ('Возраст задолженности', i, 12, i, 12);
        xlSetCellStringValue ('Сумма задолженности в НДЕ', i, 13, i, 13);

        xlSetCellStringValue ('Счет', i, 14, i, 14);
        xlSetCellStringValue ('Субсчет', i, 15, i, 15);

        xlSetCellStringValue ('Тип документа', i, 16, i, 16);
        xlSetCellStringValue ('Номер документа', i, 17, i, 17);

        xlSetCellStringValue  ('Иерархия организаций 1'  , i,18, i,18);
        xlSetCellStringValue  ('Иерархия организаций 2'  , i,19, i,19);
        xlSetCellStringValue  ('Иерархия организаций 3'  , i,20, i,20);
        xlSetCellStringValue  ('Иерархия организаций 4'  , i,21, i,21);
        xlSetCellStringValue  ('Иерархия организаций 5'  , i,22, i,22);
        xlSetCellStringValue  ('Иерархия организаций 6'  , i,23, i,23);
        xlSetCellStringValue  ('Иерархия организаций 7'  , i,24, i,24);
        xlSetCellStringValue  ('Иерархия организаций 8'  , i,25, i,25);
        xlSetCellStringValue  ('Иерархия организаций 9'  , i,26, i,26);
        xlSetCellStringValue  ('Иерархия организаций 10' , i,27, i,27);
        xlSetCellStringValue  ('Иерархия организаций 2.1'  , i,42, i,42);
        xlSetCellStringValue  ('Иерархия организаций 2.2'  , i,43, i,43);
        xlSetCellStringValue  ('Иерархия организаций 2.3'  , i,44, i,44);
        xlSetCellStringValue  ('Иерархия организаций 2.4'  , i,45, i,45);
        xlSetCellStringValue  ('Иерархия организаций 2.5'  , i,46, i,46);
        xlSetCellStringValue  ('Иерархия организаций 2.6'  , i,47, i,47);
        xlSetCellStringValue  ('Иерархия организаций 2.7'  , i,48, i,48);
        xlSetCellStringValue  ('Иерархия организаций 2.8'  , i,49, i,49);
        xlSetCellStringValue  ('Иерархия организаций 2.9'  , i,50, i,50);
        xlSetCellStringValue  ('Иерархия организаций 2.10' , i,51, i,51);
        xlSetCellStringValue  ('Иерархия организаций 3.1'  , i,52, i,52);
        xlSetCellStringValue  ('Иерархия организаций 3.2'  , i,53, i,53);
        xlSetCellStringValue  ('Иерархия организаций 3.3'  , i,54, i,54);
        xlSetCellStringValue  ('Иерархия организаций 3.4'  , i,55, i,55);
        xlSetCellStringValue  ('Иерархия организаций 3.5'  , i,56, i,56);
        xlSetCellStringValue  ('Иерархия организаций 3.6'  , i,57, i,57);
        xlSetCellStringValue  ('Иерархия организаций 3.7'  , i,58, i,58);
        xlSetCellStringValue  ('Иерархия организаций 3.8'  , i,59, i,59);
        xlSetCellStringValue  ('Иерархия организаций 3.9'  , i,60, i,60);
        xlSetCellStringValue  ('Иерархия организаций 3.10' , i,61, i,61);
        xlSetCellStringValue  ('Пункт разгрузки'           , i,28, i,28);
        xlSetCellStringValue  ('Пункт спецификации'        , i,29, i,29);
        xlSetCellStringValue  ('Возраст в месяцах'         , i,30, i,30);
        xlSetCellStringValue  ('Просроченность задолженности в днях' , i,31, i,31);
        xlSetCellStringValue  ('Дней для оплаты'           , i,32, i,32);
        xlSetCellStringValue  ('Рабочие-календарные дни'   , i,33, i,33);
        xlSetCellStringValue  ('Дней для оплаты контроль'  , i,34, i,34);
        xlSetCellStringValue  ('Договор'                   , i,35, i,35);
        xlSetCellStringValue  ('Дней отклонения'           , i,36, i,36);
        xlSetCellStringValue  ('Сумма в валюте'            , i,37, i,37);
        xlSetCellStringValue  ('Адрес организации'         , i,38, i,38);
        xlSetCellStringValue  ('Телефон организации'       , i,39, i,39);
        xlSetCellStringValue  ('Плановая дата погашения задолженности',i,40,i,40);
        xlSetCellStringValue  ('Плановая дата погашения задолженности в текстовом виде',i,41,i,41);
        xlSetCellStringValue  ('Группа МЦ/услуги спецификации',i,62,i,62);
        xlSetCellStringValue  ('Подразделение-отправитель' , i,64, i,64);
       //атрибуты договора из аналитики по счету
        xlSetCellStringValue  ('Договор (вид)'             , i,65, i,65);
        xlSetCellStringValue  ('Договор (предмет)'         , i,66, i,66);
        xlSetCellStringValue  ('Договор (курирующее подразделение)', i,67, i,67);
        xlSetCellStringValue  ('Договор (ответственный)'   , i,68, i,68);

        xlSetCellStringValue  ('Договор. Дата начала'      , i,69, i,69);
        xlSetCellStringValue  ('Договор. Дата окончания'   , i,70, i,70);
        xlSetCellStringValue  ('Договор. Сумма'            , i,71, i,71);
        xlSetCellStringValue  ('Договор. Сумма НДС'        , i,72, i,72);
        xlSetCellStringValue  ('Договор. nRec'             , i,73, i,73);

        xlSetCellStringValue  ('Договор. Дескриптор'       , i,74, i,74);
        xlSetCellStringValue  ('Договор. Группа дескр.'    , i,75, i,75);
        xlSetCellStringValue  ('Договор. Номер внут.'      , i,76, i,76);
        xlSetCellStringValue  ('Договор. Номер внеш.'      , i,77, i,77);
        xlSetCellStringValue  ('Договор. Статус'           , i,78, i,78);
        xlSetCellStringValue  ('Аналитика. Организация'    , i,79, i,79);
        xlSetCellStringValue  ('Аналитика. Орг. УНН'       , i,80, i,80);
        xlSetCellStringValue  ('Договор. Дата'             , i,81, i,81);
        xlSetCellStringValue  ('Договор. Организация'      , i,82, i,82);
        xlSetCellStringValue  ('Договор. Орг. УНН'         , i,83, i,83);

        xlSetCellStringValue  ('Работник. ФИО'             , i,84, i,84);
        xlSetCellStringValue  ('Работник. Таб. №'          , i,85, i,85);
        xlSetCellStringValue  ('Работник. Подразделение'   , i,86, i,86);
        xlSetCellStringValue  ('Работник. Подр. код'       , i,87, i,87);
        xlSetCellStringValue  ('Работник. Должность'       , i,88, i,88);

        xlSetCellStringValue  ('КБК'                       , i,89, i,89);

        StartNewVisual(vtRotateVisual, vfTimer+vfThread, ''#3'Работа макроса Visual Basic', 1);
        if not xlRunMacro(vMacrosName)
            {
                Message('Не удалось выполнить макрос ' + vMacrosName + '!', error);
            }

        StopVisual('',0);
        xlKillExcel;
        TerminateExcel := True;
}

Procedure DefineMaxLevel;
{
    if vMaxlevel < 1 and Saldo_Print.An1 <> 0
       vMaxlevel := 1;
    if vMaxlevel < 2 and Saldo_Print.An2 <> 0
       vMaxlevel := 2;
    if vMaxlevel < 3 and Saldo_Print.An3 <> 0
       vMaxlevel := 3;
    if vMaxlevel < 4 and Saldo_Print.An4 <> 0
       vMaxlevel := 4;
    if vMaxlevel < 5 and Saldo_Print.An5 <> 0
       vMaxlevel := 5;
    if vMaxlevel < 6 and Saldo_Print.An6 <> 0
       vMaxlevel := 6;
}

Procedure PrintMain2;
{
var MonthAge : integer;

    DBFClearBuffer(MonHandle);

    If Saldo_Print.DataType = oborot
        DBFPutFieldValue(MonHandle,'DataType',      'Обороты за период' );
    If Saldo_Print.DataType = saldo_v
        DBFPutFieldValue(MonHandle,'DataType',      Trim (String( 'Входящее сальдо на ' + StrToDate(Saldo_Print.SaldoDat, 'DD/MM/YYYY') , 40, 0)));

    If Saldo_Print.DataType = saldo_i
        DBFPutFieldValue(MonHandle,'DataType',      Trim (String( 'Сальдо исходящее на ' + StrToDate(Saldo_Print.SaldoDat, 'DD/MM/YYYY') , 40, 0)));


    if Saldo_Print.SaldoType = cDebet
         DBFPutFieldValue(MonHandle,'SaldType', 'дебет')
    else
         DBFPutFieldValue(MonHandle,'SaldType', 'кредит');

    DefineMaxLevel;

    DBFPutFieldValue(MonHandle,'StAn1',         Trim (String(Saldo_Print.St1, 80, 0)) );
    DBFPutFieldValue(MonHandle,'StAn2',         Trim (String(Saldo_Print.St2, 80, 0)) );
    DBFPutFieldValue(MonHandle,'StAn3',         Trim (String(Saldo_Print.St3, 80, 0)) );
    DBFPutFieldValue(MonHandle,'StAn4',         Trim (String(Saldo_Print.St4, 80, 0)) );
    DBFPutFieldValue(MonHandle,'StAn5',         Trim (String(Saldo_Print.St5, 80, 0)) );
    DBFPutFieldValue(MonHandle,'StAn6',         Trim (String(Saldo_Print.St6, 80, 0)) );
    DBFPutFieldValue(MonHandle,'StPodr',        Trim (String(Saldo_Print.StPodr, 80, 0)) );
    DBFPutFieldValue(MonHandle,'StVal',         Trim (String(Saldo_Print.StVal, 8, 0)) );

    DBFPutFieldValue(MonHandle,'DDate',         Trim (String(longint (Saldo_Print.DolgDat) - 693594, 50, 0)));
    DBFPutFieldValue(MonHandle,'DDateS',        Trim (StrToDate (Saldo_Print.DolgDat, 'DD/MM/YYYY')));

    If Saldo_Print.SaldoDat = date(1,1,1900)
    {
        DBFPutFieldValue(MonHandle,'DolgAge',   '0');
    }
    else
    {
        DBFPutFieldValue(MonHandle,'DolgAge',   Trim (String(CalcDaysBetweenDates (Saldo_Print.DolgDat, Saldo_Print.SaldoDat, Saldo_Print.OnlyWorkDaysFlag) - 1, 80, 0) ));

    }
    if Saldo_Print.SaldoType = cCredit
        SaldoSign := cKS
    else
        SaldoSign := cDS ;

    DBFPutFieldValue(MonHandle,'StSchet',       Trim (String(Saldo_Print.StSchet, 8, 0)) );
    DBFPutFieldValue(MonHandle,'StSubSchet',    Trim (String(Saldo_Print.StSubSchet, 8, 0)) );

    DBFPutFieldValue(MonHandle,'StTypeIDoc',      Saldo_Print.StTypeInitDoc );
    DBFPutFieldValue(MonHandle,'StNoIDoc',        Saldo_Print.StNoInitDoc );

    DBFPutFieldValue(MonHandle,'OrgAddr', Saldo_Print.OrgAddr);
    DBFPutFieldValue(MonHandle,'OrgTel' , Saldo_Print.OrgTel );

    If Saldo_Print.SaldoDat = date(1,1,1900)
    {
        DBFPutFieldValue(MonHandle,'MonthAge',  'обороты')
        DBFPutFieldValue(MonHandle,'PrDolgAge', 0);
        DBFPutFieldValue(MonHandle,'OtklDays', 0);
        DBFPutFieldValue(MonHandle,'DaysKOpl', '');
        DBFPutFieldValue(MonHandle,'DaysKOplK', '');
        DBFPutFieldValue(MonHandle,'TypeDays', '');
        DBFPutFieldValue(MonHandle,'PlanDate',0);
        DBFPutFieldValue(MonHandle,'PlanDS','ДД/ММ/ГГГГ');
    }
    else
      {

       //выводим просроченность задолженности. если не просрочена, то нуль
         if (CalcDaysBetweenDates (Saldo_Print.DolgDat, Saldo_Print.SaldoDat, Saldo_Print.OnlyWorkDaysFlag ) - Saldo_Print.Attr - 1)>0
          DBFPutFieldValue(MonHandle,'PrDolgAge', CalcDaysBetweenDates (Saldo_Print.DolgDat, Saldo_Print.SaldoDat, Saldo_Print.OnlyWorkDaysFlag ) - Saldo_Print.Attr - 1)
              else DBFPutFieldValue(MonHandle,'PrDolgAge',0);


        //выводим просроченность задолженности. если не просрочена, то отрицательное число
          DBFPutFieldValue(MonHandle,'OtklDays', CalcDaysBetweenDates (Saldo_Print.DolgDat, Saldo_Print.SaldoDat, Saldo_Print.OnlyWorkDaysFlag ) - Saldo_Print.Attr - 1)

        //выводим плановую дату погашения задолженности
          DBFPutFieldValue(MonHandle,'PlanDate',longint(Saldo_Print.DolgDat ) - 693594 + Saldo_Print.Attr);
          DBFPutFieldValue(MonHandle,'PlanDS',Add_Day ( StrToDate(Saldo_Print.DolgDat,'DD/MM/YYYY'), Saldo_Print.Attr));

        DBFPutFieldValue(MonHandle,'DaysKOpl', Saldo_Print.Attr);
        DBFPutFieldValue(MonHandle,'DaysKOplK', Saldo_Print.AttrKontr);

        DBFPutFieldValue(MonHandle,'TypeDays', Saldo_Print.Class);


        MonthAge := Months_Between (Saldo_Print.DolgDat, Saldo_Print.SaldoDat);
        if MonthAge = 0
          DBFPutFieldValue(MonHandle,'MonthAge',   ' не определена дата')
        else
          DBFPutFieldValue(MonHandle,'MonthAge',   DoubleToStr(MonthAge - 1, '77') + '-' + DoubleToStr(MonthAge, '77'));
      }

      DBFPutFieldValue(MonHandle,'Dogovor', Saldo_Print.Dogovor);

      //выводим атрибуты договора (из аналитики)
      DBFPutFieldValue(MonHandle,'DogVid'   , Trim (String(Saldo_Print.DogVid,    80, 0)) );
      DBFPutFieldValue(MonHandle,'DogSubj'  , Trim (String(Saldo_Print.DogSubj,   80, 0)) );
      DBFPutFieldValue(MonHandle,'DogPodr'  , Trim (String(Saldo_Print.DogPodr,   80, 0)) );
      DBFPutFieldValue(MonHandle,'DogOtvFIO', Trim (String(Saldo_Print.DogOtvFIO, 80, 0)) );

        if (Saldo_Print.DogdBeg > longInt(0) ) {
      DBFPutFieldValue(MonHandle,'DogDBeg'  , Trim (String(longint (Saldo_Print.DogdBeg) - 693594, 50, 0)));
        } else {
      DBFPutFieldValue(MonHandle,'DogDBeg'  , 0);
          }

        if (Saldo_Print.DogdEnd > longInt(0) ) {
      DBFPutFieldValue(MonHandle,'DogDEnd'  , Trim (String(longint (Saldo_Print.DogdEnd) - 693594, 50, 0)));
        } else {
      DBFPutFieldValue(MonHandle,'DogDEnd'  , 0);
          }
        if (Saldo_Print.DogDdoc > longInt(0) ) {
      DBFPutFieldValue(MonHandle,'DogDdoc'  , Trim (String(longint (Saldo_Print.DogDdoc) - 693594, 50, 0)));
        } else {
      DBFPutFieldValue(MonHandle,'DogDdoc'  , 0);
          }

      DBFPutFieldValue(MonHandle,'DogSum'    , Saldo_Print.DogSum          );
      DBFPutFieldValue(MonHandle,'DogSumNDS' , Saldo_Print.DogSumNDS       );
      DBFPutFieldValue(MonHandle,'DogNrec'   , String(Saldo_Print.DogNrec) );
      DBFPutFieldValue(MonHandle,'DogDesCr'  , Trim (String(Saldo_Print.DogDesCr,    80, 0)) );
      DBFPutFieldValue(MonHandle,'DogDesGr'  , Trim (String(Saldo_Print.DogDesGr,    80, 0)) );
      DBFPutFieldValue(MonHandle,'DogStatus' , Trim (String(Saldo_Print.DogStatus,   80, 0)) );
      DBFPutFieldValue(MonHandle,'NoVnut'    , Trim (String(Saldo_Print.NoVnut,      80, 0)) );
      DBFPutFieldValue(MonHandle,'NoVnesh'   , Trim (String(Saldo_Print.NoVnesh,     80, 0)) );
      DBFPutFieldValue(MonHandle,'OrgName'   , Trim (String(Saldo_Print.OrgName,     80, 0)) );
      DBFPutFieldValue(MonHandle,'OrgUNN'    , Trim (String(Saldo_Print.OrgUNN,      80, 0)) );
      DBFPutFieldValue(MonHandle,'DogOrgName', Trim (String(Saldo_Print.DogOrgName,  80, 0)) );
      DBFPutFieldValue(MonHandle,'DogOrgUNN' , Trim (String(Saldo_Print.DogOrgUNN,   80, 0)) );

      DBFPutFieldValue(MonHandle,'PersFIO'   , Saldo_Print.PersFIO         );
      DBFPutFieldValue(MonHandle,'PersTabN'  , Saldo_Print.PersTabN        );
      DBFPutFieldValue(MonHandle,'PersPodrN' , Saldo_Print.PersPodrN       );
      DBFPutFieldValue(MonHandle,'PersPodrK' , Saldo_Print.PersPodrK       );
      DBFPutFieldValue(MonHandle,'PersDolzh' , Saldo_Print.PersDolzh       );

        if ( 1 = Saldo_Print.TypeInitDoc
          or 2 = Saldo_Print.TypeInitDoc
           ) {
      DBFPutFieldValue(MonHandle,'KBK'       , piExtClass.GetSegName(100, Saldo_Print.cInitDoc) );
      }
}

Procedure PrintData_v2;
var
  _AllDistrSum  : double;
  _DistrSum     : double;
  _AllZadolgSum : double;
  _ZadolgSum    : double;
   _AllDistrSumVal : double;
  _DistrSumVal     : double;
  _AllZadolgSumVal : double;
  _ZadolgSumVal    : double;
  _Flag         : boolean;
  DistribAlg    : integer;
{

    bound_SaldoDat := bound_DateBeg;
    bound_SaldoType:= cCredit;
    StopVisual('',0);
    STARTNEWVISUAL(vtIndicatorVisual, vfTimer+vfBreak+vfConfirm, 'Выгрузка в DBF', RecordsInTable(tnSaldo_Print));
    SetVisualTitle ('Выгрузка в DBF');

    DeleteFile (vDataFilePathName);
    MonHandle:=DBFOpen(vDataFilePathName,stCreate);
    if (MonHandle=0)
        {   Message('Целевой файл не создан'+ vDataFilePathName, error + yesbutton);
            DBFClose(MonHandle);
            vErrorFlag  := True;
            exit;
        }
    // --------------  формирование шапки DBF файла --------------

    DBFAddField(MonHandle,'DataType',   DbChar, 40,0);
    DBFAddField(MonHandle,'SaldType',   DbChar,  6,0);
    DBFAddField(MonHandle,'StAn1',      DbChar, 81,0);
    DBFAddField(MonHandle,'StAn2',      DbChar, 81,0);
    DBFAddField(MonHandle,'StAn3',      DbChar, 81,0);
    DBFAddField(MonHandle,'StAn4',      DbChar, 81,0);
    DBFAddField(MonHandle,'StAn5',      DbChar, 81,0);
    DBFAddField(MonHandle,'StAn6',      DbChar, 81,0);
    DBFAddField(MonHandle,'StPodr',     DbChar, 81,0);
    DBFAddField(MonHandle,'StVal',      DbChar,  8,0);
    DBFAddField(MonHandle,'DDate',      DbNum,   8,0);
    DBFAddField(MonHandle,'DDateS',     DbChar, 10,0);
    DBFAddField(MonHandle,'DolgAge',    DbNum,   8,0);
    DBFAddField(MonHandle,'Summa',      DbNum,  16,2);
    DBFAddField(MonHandle,'StSchet',    DbChar,  8,0);
    DBFAddField(MonHandle,'StSubSchet', DbChar,  8,0);
    DBFAddField(MonHandle,'StTypeIDoc',   DbChar, 80,0);
    DBFAddField(MonHandle,'StNoIDoc',     DbChar, 10,0);

    DBFAddField(MonHandle, 'DORPunkt'  , DbChar, 81,0);
    DBFAddField(MonHandle, 'SpecItem'  , DbChar,151,0);

    DBFAddField(MonHandle, 'MonthAge'  , DbChar, 45,0);
    DBFAddField(MonHandle, 'PrDolgAge' , DbNum, 8,0);
    DBFAddField(MonHandle, 'OtklDays'  , DbNum, 8,0);
    DBFAddField(MonHandle, 'DaysKOPl'  , DbNum, 8,0);
    DBFAddField(MonHandle, 'DaysKOplK' , DbChar, 8,0);
    DBFAddField(MonHandle, 'TypeDays'  , DbChar, 16,0);
    DBFAddField(MonHandle, 'Dogovor'   , DbChar, 81,0);
    DBFAddField(MonHandle, 'SumValut'  , DbNum, 16,2);
    DBFAddField(MonHandle, 'OrgAddr'   , DbChar, 151,0);
    DBFAddField(MonHandle, 'OrgTel'    , DbChar, 151,0);

    DBFAddField(MonHandle, 'PlanDate'  , DbNum,   8,0);
    DBFAddField(MonHandle, 'PlanDS'    , DbChar, 10,0);
    DBFAddField(MonHandle, 'GroupMCU'  , DbChar,151,0);
    DBFAddField(MonHandle, 'PodrOtpr'  , DbChar,151,0);
    //атрибуты договора (из аналитики)
    DBFAddField(MonHandle, 'DogVid'    , DbChar,151,0);
    DBFAddField(MonHandle, 'DogSubj'   , DbChar,151,0);
    DBFAddField(MonHandle, 'DogPodr'   , DbChar,151,0);
    DBFAddField(MonHandle, 'DogOtvFIO' , DbChar,151,0);

    DBFAddField(MonHandle, 'DogDBeg'   , DbNum,  8,0);
    DBFAddField(MonHandle, 'DogDEnd'   , DbNum,  8,0);
    DBFAddField(MonHandle, 'DogSum'    , DbNum ,16,2);
    DBFAddField(MonHandle, 'DogSumNDS' , DbNum ,16,2);
    DBFAddField(MonHandle, 'DogNrec'   , DbChar,18,0);
    DBFAddField(MonHandle, 'DogDesCr'  , DbChar,13,0);
    DBFAddField(MonHandle, 'DogDesGr'  , DbChar, 5,0);
    DBFAddField(MonHandle, 'DogStatus' , DbChar,12,0);
    DBFAddField(MonHandle, 'NoVnut'    , DbChar,18,0);
    DBFAddField(MonHandle, 'NoVnesh'   , DbChar,18,0);
    DBFAddField(MonHandle, 'OrgName'   , DbChar,99,0);
    DBFAddField(MonHandle, 'OrgUNN'    , DbChar,13,0);
    DBFAddField(MonHandle, 'DogDdoc'   , DbNum,  8,0);
    DBFAddField(MonHandle, 'DogOrgName', DbChar,99,0);
    DBFAddField(MonHandle, 'DogOrgUNN' , DbChar,13,0);

    DBFAddField(MonHandle, 'PersFIO'   , DbChar,151,0);
    DBFAddField(MonHandle, 'PersTabN'  , DbChar, 20,0);
    DBFAddField(MonHandle, 'PersPodrN' , DbChar,151,0);
    DBFAddField(MonHandle, 'PersPodrK' , DbChar, 20,0);
    DBFAddField(MonHandle, 'PersDolzh' , DbChar,151,0);

    DBFAddField(MonHandle, 'KBK'       , DbChar,151,0);

    vMaxlevel := 0;
    i := 1;
    _loop Saldo_Print
    {
     {

        DefineMaxLevel;
        TipDoc := Saldo_Print.TypeInitDoc;
          Case Saldo_Print.TypeInitDoc of
                 101: _Flag := True;            // vid_doc:='Накладная на прием';
                 102: _Flag := True;            // vid_doc:='Накладная на прием возвращ. от консигнаторов';
                 103: _Flag := True;            // vid_doc:='Накладная на прием на консигнацию';
                 106: _Flag := True;            // vid_doc:='Накладная на возврат по реклам.в продаже';
                 201: _Flag := True;            // vid_doc:='Накладная на отпуск товаров';
                 202: _Flag := True;            // vid_doc:='Накладная на отпуск на консигн.';
                 203: _Flag := True;            // vid_doc:='Накладная на возврат консигнатору';
                 206: _Flag := True;            // vid_doc:='Накладная на возврат по реклам. при закупке';
                 111: _Flag := True;            // vid_doc:='Акт на прием услуги';
                 211: _Flag := True;            // vid_doc:='Акт на оказание услуги';
                 151: _Flag := True;            // vid_doc:='акт реализации принятых на консигн. МЦ';
                 251: _Flag := True;            // vid_doc:='акт реализации перед. на консиг. МЦ';
          else
            {_Flag := False;}
          End;

          PrintMain2;

          DBFPutFieldValue(MonHandle,'Summa',         Trim (String(SaldoSign * Saldo_Print.S1, 40, 8)) )
          DBFPutFieldValue(MonHandle,'SumValut',      Trim (String(SaldoSign * Saldo_Print.S2, 40, 8)) )
          DBFPutFieldValue(MonHandle,'SpecItem', '')
          DBFPutFieldValue(MonHandle,'GroupMCU', '')
          //вывод подразделения-отправителя (склада отгрузки) по первичному документу
          if getfirst KatSopr = tsOk and getfirst KatPodr = tsOk
           {
           DBFPutFieldValue(MonHandle,'PodrOtpr', KatPodr.Name );
           }
          else
           {
           DBFPutFieldValue(MonHandle,'PodrOtpr', '');
           }
          inc (i);
          DBFInsertRecord (MonHandle);



             vStopFlag := not NextVisual;
              if vStopFlag
              {
                DBFClose(MonHandle);

                StopVisual('',0);
                xlKillExcel;
                Exit;
              }

      };
    };

    DBFClose(MonHandle);
    if i > ExcelMaxVol Mode3Need := true;
! ----------------------  обработка  ------------------------------
    if InitExcel
    {
        if not TerminateExcel
        {
            vErrorFlag  := True;
            vErrorDescr := 'Ошибка закрытия Excel-файла.'
        }
    }
    else
    {
        vErrorFlag  := True;
        vErrorDescr := 'Ошибка инициализации Excel-файла. Возможно не найден шаблон.' + chr(13) + 'Данные выгружены в файл '+ vDataFilePathName
    }
    StopVisual('',0);

}
