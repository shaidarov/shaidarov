#include QueryLog.vih

Interface vipQueryLog;

  create view;

  const
    prefix = 'vipQueryLog: ';
  end

  procedure WriteQueryLog(FileName : string; Query : IQuery);
  {
    var StartTime : longint;
    var FetchTime : longint;

    var ExecuteErrorCode : longint;
    var FetchErrorCode : longint;

    var ParamIndex : integer;
    var ColIndex : integer;

    LogStrToFile(FileName, prefix + '-----------------------------------------------------------------------------');
    LogStrToFile(FileName, prefix + 'Вызов Query.Execute');

    StartTime := To_Sec100(Cur_Time);
    ExecuteErrorCode := Query.Execute.ErrorCode;

    LogStrToFile(FileName, prefix + 'ExecuteTime = ' + string( (To_Sec100(Cur_Time) - StartTime) / 100 ) + ' секунд');
    LogStrToFile(FileName, prefix + 'ExecuteErrorCode = ' + string(ExecuteErrorCode));


    LogStrToFile(FileName, prefix + 'Query.RowCount = ' + string(Query.RowCount));
    LogStrToFile(FileName, prefix + 'Query.Row.Count = ' + string(Query.Row.Count));
    LogStrToFile(FileName, prefix + 'Query.params.count = ' + string(Query.params.count));

    for( ParamIndex := 1; ParamIndex <= Query.params.count; ParamIndex++ )
    {
      LogStrToFile(FileName, prefix + 'ParamIndex = ' + string(ParamIndex));
      LogStrToFile(FileName, prefix + 'Param.Name = ' + string(Query.params.ParamAt(ParamIndex).Name));
      LogStrToFile(FileName, prefix + 'Param.Value = ' + string(Query.params.ParamAt(ParamIndex).Value));
    }

    if( ExecuteErrorCode = tsOk )
      do
      {
        LogStrToFile(FileName, prefix + '  Вызов Query.Fetch');

        FetchTime := To_Sec100(Cur_Time);
        FetchErrorCode := Query.Fetch.ErrorCode;
        FetchTime := To_Sec100(Cur_Time) - FetchTime;

        LogStrToFile(FileName, prefix + '  FetchErrorCode = ' + string(FetchErrorCode));
        LogStrToFile(FileName, prefix + '  FetchTime = ' + string(FetchTime/ 100 ) + ' секунд');

        //if (FetchErrorCode = tsOk)
        //{
          for( ColIndex := 1; ColIndex <= Query.row.count; ColIndex++ )
            LogStrToFile(FileName, '    ' + Query.row.colAt(ColIndex).name + ' = ' + string(Query.row.colAt(ColIndex).value));
        //}

      } while( FetchErrorCode = tsOk );

    LogStrToFile(FileName, prefix + 'TotalTime = ' + string( (To_Sec100(Cur_Time) - StartTime) / 100 ) + ' секунд');

    LogStrToFile(FileName, prefix + '-----------------------------------------------------------------------------');
  }

  constructor CreateLog(Query : IQuery);
  {
    var FileName : string;

    case GetDbPlatformType of
      dbptOracle:
        FileName := 'ora90drv.log';

      dbptMSSQL:
        FileName := 'ms70drv.log';

      dbptBtrieve:
        FileName := 'psql9drv.log';

      else
        FileName := 'QueryLog.log';
    end;

    if( ExistFile(FileName) )
      DeleteFile(FileName);

    WriteQueryLog(FileName, Query);

    if( ExistFile(FileName) )
      ProcessText(FileName, vfDefault, FileName);


    result := true;
  }

End.
