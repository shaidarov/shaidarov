//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 5.85 - логистика
// Функции для работы с маркерами и таблицами PickRep, Pick при выборе фильтров
//********************************************************************************

Procedure DelPickRep(wListSour : word);
{
  delete PickRep where (( UserName         == PickRep.OwnName      and
                          UserDeskRep.nRec == PickRep.cUserDeskRep and
                          wListSour        == PickRep.wList ));
}

// Пересчет выбранных элементов в PickRep
Function CountPickRep(wListSour : word) : word;
var
  t : word;
{
  t := 0;

  _LOOP PickRep where (( UserName         == PickRep.OwnName      and
                         UserDeskRep.nRec == PickRep.cUserDeskRep and
                         wListSour        == PickRep.wList ))
    t++;

  CountPickRep := t;
}

// Перегон из Marker'а в PickRep
Procedure Marker2PickRep(mrkName : string; wList : word; var cRescomp : comp; var NumPick : word);
var
  cMarker, i, cCount : longint;
  PickRec            : comp;
{
  cMarker := InitMarker(mrkName, 8, 100, 10);
  NumPick := 0;
  cCount  := GetMarkerCount(cMarker);

  FOR(i := 0; i < cCount; i++)
    if GetMarker(cMarker, i, PickRec)
      {
        ClearBuffer(#PickRep);

        PickRep.OwnName      := UserName;
        PickRep.wList        := wList;
        PickRep.cRec         := PickRec;
        PickRep.PickNum      := i;
        PickRep.cUserDeskRep := UserDeskRep.nRec;

        if ( insert current PickRep = tsOk )
          NumPick++;
      }

  if ( NumPick = 1 )
    {
      set cRescomp := PickRep.cRec;
      DelPickRep(wList);
    }
  else
    set cRescomp := 0;

  DoneMarker(cMarker, mrkName);
}

Procedure Marker2PickRepEx(mrkName : string; wList : word; var NumPick : word);
var
  cMarker, i, cCount : longint;
  PickRec            : comp;
{
  cMarker := InitMarker(mrkName, 8, 100, 10);
  NumPick := 0;
  cCount  := GetMarkerCount(cMarker);

  FOR(i := 0; i < cCount; i++)
    if GetMarker(cMarker, i, PickRec)
      {
        ClearBuffer(#PickRep);

        PickRep.OwnName      := UserName;
        PickRep.wList        := wList;
        PickRep.cRec         := PickRec;
        PickRep.PickNum      := i;
        PickRep.cUserDeskRep := UserDeskRep.nRec;

        if ( insert current PickRep = tsOk )
         NumPick++;
      }

  DoneMarker(cMarker, mrkName);
}

// Перегон из PickRep в Marker
Procedure PickRep2Marker (mrkName : string; wList : word; cRescomp : comp);
// cRescomp = 0 если множ.выбор и <> 0 если единичный
var
  cMarker : longint;
{
  cMarker := InitMarker(mrkName, 8, 100, 10);

  ClearMarker(cMarker);

  if ( cRescomp = 0 )
    {
      _LOOP PickRep where (( UserName         == PickRep.OwnName      and
                                      UserDeskRep.nRec == PickRep.cUserDeskRep and
                                      wList            == PickRep.wList ))
        InsertMarker(cMarker, PickRep.cRec);
    }
  else
    InsertMarker(cMarker, cRescomp);

  DoneMarker(cMarker, mrkName);
}

Procedure Pick2PickRepBody(bZero : boolean; wListSour, wListDest : word; var cRescomp : comp; var NumPick : word);
{
  NumPick := 0;

  _LOOP Pick where (( wListSour == Pick.wList ))
    {
      // Не включаем нулевые нреки
      if ( not bZero and ( Pick.cRec = 0 ) )
        Continue;

      ClearBuffer(#PickRep);

      PickRep.nRec         := 0;
      PickRep.OwnName      := UserName;
      PickRep.wList        := wListDest;
      PickRep.cRec         := Pick.cRec;
      PickRep.PickKol      := Pick.PickKol;
      PickRep.PickNum      := Pick.PickNum;
      PickRep.cUserDeskRep := UserDeskRep.nRec;

      if ( insert current PickRep = tsOk )
        NumPick++;
    }

  if ( NumPick = 1 )
    {
      cRescomp := PickRep.cRec;
      DelPickRep(wListDest);
    }
  else
    cRescomp := 0;
}

Procedure Pick2PickRep(wListSour, wListDest : word; var cRescomp : comp; var NumPick : word);
{
  Pick2PickRepBody(False, wListSour, wListDest, cRescomp, NumPick);
}

//  (Pick.cRec = 0)  тоже копируется
Procedure Pick2PickRepEx(wListSour, wListDest : word; var cRescomp : comp; var NumPick : word);
{
  Pick2PickRepBody(True, wListSour, wListDest, cRescomp, NumPick);
}

Procedure PickRep2Pick(wListSour, wListDest : word; var cRescomp : comp);
{
  if ( cRescomp = 0 )
    _LOOP PickRep where (( UserName         == PickRep.OwnName and
                                    UserDeskRep.nRec == PickRep.cUserDeskRep and
                                    wListSour        == PickRep.wList ))
      {
        ClearBuffer(#Pick);

        Pick.nRec    := 0;
        Pick.wList   := wListDest;
        Pick.cRec    := PickRep.cRec;
        Pick.PickKol := PickRep.PickKol;
        Pick.PickNum := PickRep.PickNum;

        insert current Pick;
      }
  else
    {
      ClearBuffer(#Pick);

      Pick.nRec    := 0;
      Pick.wList   := wListDest;
      Pick.cRec    := cRescomp;
      Pick.PickKol := 0;
      Pick.PickNum := 0;

      insert current Pick;
    }
}

Procedure DelPick(wListSour: word);
{
  delete Pick where (( wListSour == Pick.wList ));
}

// Заполнение маркера KatOrgDescr на основе маркера KatOrg
Procedure SetKatOrgDescrMarker;
var
  cKatOrg, cKatOrgDescr, mCount, i : longint;
  cRec                             : comp;
{
  cKatOrg      := InitMarker('KatOrg',      8, 100, 10);
  cKatOrgDescr := InitMarker('KatOrgDescr', 8, 100, 10);

  ClearMarker(cKatOrgDescr);

  mCount := GetMarkerCount(cKatOrg);

  FOR(i := 0; i < mCount; i++)
  {
    if GetMarker(cKatOrg, i, cRec)
      if ( GetFirst FastFirstRow KatOrgDescr where (( cRec == KatOrgDescr.cRec )) = tsOk )
        InsertMarker(cKatOrgDescr, KatOrgDescr.nRec);
  }

  DoneMarker(cKatOrg,      'KatOrg');
  DoneMarker(cKatOrgDescr, 'KatOrgDescr');
}

//------------------------------------------------------------------------------
Function CopyPickInMarker(pwList: word; strNameMarker: string) : longint;
var
  i
, MrkPickedList : longint;
{
  i := 0;
  // сохраняем в маркер, то что есть в Pick.wList = pwList
  MrkPickedList := InitMarker(strNameMarker, 8, 100, 10, False);
  ClearMarker(MrkPickedList);

  if ( RecordExists Pick where (( pwList == Pick.wList )) = tsOk )
    _Loop Pick where (( pwList == Pick.wList ))
    {
      InsertMarker(MrkPickedList, Pick.cRec);
      i := i + 1;
    }

  if ( i > 0 )
    DoneMarker(MrkPickedList, strNameMarker);
  else
    DoneMarker(MrkPickedList, '');

  CopyPickInMarker := i;
};

//------------------------------------------------------------------------------
// pwMode = 0 - удалять из Pick, очистить маркер после восстановления Pick
//          1 - удалять из Pick
//          2 - очистить маркер после восстановления Pick
Function CopyMarkerInPick(strNameMarker: string; pwList, pwMode: word) : longint;
var
  MrkPickedList : longint;
  boRestorePick : boolean;
  mCount
, i
, iNum
, iPrevNum : longint;
  cRecElem : comp;
{
  if ( Trim(strNameMarker) = '')
    Exit;

  boRestorePick    := False;
  CopyMarkerInPick := 0;

  MrkPickedList := InitMarker(strNameMarker, 8, 100, 10, False);
  mCount        := GetMarkerCount(MrkPickedList);

  if ((pwMode = 0) OR ((pwMode AND 1) = 1))
    DelPick( pwList );

  iPrevNum := 0;

  if Not ((pwMode = 0) OR ((pwMode AND 1) = 1))
    if ( GetLast FastFirstRow Pick where ((pwList == Pick.wList)) = tsOk )
      iPrevNum := Pick.PickNum;

  FOR(i := 0; i < mCount; i++)
    if GetMarker(MrkPickedList, i, cRecElem)
      {
        iNum++;

        ClearBuffer(tnPick);

        Pick.wList   := pwList;
        Pick.PickNum := iPrevNum + iNum;
        Pick.PickKol := 0;
        Pick.cRec    := cRecElem;

        if ( insert current Pick <> tsOk )
          iNum--;
      }

  if ((pwMode = 0) OR ((pwMode AND 2) = 2))
    ClearMarker(MrkPickedList);

  DoneMarker(MrkPickedList, strNameMarker);

  CopyMarkerInPick := iNum;
}