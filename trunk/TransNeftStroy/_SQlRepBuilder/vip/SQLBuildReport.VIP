//********************************************************************************
//
// Галактика 8.1 - Отчеты пользователя
// Отчеты на DSQL запросах
// Автор Стрельцов С.А. (отдел ПНР) 2012 год
//********************************************************************************
//--------------------------------------------- основной интерфейс -------------------------------------------
#include ViewResult.vih
#include SQLSetFilts.vih
#include SQLFilts.vih
#include Query.vih
#include SQLBuildReport.vih
#include SQLPrintToXLT.vih
#include GetKau.vih            // Обьектный интерфес выбора КАУ
#include PickUsers.vih
#include GetNotKAUFiltr.vih
/*использование полей таблицы OborCFG
  COLUMN - Дескрипторы пользователей который могут видеть и получать отчет
*/
Interface SQLBuildReport 'Отчеты на DSQL запросах', EscClose, Cyan;
 Show at (,,,20);


  File WorkFile;
  File MacroFile;
#include GetKau.var     // Переменная типа "Интерфеса выбора КАУ"
table struct InsToFrom
(
  Num  : word,
  name : string
)
with index
(
  i0 = Num
)
;
var
  wSQLSetFilts : SQLSetFilts;
// wSQLFilts : SQLFilts;
  Stroka, sXLTFileName,ID : string;

  SQLPrint : SQLPrintToXLT;
  strQuery: longint;
  iGetNotKAUFiltr : GetNotKAUFiltr;
Create view
var
 SelUsers, SelAdmins : string;
 CntPick : word;
 NumPick : word;

 bFileOpen : boolean;
 cOborCFG : comp;
 ExecuteErrorCode : longint;
 _ColumnCol : LongInt;
 Cnt_sString,
 Cnt_dDouble,
 Cnt_cComp,
 Cnt_wWord,
 Cnt_dDate,
 Cnt_tTime : word;
 TypeAccess : word;
 sDescr, sDesgr : string;
 testmemo : string;
 SelModul :string;
// wViewResult : ViewResult;
As Select

/* if (OborCfg.IFILTER[1] = 0, 'Excel-файл: ' + OborCFG.column,
                             'Excel-шаблон: '+ OborCFG.column)
                                             (FieldName = CaseShablon),  */
 if (OborCfg.IFILTER[1] = 0, 'Excel-файл: ' + OborCFG.column,
                             'Excel-шаблон: '+ OborCFG.column)
                                             (FieldName = sShablon),
 *
from
  OborCfg,
//  OborCfg snOborCfg,
  TableCaption,
  tempView,
  AttrNam,
  AttrVal,
  AttrNam SelectAttrNam,
  AttrVal SelectAttrVal,
  AttrNam MacrosAttrNam,
  AttrVal MacrosAttrVal,

  AttrVal AttrLog,
  OborPick,
  oborpick OborPickAdmin,
  OborPick OborPickAdminGrp,
  UserDeskRep,
  PickREp,
  ContourComponents,

  x$users,
  Groups

 where
((
        cOborCFG    == OborCfg.Nrec
   and 'SQl-запрос' == SelectAttrNam.Name
   and word(9400)   == SelectAttrNam.WTABLE
   and word(9400)   == SelectAttrVal.WTABLE
   and OborCfg.Nrec == SelectAttrVal.cRec
   and SelectAttrNam.Nrec == SelectAttrVal.CATTRNAM

   and 'Макрос'     == MacrosAttrNam.Name
   and word(9400)   == MacrosAttrNam.WTABLE
   and word(9400)   == MacrosAttrVal.WTABLE
   and OborCfg.Nrec == MacrosAttrVal.cRec
   and MacrosAttrNam.Nrec == MacrosAttrVal.CATTRNAM

   and    UserName      == UserDeskRep.OwnName
   and OborCFG.Nrep + cgReport_30000  == UserDeskRep.nRep

    and OborCfg.Nrec   == OborPickAdmin.cOborCfg
    and              6 == OborPickAdmin.wList

    and OborCfg.Nrec   == OborPickAdminGrp.cOborCfg
    and              7 == OborPickAdminGrp.wList
    and UserID == GROUPUSERS.USERCODE
))
;
procedure ReDrawWin; forward;

function CreateTMPFiltTable(_Num : word):boolean;
{
  var strID   : LongInt;  strID   := 0;
  sqlFreeStr(strID);
  strID:=0;
  CreateTMPFiltTable := false;
  sqlAddStr(strID, 'table tblFilt'+_Num);
  sqlAddStr(strID, '(');
  sqlAddStr(strID, ' cRec: comp');
  sqlAddStr(strID, ' sVal: string');
  sqlAddStr(strID, ')');
  sqlAddStr(strID, 'with index');
  sqlAddStr(strID, '(');
  sqlAddStr(strID, ' a0 = cRec');
  sqlAddStr(strID, ');');
  sqlDropTmpTable('tblFilt'+_Num);
  if sqlCreateTmpTable(strID, ctmNormal) = tsOk
  {
    CreateTMPFiltTable := true;
  }
  if CreateTMPFiltTable
  {
  _loop PickRep where ((UserName         == PickRep.OwnName and
                        UserDeskRep.NRec == PickRep.cUserDeskRep and
                        _Num             == PickRep.wList
                                   ))
     sqlExecDirect('INSERT INTO tblFilt'+_Num+' (cRec) VALUES (' + ' #comp(' + string(PickRep.cRec) + '))');
    //  CreateTMPFiltTable := true;
  }
}

function CreateFilt;
{
 var i,KolPick : word;
 for (i:=1;i<=7;i++)
 {
   if OborCFG.WFILTER[i] <> word(0) or LongInt(OborCFG.iDouble[i]) <> 0
   {
     KolPick:=0;
     _loop PickRep where ((UserName         == PickRep.OwnName and
                           UserDeskRep.NRec == PickRep.cUserDeskRep and
                             i              == PickRep.wList))
     {
       KolPick++;
     }
     if KolPick > 1
     {
       CreateTMPFiltTable(i);
     }
   }

 }
}


function ReBuildStr(_Str:string) : string;
{
  var FltName, FltParam : string;
  var Marker, num, gliPickedCount, k : longint;
 // var MarkerName: string;
  var cSelPos : comp;
  var p1, p2, p3 : word;
  var s1 : string;

  ReBuildStr := '';
   if InStr('#fpdate',LoCase(_Str)) > 0
   {
      p1 := InStr('#fpdate',LoCase(_Str))-1;
      s1 := SubStr(_Str, p1, Length(_Str)-p1+1);
      p2 := InStr('(',s1);
      p3 := InStr(')',s1);
      FltParam := Trim(SubStr(s1,p2+1,p3-p2-1));

      _Str := SubStr(_Str,1,p1) + FltParam+ ' between #date('+DateToStr(UserDeskRep.RESDATE[1],'DD,MM,YYYY')+') and'+
                                    ' #date('+DateToStr(UserDeskRep.RESDATE[2],'DD,MM,YYYY')+') '
                                    + SubStr(s1,p3+1,Length(_Str)-p3);

  //    sqlAddStr(strQuery, s);
    }
/*
    {
      FltName  := Trim(SubStr(s,InStr('#fpdate',LoCase(s)),7));      //#fpdate(KatSopr.dOpr)
      FltParam := Trim(SubStr(s,InStr('#fpdate',LoCase(s))+8,InStr(')',s)-(InStr('#fpdate',LoCase(s))+8)));
 //     s := replace(s,'#fdate1',' #date('+DateToStr(OborCFG.IDATE[0],'DD,MM,YYYY')+')');

      s := FltParam+ ' between #date('+DateToStr(OborCFG.IDATE[0],'DD,MM,YYYY')+') and'+
                                    ' #date('+DateToStr(OborCFG.IDATE[1],'DD,MM,YYYY')+')';
      sqlAddStr(strQuery, s);
    }*/
    if InStr('//',_Str) > 0
    {
      if InStr('//',_Str) > 1
        _Str:= SubStr(_Str,1, InStr('//',_Str)-1)
      else
        _Str:=' ';
    }

    if InStr('--',_Str) > 0
    {
      if InStr('--',_Str) > 1
        _Str:= SubStr(_Str,1, InStr('--',_Str)-1)
      else
        _Str:=' ';
    }
      //-------------------------------
    if InStr('#date_s',LoCase(_Str)) > 0
    {
      _Str:= Replace(LoCase(_Str), '#date_s' ,'#date('+DateToStr(UserDeskRep.RESDATE[1],'DD,MM,YYYY')+')');
    }
    //-------------------------------
    if InStr('#date_po',LoCase(_Str)) > 0
    {
      _Str:= Replace(LoCase(_Str), '#date_po' ,'#date('+DateToStr(UserDeskRep.RESDATE[2],'DD,MM,YYYY')+')');
    }
    if InStr('#date1',LoCase(_Str)) > 0
    {
      _Str:= Replace(LoCase(_Str), '#date1' ,'#date('+DateToStr(UserDeskRep.RESDATE[3],'DD,MM,YYYY')+')');
    }

    if InStr('#filt',LoCase(_Str)) > 0
    {
      FltName  := Trim(SubStr(_Str,InStr('#filt',LoCase(_Str)),6));  // вырезаем имя фильтра
      p1 := InStr('#filt',LoCase(_Str))-1;
      s1 := SubStr(_Str, p1, Length(_Str)-p1+1);
      p2 := InStr('(',s1);
      p3 := InStr(')',s1);
      FltParam := Trim(SubStr(s1,p2+1,p3-p2-1));
       // FltParam := Trim(SubStr(s,InStr('#filt',LoCase(s))+7,InStr(')',s)-(InStr('#filt',LoCase(s))+7)));
      num := word(SubStr(FltName,6,1));  // получаем номер фильтра
      gliPickedCount := 0;
      _loop PickRep where ((UserName         == PickRep.OwnName and
                            UserDeskRep.NRec == PickRep.cUserDeskRep and
                            Num              == PickRep.wList
                          ))
        gliPickedCount++;
        //MarkerName := iGetKau.GetMarkerName(OborCFG.WFILTER[num]);
        // MarkerName := 'SQL_Build_f'+num+MarkerName;
        //Marker := InitMarker(MarkerName, 8, 100, 5);
      //  gliPickedCount := UserDeskRep.NumPick//GetMarkerCount(Marker);

      case gliPickedCount of
      0:
      {
        //  DoneMarker(Marker, MarkerName);
        _Str := Trim(SubStr(_Str,1,p1))+' '+ num + '=' +num+ Trim(SubStr(s1,p3+1,Length(_Str)-p3))+' ';
       //   sqlAddStr(strQuery, SubStr(s,1,p1) +' '+FltParam+' = '+FltParam+' ' + SubStr(s1,p3+1,Length(s)-p3));
       //   message(SubStr(s,1,p1) +' ' + SubStr(s1,p3+1,Length(s)-p3));
         // sqlAddStr(strQuery,FltParam+' = '+FltParam);
      }
      1:
      {
         //GetMarker(Marker, k, cSelPos);
        if GetFirst PickRep where ((UserName               == PickRep.OwnName and
                                    UserDeskRep.NRec == PickRep.cUserDeskRep and
                                    Num              == PickRep.wList
                                   ))= tsOk
        {
         // дескрипторы только текст
         if LongInt(OborCFG.iDouble[num]) = cgiPickNotKAU + 1
           _Str := SubStr(_Str,1,p1) +' '+FltParam +' = ' +''''+iGetNotKAUFiltr.GetValByNrec(OborCFG.iDouble[num],PickRep.crec)+''''
                                               +' '+SubStr(s1,p3+1,Length(_Str)-p3);
         else
           _Str := SubStr(_Str,1,p1) +' '+FltParam +' = #comp('+String(PickRep.cRec)+')'
                                               +' '+SubStr(s1,p3+1,Length(_Str)-p3);
   //       message(SubStr(s,1,p1) +' '+FltParam +' = #comp('+String(cSelPos)+')'
   //                                            +' '+SubStr(s1,p3+1,Length(s)-p3));
        }
      }
      else
      {
        k:=0;
        _Str := Trim(SubStr(_Str,1,p1))+' '+FltParam +' IN(';
        sqlAddStr(strQuery,_Str);
         // For (k:=0; k<gliPickedCount; k++  )
        _loop PickRep where ((UserName         == PickRep.OwnName and
                              UserDeskRep.NRec == PickRep.cUserDeskRep and
                              Num              == PickRep.wList
                               ))
        {
          k++;
          //GetMarker(Marker, k, cSelPos);

          if LongInt(OborCFG.iDouble[num]) = cgiPickNotKAU + 1
          {
            if k < gliPickedCount
              sqlAddStr(strQuery, '''' + iGetNotKAUFiltr.GetValByNrec(OborCFG.iDouble[num],PickRep.crec) + '''');
            else
              sqlAddStr(strQuery, '''' + iGetNotKAUFiltr.GetValByNrec(OborCFG.iDouble[num],PickRep.crec) + ''''+')');
          }
          else
          {
            if k < gliPickedCount
              sqlAddStr(strQuery, ' #comp('+String(PickRep.cRec)+'), ');
            else
              sqlAddStr(strQuery, ' #comp('+String(PickRep.cRec)+'))');
          }
        }
       _Str := SubStr(s1,p3+1,Length(_Str)-p3)
      }
      end;
    }
      //--------------------------------
  if InStr('#fpdate',LoCase(_Str)) > 0
     or InStr('#filt',LoCase(_Str)) > 0
     or InStr('//',_Str) > 0
     or InStr('--',_Str) > 0
     or InStr('#date_s',LoCase(_Str)) > 0
     or InStr('#date_po',LoCase(_Str)) > 0
    _Str:=ReBuildStr(_Str);
  ReBuildStr := _Str
 //   message(s);
}
function ReadSql : longint;
{
  var s: string;
  s:='';
  ReadSql := 0;
  strQuery := 0;
  sqlFreeStr(strQuery);
  WorkFile.seek(0);
  SetVisualHeader ('Заполнение временных таблиц...');
  if OborCFG.iFILTER[4] <> 0
    CreateFilt;
  SetVisualHeader ('Чтение запроса...');
  while not WorkFile.EOF do
  {
    WorkFile.ReadLn(s);
    s := ReBuildStr(s);
    if s <> ''
      sqlAddStr(strQuery,s);
  }
  ReadSql := strQuery;
}

procedure GetRow( row : IResultRow );
  {
   var iCol : integer;
   var str : string;
   var ResCol : IResultCol;
   var CapType : word;
   Cnt_sString := 0;
   Cnt_dDouble := 0;
   Cnt_cComp  := 0 ;
   Cnt_wWord  := 0;
   Cnt_dDate  := 0;
   Cnt_tTime  := 0;
   // пробегаем по всем колонкам результата
   // записываем название поля, тип
   // его порядковый номер в запросе будет равен индексу в таблицу
   // а порядковый номер в таблице по типу будет в fldOrd
   _ColumnCol := row.count;

   if GetFirst TableCaption <> tsOk
   {
     ClearBuffer(#TableCaption);
     for( iCol:=1; iCol<=row.count; iCol++)
     {
       ResCol := row.colAt(iCol);
       if InSTR('F$',ResCol.name) = 1
         tableCaption.fldName[iCol] := SubStr(ResCol.name,3,Length(ResCol.name));
       else
         tableCaption.fldName[iCol] := ResCol.name;

       case ResCol.dtype of
       ftComp:                        //COMP
       {
         Cnt_cComp++;
         tableCaption.fldOrd[iCol] := Cnt_cComp;
         CapType := ResCol.dtype;
       }
        ftChar,ftString,ftZString:                        //STRING
       {
         Cnt_sString++;
         tableCaption.fldOrd[iCol] := Cnt_sString;
         CapType := ResCol.dtype;
       }
       ftSingle,ftDouble:                        //DOUBLE
       {
         var d1 : date;
         var t1 : time;
         d1 := LongtoDate(ResCol.Value);
         if (InStr('DATE',UpCase(ResCol.name))>0)
         {
           Cnt_dDate++;
           tableCaption.fldOrd[iCol] := Cnt_dDate;
           CapType := ftDate;
         }
         else
         {
           t1 := LongtoTime(ResCol.Value);
           if (InStr('TIME',UpCase(ResCol.name))>0)
           {
             Cnt_tTime++;
             tableCaption.fldOrd[iCol] := Cnt_tTime;
             CapType := ftTime;
           }
           else
           {
             Cnt_dDouble++;
             tableCaption.fldOrd[iCol] := Cnt_dDouble;
             CapType := ResCol.dtype;
           }
         }
       }
       ftByte,ftWord,ftInteger, ftLongInt:                         // WORD !!!DATE TIME!!!
       {
         var d1 : date;
         var t1 : time;
         d1 := LongtoDate(ResCol.Value);
         if (InStr('DATE',UpCase(ResCol.name))>0)
         {
           Cnt_dDate++;
           tableCaption.fldOrd[iCol] := Cnt_dDate;
           CapType := ftDate;
         }
         else
         {
           t1 := LongtoTime(ResCol.Value);
           if (InStr('TIME',UpCase(ResCol.name))>0)
           {
             Cnt_tTime++;
             tableCaption.fldOrd[iCol] := Cnt_tTime;
             CapType := ftTime;
           }
           else
           {
             Cnt_wWord++;
             tableCaption.fldOrd[iCol] := Cnt_wWord;
             CapType := ResCol.dtype;
           }
         }
       }
       ftTime:
       {
         Cnt_tTime++;
         tableCaption.fldOrd[iCol] := Cnt_tTime;
         CapType := ftTime;
       }
       ftDate:
       {
          Cnt_dDate++;
          tableCaption.fldOrd[iCol] := Cnt_dDate;
          CapType := ResCol.dtype;
 
       }
       else  // если тип не определен то пусть будет String
       {
         Cnt_sString++;
         tableCaption.fldOrd[iCol] := Cnt_sString;
         CapType := ftString;
       }
       
       end;
       tableCaption.fldType[iCol] := CapType;
     }
     insert current TableCaption;
   }
   Cnt_sString := 0;
   Cnt_dDouble := 0;
   Cnt_cComp  := 0 ;
   Cnt_wWord  := 0;
   Cnt_dDate  := 0;
   Cnt_tTime  := 0;
   ClearBuffer(#tempView);
   for( iCol:=1; iCol<=row.count; iCol++)
   {
     str := '';
     ResCol := row.colAt(iCol);
     case ResCol.dtype of
     ftComp:                        //COMP
     {
       Cnt_cComp++;
       tempView.cComp[Cnt_cComp] := ResCol.value;
     }
     ftChar,ftString,ftZString:                        //STRING
     {
       Cnt_sString++;
       tempView.sString[Cnt_sString] := ResCol.value;
     }
     ftSingle,ftDouble:                        //DOUBLE
     {
       var d1 : date;
       var t1 : time;
       d1 := LongtoDate(ResCol.Value);
       if (InStr('DATE',UpCase(ResCol.name))>0)
       {
         Cnt_dDate++;
         tempView.dDate[Cnt_dDate] := d1;
       }
       else
       {
         t1 := LongtoTime(ResCol.Value);
         if (InStr('TIME',UpCase(ResCol.name))>0)
         {
           Cnt_tTime++;
           tempView.tTime[Cnt_tTime] := t1;
         }
         else
         {
           Cnt_dDouble++;
           tempView.dDouble[Cnt_dDouble] := ResCol.value;
         }
       }
     }
     ftByte,ftWord,ftInteger, ftLongInt:                         // WORD !!!DATE TIME!!!
     {
       var d1 : date;
       var t1 : time;
       d1 := LongtoDate(ResCol.Value);
       if (InStr('DATE',UpCase(ResCol.name))>0)
       {
         Cnt_dDate++;
         tempView.dDate[Cnt_dDate] := d1;
       }
       else
       {
         t1 := LongtoTime(ResCol.Value);
         if (InStr('TIME',UpCase(ResCol.name))>0)
         {
           Cnt_tTime++;
           tempView.tTime[Cnt_tTime] := t1;
         }
         else
         {
           Cnt_wWord++;
           tempView.wWord[Cnt_wWord] := ResCol.value;
         }
       }
     }
     ftDate:
     {
       Cnt_dDate++;
       tempView.dDate[Cnt_dDate] := _GetDate(ResCol.Value);
     }
     ftTime:
     {
        Cnt_tTime++;
        tempView.tTime[Cnt_tTime] := _GetTime(ResCol.Value);
     }
     else  // если тип не определен то пусть будет String
     {
       Cnt_sString++;
       tempView.sString[Cnt_sString] := ResCol.value;
     }
     end;
    // d1 := ResCol.Value;
    // LogStrToFile('tempView.log',ResCol.name +' ' +ResCol.dtype+' '+d1)
   }
   insert current tempView;
  }
function FileName : string;
{
    case GetDbPlatformType of
      dbptOracle:
        FileName := 'ora90drv.log';

      dbptMSSQL:
        FileName := 'ms70drv.log';

      dbptBtrieve:
        FileName := 'psql9drv.log';

#ifdef Gal9_1
      dbptPostgre :
        FileName := 'PG90DRV.LOG';
#end
      else
        FileName := 'QueryLog.log';
    end;
}
procedure ErrorMessage(_ErrorCode : LongInt);
{
    Message('Ошибка ('+ _ErrorCode + ') выполнения запроса.'#13
             +'Смотрите '+FileName ,Error)
}

procedure ErrorOrNullMessage(_ErrorCode : LongInt);
{
    Message('Нет данных для построения отчета',Information);
/*    Message('Нет данных для построения отчета или'#13
            +'Ошибка ('+ _ErrorCode + ') выполнения запроса.'#13
            +'Смотрите '+FileName ,Error)  */
}

function GetResult(_q : IQuery) : boolean;
{
  Result :=true;
  var FetchErrorCode : longint;
  var FirstFetch : boolean;           //иначе не ругается на группировки и т.д.
                                      //так проверяем если валиться на первой строке.
  SetVisualHeader ('Выгрузка данных...');
  FirstFetch := true;
  do
  {
     if (NOT NextVisual)
    {
      Result := false;
      PutCommand(cmError);
      if (VisualizationActive())
        stopvisual('',0);
      Exit;
    }

    FetchErrorCode := _q.Fetch.ErrorCode;
    if FetchErrorCode = tsOk
    {
      FirstFetch := false;
      if _q.row.count > 100
      {
        message('Максимальное количество полей 100'#13+
             'У Вас '+_q.row.count+''#13+
             'Отчет не может быть построен',Error);
        Result := false;
        exit;

      }
      GetRow( _q.row );
    }
    else
    {
      if FirstFetch
      {
        ErrorOrNullMessage(FetchErrorCode);
        Result := false;
      }
    }
  }
  while( FetchErrorCode = tsOk )
}

function ExecuteSQl(_strQuery : longint) : boolean;
{
  var q : IQuery;
  result := true;
  var StartTime : longint;
  var FetchTime : longint;
  if GetDbPlatformType = dbptBtrieve
  {
    message('Выполнение Direct SQL запросов на данной СУБД не поддерживается', Error);
    Exit;
  }
  SetVisualHeader ('Выполнение запроса...');
  StartTime := To_Sec100(Cur_Time);
  q := queryManager.createQuery(_strQuery);
  ExecuteErrorCode := q.Execute.ErrorCode;
  if ExecuteErrorCode = tsOk
  {
    ExecuteSQl := GetResult(q);
  }
  else
  {
    result := false;
    ErrorMessage(ExecuteErrorCode);
  }
}

Function MyPickDescr(_PickedDescr : string) : string;
{
  MyPickDescr:='';
  var mkDescr, lCount,i  : LongInt;
  var cDescr : comp;
  if ( RunInterface('C_COMMON::GetSomeDescr', false) = cmDefault )
    {
      mkDescr := InitMarker('UserTuneDescr', 8, 100, 10);
      lCount  := GetMarkerCount(mkDescr);

      StartNewVisual(vtIndicatorVisual, vfTimer, '', lCount);

      for(i := 0; i < lCount; i := i + 1)
        if ( GetMarker(mkDescr, i, cDescr) )
          {
            NextVisual;
            if (Pos(' '+sDesgr+' ', _PickedDescr) = 0)
              MyPickDescr := ' '+TRim(MyPickDescr)+' '+Trim(sGetTuneEx('User.Descr', UserOfficeFilial(cDescr), cDescr))+' ';
          }

      StopVisual('' ,0);
      DoneMarker(mkDescr, 'UserTuneDescr');
    }
}
#declare ViewAccessandModul(_Table,_NameField,ViewField )
 cntPick := 0;
 #ViewField :='';
 _Loop OBORPICK where ((OborCfg.Nrec == OBORPICK.cOborCfg
                    and NumPick      ==  OBORPICK.WLIST))
 {
   cntPick++;
   if GetFirst #_Table where (( OBORPICK.cREc == #_Table.Atl_Nrec)) = tsOk
     #ViewField := #ViewField+' '+ #_Table.#_NameField;
 }
#end
procedure ViewModulsAndAccess;
{
  var  SelUsers1, sCountUsers, SelGroups, sCountGroups : string;
  var wCountGroups, wCountUsers : word;
  NumPick := 3;
  #ViewAccessandModul(ContourComponents,Name, SelModul)
  if Length(SelModul) >= 255
    SelModul := 'Выбрано '+ cntPick +' модуль(ей)';

  NumPick := 4;
  #ViewAccessandModul(x$users,xu$loginname, SelUsers1)
  wCountUsers := CntPick;
  sCountUsers := CntPick+' пользователь(ей)';

  NumPick := 5;
  #ViewAccessandModul(Groups,Name, SelGroups)
  wCountGroups := CntPick;
  sCountGroups := CntPick+' групп(ы)';

  if Length(SelUsers1) + Length(SelGroups) >= 255
  {
    if wCountUsers > 0 and wCountGroups > 0
      SelUsers := 'Выбрано '+ sCountUsers +' и '+sCountGroups;
    else
      if wCountUsers > 0
        SelUsers := 'Выбрано '+ sCountUsers
      else
        if wCountGroups > 0
          SelUsers := 'Выбрано '+ sCountGroups;
  }
  else
    SelUsers := SelUsers1 + ' ' + SelGroups;

  NumPick := 6;
  #ViewAccessandModul(x$users, xu$loginname, SelUsers1)
  wCountUsers := CntPick;
  sCountUsers := CntPick+' пользователь(ей)';

  NumPick := 7;
  #ViewAccessandModul(Groups, Name, SelGroups)
  wCountGroups := CntPick;
  sCountGroups := CntPick+' групп(ы)';

  if Length(SelUsers1) + Length(SelGroups) >= 255
  {
    if wCountUsers > 0 and wCountGroups > 0
      SelAdmins := 'Выбрано '+ sCountUsers +' и '+sCountGroups;
    else
      if wCountUsers > 0
        SelAdmins := 'Выбрано '+ sCountUsers
      else
        if wCountGroups > 0
          SelAdmins := 'Выбрано '+ sCountGroups;
  }
  else
    SelAdmins := SelUsers1 + ' ' + SelGroups;
}

Window wSetShablon 'Настройка шаблона';
Show at (, ,100 ,7);
Screen ShablonSets 'Основная'(,,sci1Esc);
fields
  OborCfg.IFILTER[1] ('Тип отчета',,sci1Esc) :
        [LIST 'Excel','Excel-шаблон'], protect;
  sShablon     ('Шаблон отчетной формы',,sci13Esc) : Protect, PickButton;
  Stroka :skip, Left;
  OborCfg.IFILTER[0] ('Номер строки',,sci1Esc) : NoProtect;
buttons
//  cmValue12,,, 'Выполнить',,;
  cmValue14,,, 'Создать',,;
  cmValue13,,, 'Настройка',,;
<<

   `Тип отчета`            .@@@@@@@@@@@@@@@@@@@@
   `Шаблон печатной формы` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   .@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@
                           <.  Создать  .>           <. Настройка  .>
>>
end;
handleEvent

cmvalue13: // настройка печати
{

  if (OborCFG.column = '')
  {
    ID := OborCfg.nRep+'_'+Replace(OborCfg.REPNAME,' ','_');
    ID := Replace(ID,'(','_');
    ID := Replace(ID,')','_');
  #ifdef Atl51
   // if not ExistDir(TranslatePath('%ClientStartPath%') + 'XLS\SQLReports')
    set sXLTFileName := '%ClientStartPath%' + 'XLS\DSQlBuildReps\' + ID + '.xlt';
  #else
    Set sXLTFileName := StartPathName + 'XLS\DSQlBuildReps\' + ID + '.xlt';
  #endif
  }
  else
    sXLTFileName := OborCFG.column;
  runinterface('F_XlsRep::xlrepsetup',1,ID,sXLTFileName);
  OborCFG.column := sXLTFileName;
  If InStr(')',OborCFG.column)>0 or InStr('(',OborCFG.column)>0
    message('В наименовании шаблона есть скобки. Макросы работать не будут', Error);
  Update current OborCfg;
}

cmValue14:
{
  //if GetFirst tableCaption <> tsok
  SQL_Run(OborCFG.Nrec);
  If InStr(')',OborCFG.column)>0 or InStr('(',OborCFG.column)>0
    message('В наименовании шаблона есть скобки. Макросы работать не будут', Error);

  SQLPrint.CreateShablon(OborCFG.Nrec);
  ReDrawWin;
}
cmPick:
{
  case (CurField) of
  #sShablon:
  {
    if OborCfg.IFILTER[1] = 0
    {
      var Path1 : string;
      Path1:=OborCFG.column;
      OborCFG.column:=GetFileName('*.xls','Excel файл');
      If (Trim(OborCFG.column)='')
        OborCFG.column:=Path1;
   //   sShablon := OborCFG.column;
  //    CaseShablon := 'Excel-файл: ' + sShablon;
      update current OborCfg;
    }
    else
    {
      if (TRim(OborCFG.column) = '')
      {
        ID := Replace(OborCfg.nRep+'_'+OborCfg.REPNAME,' ','_');
        ID := Replace(ID,'(','_');
        ID := Replace(ID,')','_');

        #ifdef Atl51
          set sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS\DSQlBuildReps\' + ID + '.xlt';
        #else
          Set sXLTFileName := StartPathName + 'XLS\DSQlBuildReps\' + ID + '.xlt';
        #endif
      }
      else
        sXLTFileName := OborCFG.column;
      runinterface('F_XlsRep::xlrepsetup',1,ID,sXLTFileName);
    //   sShablon := sXLTFileName;
      OborCFG.column := sXLTFileName;
  //     CaseShablon := 'Excel-шаблон: ' + sShablon;
      update current OborCfg;
    }
    ReDrawWin;
  }
  end;
}
end;
end;

#declare GetPickValToMarker(_MarkerName)
{
  var Marker : LongInt;
  Marker := initmarker(#_MarkerName, 8, 100, 10);
  ClearMarker(Marker);
  _loop OBORPICK where ((OborCfg.Nrec == OBORPICK.cOborCfg
                        and numPick     ==   OBORPICK.WLIST))
  {
    InsertMarker(Marker,OBORPICK.cRec)
  }
  DoneMarker(Marker,#_MarkerName);
}
#end

#declare GetPickValFromMarker(_Table,_NameField,_MarkerName,ViewField)
{
  delete OBORPICK where ((OborCfg.Nrec == OBORPICK.cOborCfg
                        and numPick      ==   OBORPICK.WLIST));
  var Marker : LongInt;
  Marker := initmarker(#_MarkerName, 8, 100, 10);
  CntPick:=0;
  _loop #_Table where foundmarker(Marker, #_Table.Atl_Nrec)
  {
    CntPick++;
    ClearBuffer(#OBORPICK);
    OBORPICK.WLIST := numPick;
    OBORPICK.cRec := #_Table.Atl_Nrec;
    OBORPICK.cOborCfg := OborCfg.Nrec;
    insert current OBORPICK;
  }

  ReDrawWin;
  ClearMarker(Marker);
  DoneMarker(Marker,#_MarkerName);
}
#end
function GetUsersAccess : string;
{
  var SelUsers1, CountUsers, SelGroups, CountGroups : string;
  case TypeAccess of
  0:
  {

    #GetPickValToMarker('RepSQLMarkerAccess')
    RunInterface(PickUsersNames,'RepSQLMarkerAccess');
    #GetPickValFromMarker(X$Users,xu$loginname,'RepSQLMarkerAccess',SelUsers1);
  }
  1:
  {
    NumPick++;
    #GetPickValToMarker('RepSQLMarkerAccess')
    RunInterface(PickUserGroups,'RepSQLMarkerAccess');
    #GetPickValFromMarker(Groups,Name,'RepSQLMarkerAccess',SelGroups);
  }
  end;
}

Window wSetAccess 'Настройки доступа',dialog,doAccept,alwaysReturn,escClose;
Show at (, ,40 ,7);
Screen scSetAccess 'Основная'(,,sci1Esc);
fields
  TypeAccess ('Тип добавления доступа',,sci1Esc) : NoProtect;
buttons
  cmOk,Default,, 'продолжить',,;
  cmCancel,,, 'Отмена',,;
<<
     Изменить:
      (.) пользователей`
      (.) группы пользователей`

   <.Продолжить.>   <.  Отмена  .>
>>
end;
HandleEvent
cmOk:
{
  PutCommand(cmDefault);
 // CloseWindow(wSetAccess);
}
end;
end;

Window wLog 'Просмотр лог';
Show at (, , ,19);
Panel paAttrLog;
  Table AttrLog;

 Text
  AttrLog.VLVAR 'Лог';
end; // Panel
end;

//------------------------------------------------------------------------------------------------------------
Window wCreateReport 'Настройка отчета';
Show at (, , ,19);
Screen Zagr_Sets 'Основная';
Show at (, , ,9);
fields
  OborCfg.nRep    ('Номер отчета',,sci1Esc) : Protect;
  Oborcfg.REPNAME ('Название отчета',,sci1Esc) : noProtect;
  SelAdmins     ('Предоставить права на изменение/удаление',,sci13Esc): Protect, PickButton;
  SelUsers    ('Предоставить права  получение отчета',,sci13Esc): Protect, PickButton;
  SelModul     ('Отчет будет видим в следующих модулях',,sci13Esc): Protect, PickButton,
        {Font = {BackColor = if(Trim(SelModul) = '',ColorNeed,0)}};
  sShablon        ('Шаблон отчетной формы',,sci13Esc) : Protect, PickButton;
  OborCFG.iFILTER[2] ('Выводить вкладку "Результат"',,sci1Esc) : NoProtect;
  OborCFG.iFILTER[4] ('Необходимо самому указывать таблицу в секции From и в подцепке',,sci1Esc) : NoProtect;
  OborCFG.iFILTER[3] ('Выполнить макрос',,sci1Esc) : NoProtect;
  OborCfg.sRep[9]    ('Выполнить макрос ',,sci13Esc): NoProtect;

buttons
  cmValue15,,, 'Лог',,;
  cmValue11,,, 'Поля',,;
<<
   `Название отчета `       .@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   `Право изменение отчета` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   `Право получение отчета` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   `Доступен в модулях`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   `Шаблон печатной формы`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] Предварительный просмотр`  [.] Фильтры во временных таблицах `          <.   Лог   .> <.   Поля  .>

   [.] После выгрузки выполнить макрос`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;
tabbedSheet bottom CreateSql
  Show at (,10, ,18);
Panel paEditSelect;
  Table SelectAttrVal;

 Text
   MemoID = mSelect SelectAttrVal.VLVAR 'Запрос':noProtect;
end; // Panel
//embedded embViewResult 'Результат' interface wViewResult end;
embedded embSQLSetFilts 'Настройка фильтров' interface wSQLSetFilts end;
//embedded embSQLFilts 'Фильтры' interface wSQLFilts end;
Panel paEditMacros;
  Table MacrosAttrVal;

 Text
   MemoID = mMacros MacrosAttrVal.VLVAR 'Макрос';
end; // Panel
end;
handleEvent
cmInit:
{
  ViewModulsAndAccess;
  WorkFile.OpenMemo(SelectAttrVal.vLvar);
  delete all from tableCaption;
  delete all from tempView;


//  wViewResult.ReDrawCaption;
//  wViewResult.ReDrawTable;
  wSQLSetFilts.ReInit(OborCFG.Nrec);
//  wSQLFilts.ReInit(OborCFG.Nrec);
}
cmValue11:
{
  var Fld : string;
  if RunInterface('PickTblFld',fld) = cmDefault
  {
    if WorkFile.GetSize > 0
      WorkFile.Seek(WorkFile.GetSize-1);
    else
      WorkFile.Seek(WorkFile.GetSize);
    WorkFile.WriteLn(' '+Trim(fld));
    update current SelectAttrVal;
  }
 ReDrawWin;
}
cmSwitchFormat:
{
  if (focusedFormat =  mSelect)
  {
    update current SelectAttrVal;
    ReDrawWin;
  }
}

cmValue12:
{
  SQL_Run(OborCFG.Nrec);
//  wViewResult.ReDrawCaption;
//  wViewResult.ReDrawTable;
}
cmValue15:
{
  ImportFileToMemo(AttrLog.VLVAR, TranslatePath(FileName) ,false);
  RunWindow(wLog);
}
cmPick:
{
  case CurField of
  #SelUsers:
  {
    if RunWindowModal(wSetAccess)= cmDefault
    {
      NumPick := 4;
      SelUsers:=GetUsersAccess;
      ViewModulsAndAccess;
    }
  }
  #SelAdmins:
  {
   if RunWindowModal(wSetAccess)= cmDefault
   {
     NumPick := 6;
     SelAdmins:=GetUsersAccess;
     ViewModulsAndAccess;
   }
  }
  #sShablon:
  {
    RunWindow(wSetShablon);
  }
  // выбор модулей видимости отчета
  #SelModul:
  {
    var SelModul1 : string;
    NumPick:=3;
    #GetPickValToMarker('RepSQLMarkerModuls')
    RunInterface(PickModulNames,SelModul,'RepSQLMarkerModuls');
    #GetPickValFromMarker(ContourComponents,name,'RepSQLMarkerModuls',SelModul1);
    ViewModulsAndAccess;
  }
  end;
 ReDrawWin;
}

cmCheckField:
{
  Case curField of
  #SelModul:
  {
    if Trim(SelModul) =''
    {
      Message('Не выбран ни один модуль - отчет будет не доступен!', Error);
    }
    ;
  }
  #Oborcfg.REPNAME:
 // #OborCfg.sRep[0],
 // #OborCFG.RepOpi:
  {
    update current OborCFG;
  }

  end;
}
cmClose:
{
  if Trim(SelModul) =''
  {
    Message('Не выбран ни один модуль - отчет будет не доступен!', Error);
    abort;
  }
  workFile.Close;
//  wViewResult.ReDrawCaption;
//  wViewResult.ReDrawTable;
}
cmCancel:
{
  if Trim(SelModul) =''
  {
    Message('Не выбран ни один модуль - отчет будет не доступен!', Error);
    abort;
  }
  workFile.Close;
//  wViewResult.ReDrawCaption;
//  wViewResult.ReDrawTable;
}
cmDone:
{
  if Trim(SelModul) =''
  {
    Message('Не выбран ни один модуль - отчет будет не доступен!', Error);
    abort;
  }
  workFile.Close;
//  wViewResult.ReDrawCaption;
//  wViewResult.ReDrawTable;
}
end;
end; // of window

procedure SetVisuals;
{
  if OborCfg.IFILTER[1] = 0
  {
    Stroka := 'Первая строка печати';
    SetFieldState(#Stroka, sfVisible);
    SetFieldState(#OborCfg.IFILTER[0], sfVisible);
    ShowButton (ShablonSets,  cmValue13, false);
    ShowButton (ShablonSets,  cmValue14, false);
    SetFieldState(#OborCFG.iFILTER[3], sfVisible);
    SetFieldState(#OborCfg.sRep[9], sfVisible);
    SetTabbedSheetVisible (mMacros,true);
  }
  else
  {
    ClearFieldState(#Stroka, sfVisible);
    ClearFieldState(#OborCfg.IFILTER[0], sfVisible);
    ShowButton (ShablonSets,  cmValue13, true);
    ShowButton (ShablonSets,  cmValue14, true);
    ClearFieldState(#OborCFG.iFILTER[3], sfVisible);
    ClearFieldState(#OborCfg.sRep[9], sfVisible);
    SetTabbedSheetVisible (mMacros,false);
  }
  /*if not ExistFile(OborCFG.column)
  {
    OborCFG.column := '';
    update current OborCFG;
  }  */
}
function SQL_Run(_cOborCFG : comp) : boolean;
{
  delete all from tableCaption;
  delete all from tempView;
  SQL_Run := true;
  if boGetTune('USERTUNE.ClearDBLog') = true
  {
    if ExistFile(FileName)
      DeleteFile(FileName);
  }
  StartNewVisual(vtRotateVisual, vftimer, '', 0);
  if GetFirst OborCFG where ((_cOborCFG == OborCFG.Nrec)) = tsOk
    if GetFirst SelectAttrNam = tsOk
      if GetFirst SelectAttrVal = tsOk
  WorkFile.OpenMemo(SelectAttrVal.vLvar);
  {
    if GetFirst UserDeskRep = tsOk
    {
      cOborCFG := _cOborCFG;
      SQL_Run := ExecuteSQl(ReadSql)
    }
  }
  if (VisualizationActive())
    stopvisual('',0);
}
procedure InsAttrs(_name : string);
{
  if GetFirst AttrNam where (( word(9400) == AttrNam.WTABLE
                              and _name == AttrNam.NAME
                             )) <> tsOk
  {
    ClearBuffer(#AttrNam);
    AttrNam.WTABLE := word(9400);
    AttrNam.NAME   := _name;
    insert current AttrNam;
  }
  if GetFirst AttrVal where (( word(9400) == AttrVal.WTABLE
                                  and AttrNam.Nrec == AttrVal.CATTRNAM
                                  and OborCfg.Nrec == AttrVal.cRec
                                  ))
                                  <> tsOk
  {
    ClearBuffer(#AttrVal);
    AttrVal.cRec     := OborCfg.Nrec;
    AttrVal.WTABLE   := word(9400);
    AttrVal.CATTRNAM := AttrNam.Nrec;

    insert current AttrVal;
  }
}
procedure InsertNew;
{
  var w :word;
  if getlast OborCfg where ((1000==OborCfg.vRep and 0<<OborCfg.nRep))=tsOk
  {
    if w>5000
    {
      message('Не возможно создать отчет так как превышен максимальный номер. Обратитесь к разработчикам', Error);
      CloseInterface(cmCancel);
    }
    else
      w:=OborCfg.nRep+1;
  }
  else
    w:=1;

  SetVisuals;
  ClearBuffer(#OborCfg);
  Stroka := 'Строка';

  OborCfg.Nrec := GetNextNrec(#OborCfg,0);
  OborCfg.vRep:=1000;
  OborCfg.nRep:=w;
  OborCFG.Descr := sGetTune('User.Descr');
  OborCFG.dRep := Cur_date;
  OborCfg.RepName:='Название отчета';
 // OborCfg.sRep[0]:=' '+sGetTune('User.Descr')+' ';
 // OborCFG.RepOpi:= ' '+sGetTune('User.Descr')+' '

  insert current OborCfg;
  cOborCFG := OborCfg.Nrec;

  InsAttrs('SQl-запрос');
  InsAttrs('Макрос');

  ClearBuffer(#OBORPICK);

  OBORPICK.cOborCfg := OborCfg.Nrec;
  OBORPICK.WLIST  := 3;
  if GetFirst ContourComponents where ((LNT_ItemName == ContourComponents.Name)) = tsOk
  {
    OBORPICK.cREc := ContourComponents.Atl_Nrec;
    SelModul := ContourComponents.Name+' ';
  }
  insert current OBORPICK;

  RunWindowModal(wCreateReport);
  ReDrawWin;

}
Procedure SQLInsert;
{
  ReDrawWin;
  InsertNew;
}

Function ColumnsCol : LongInt;
{
  ColumnsCol := _ColumnCol;
}

function HasAccessToEdit : boolean;
{
  HasAccessToEdit := false;
    if sGetTune('User.Descr') = OborCFG.Descr
      HasAccessToEdit := true
    else
      if GetFirst OborPickAdmin = tsOk or GetFirst OborPickAdminGrp = tsOk
      {       // выбран пользователь в правах редактирования
        if GetFirst OborPickAdmin where ((OborCfg.Nrec  == OborPickAdmin.cOborCfg
                                      and             6 == OborPickAdmin.wList
                                      and UserId        == OborPickAdmin.cRec(NoIndex) ))  = tsOk
          HasAccessToEdit := true;
        else  //выбрана группа пользователя в правах редактирования
          _loop OborPickAdminGrp
          {
            if GetFirst GROUPUSERS where ((OborPickAdminGrp.cRec == GROUPUSERS.GROUPCODE
                                            and UserID           == GROUPUSERS.USERCODE )) = tsOk
            {
              HasAccessToEdit := true;
              break;
            }
          }
      }
      else
        HasAccessToEdit := true;
}
Procedure SQLEdit(_cOborCFG : comp);
{
  ReDrawWin;
  var sDescr, sDesgr : string;
  cOborCFG := _cOborCFG;

  if GetFirst OborCFG where ((_cOborCFG == OborCFG.Nrec)) = tsOk
  {
      if Not HasAccessToEdit
      {
        Message('Вы не имеете прав на редактирование данного отчета!',Error);
        Exit;
      }

    Stroka := 'Строка';
    if GetFirst SelectAttrNam = tsOk
      if GetFirst SelectAttrVal = tsOk
      {
        SetVisuals;
        RunWindowModal(wCreateReport);
        RescanPanel(#OborCfg);
      }
    InsAttrs('Макрос');
    ViewModulsAndAccess;
  }

  ReDrawWin;
}
//------------------------------------------------------------------------------------------------------------

HandleEvent   // interface
cmSetDefault:
{
  InsertNew;
}

cmCheckField:
{
  Case (CurField) of
  #OborCfg.IFILTER[1]:
  {
    SetVisuals;
  }
  #OborCFG.iFILTER[2],#OborCFG.iFILTER[3],#OborCFG.iFILTER[4]:
  {
  }
  end;
  Update current OborCfg;
}
end;
// таблица OborCfg
//------------------------------------------------------------------------------------------------------------
TableEvent
Table OborCfg;
cmUpdateRecord:
  update current OborCfg;

cmDeleteRecord:
{
  if Not HasAccessToEdit
  {
    Message('Вы не имеете прав на удаление этого запроса!',Error);
    Abort;
  }
  else
    If Message('Уверены, что хотите удалить запрос "'+Trim(OborCfg.RepName)+'" ?',Warning+YesNo)=cmYes
    {
      delete from AttrVal where ((OborCfg.nRec ==AttrVal.cRec
                               and word(9400) == AttrVal.WTABLE
                               and SelectAttrNam.Nrec == AttrVal.CATTRNAM));
        delete current OborCfg;
        If getPrev OborCfg=tsOk
        { }
        RescanPanel(#OborCfg);
      }
}

cmDelOnProtect:
{
  case (CurField) of
  #sShablon:
  {
    if (ExistFile(OborCFG.column))
      if message('Удалить шаблон "'+OborCFG.column+'"?',yesNo+Confirmation) = cmYES
         DeleteFile(OborCFG.column);
    OborCFG.column := '';
    update current OborCFG;
    ReDrawWin;
  }
  end;
}
end; // TableEvent
//------------------------------------------------------------------------------------------------------------
TableEvent
Table SelectAttrVal;
cmUpdateRecord:
{
  update current SelectAttrVal;
}
end; // TableEvent
TableEvent
Table MacrosAttrVal;
cmUpdateRecord:
{
  update current MacrosAttrVal;

}
end; // TableEvent

procedure ReDrawWin;
{
  ReREadREcord;
  RescanPanel(mSelect);
  RescanPanel(mMacros);
}
end.
