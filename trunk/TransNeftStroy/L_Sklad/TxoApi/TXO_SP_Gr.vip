/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,2000 корпорация ГАЛАКТИКА                    ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Бухгалтерский контур                                      ║
 ║ Версия        : 8.1x                                                      ║
 ║ Назначение    : Проставляет счета бух. учёта в зависимости                ║
 ║                 от кода группы МЦ по складским ордерам,                   ║
 ║                 план счетов с кодом "0"                                   ║
 ║ Ответственный : Шайдаров Игорь Александрович                              ║
 ║ Параметры     : нет                                                       ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#include TxoApi.vih // Подключение интерфейса TxoApi

VipInterface TXO_Sp_Gr implements ObjTxoIdentPlugin Licensed (free);

Interface    TXO_Sp_Gr;
var
  CurSoprDoc : comp   ;

create view
as select
  *
from
     KatSopr   (ReadOnly)
   , SklOrder  (ReadOnly)
   , SpOrder   (ReadOnly)
   , KatMC     (ReadOnly)
   , TypeMC    (ReadOnly)
   , SpecMTR   (ReadOnly)
   , synonym SklOrder  SklOrder_R
   , synonym SpOrder   SpOrder_R
   , synonym KatMC     KatMC_R
   , synonym TypeMC    TypeMC_R
   , synonym SpecMTR   SpecMTR_R

where
((
    CurSoprDoc    == KatSopr.nRec
))
;



function GetInfo : string; {
   GetInfo := 'Проставляет бух. счета в зависимости от типа МЦ (по ордерам). Режим счетов - <режим 1 и 0>';
}

function ParamMaster : string; {
   ParamMaster := ''  ;
}


procedure StoreCycles(hTxo : longint; buf : TTxoApiInfoDoc);
{
   TxoAllowRecallStoreCycles(hTxo);
   CurSoprDoc := buf.cSoprDoc;
   InitGetCur;

if( GetFirst KatSopr where ((CurSoprDoc == KatSopr.nRec)) <> tsOk ) {Exit;}

Case KatSopr.VidSopr of
   600, 630 : {
     if (GetFirst SklOrder   where (( KatSopr.nRec == SklOrder.cSopr
                                  and 0            == SklOrder.VidOrder   )) <> tsOK) {Exit;}
     if (GetFirst SklOrder_R where (( KatSopr.nRec == SklOrder_R.cSopr
                                  and 1            == SklOrder_R.VidOrder )) <> tsOK) {Exit;}

        _Loop SpOrder_R where (( SklOrder_R.nRec == SpOrder_R.cSklOrder )) {

           if (GetFirst SpOrder where ((SklOrder.nRec      == SpOrder.cSklOrder
                                    and SpOrder_R.NPP      == SpOrder.NPP            (noIndex)
                                    and SpOrder_R.Kol      == SpOrder.Kol            (noIndex)
                                    and (
                                        Round(SpOrder_R.rSrPrice, 1) = Round(SpOrder.rSrPrice, 1)
                                        )
                                      ))  <> tsOK) {Exit;}   // сделаю соответствие по Порядковым номерам


           if(GetFirst KatMC     where ((SpOrder.cMC      == KatMC.nRec    )) <> tsOk) {Exit;}
           if(GetFirst TypeMC    where ((KatMC.cType      == TypeMC.nRec   )) <> tsOk) {Exit;}

           if(GetFirst KatMC_R   where ((SpOrder_R.cMC    == KatMC_R.nRec  )) <> tsOk) {Exit;}
           if(GetFirst TypeMC_R  where ((KatMC_R.cType    == TypeMC_R.nRec )) <> tsOk) {Exit;}

           TxoBodyClear   (hTxo);
           TxoBodySetSum  (hTxo, SpOrder_R.Kol * SpOrder_R.RsRPrice,  0, SpOrder_R.Kol);
           TxoBodyAddSchet(hTxo, wFlKau_Mode1, 'T' + SubStr(TypeMC_R.Kod, 1, 2),  SubStr(TypeMC_R.Kod, 3, 2) );
           TxoBodyAddSchet(hTxo, wFlKau_Mode0, 'T' + SubStr(TypeMC.Kod  , 1, 2),  SubStr(TypeMC.Kod  , 3, 2) );

           TxoBodyAddKau  (hTxo, wFlKau_Mode1, cgKau_KatPodr, SklOrder_R.cPodr);
           TxoBodyAddKau  (hTxo, wFlKau_Mode1, cgKau_KatMOL , SklOrder_R.cMOL);
           TxoBodyAddKau  (hTxo, wFlKau_Mode1, cgKau_KatMC  , SpOrder_R.cMC);

           if (GetFirst SpecMTR_R where ((  1112          == SpecMTR_R.coTable
                                      and SpOrder_R.nRec  == SpecMTR_R.cSpec   )) = tsOK) {
             TxoBodyAddKau  (hTxo, wFlKau_Mode1, cgKau_ObjBuild  , SpecMTR_R.cObj);
             }

           TxoBodyAddKau  (hTxo, wFlKau_Mode0, cgKau_KatPodr, SklOrder.cPodr);
           TxoBodyAddKau  (hTxo, wFlKau_Mode0, cgKau_KatMOL , SklOrder.cMOL);
           TxoBodyAddKau  (hTxo, wFlKau_Mode0, cgKau_KatMC  , SpOrder.cMC);

           if (GetFirst SpecMTR where ((  1112          == SpecMTR.coTable
                                      and SpOrder.nRec  == SpecMTR.cSpec   )) = tsOK) {
             TxoBodyAddKau  (hTxo, wFlKau_Mode0, cgKau_ObjBuild  , SpecMTR.cObj);
             }

           TxoBodyInsert  (hTxo);
          }
       }


   else {
     _Loop SklOrder where (( KatSopr.nRec == SklOrder.cSopr )) {

        _Loop SpOrder where (( SklOrder.nRec == SpOrder.cSklOrder )) {

           if(GetFirst KatMC   where ((SpOrder.cMC    == KatMC.nRec  )) <> tsOk) {Exit;}
           if(GetFirst TypeMc  where ((KatMC.cType    == TypeMc.nRec )) <> tsOk) {Exit;}

           TxoBodyClear   (hTxo);
           TxoBodySetSum  (hTxo, SpOrder.Kol * SpOrder.RsRPrice,  0, SpOrder.Kol);
           TxoBodyAddSchet(hTxo, wFlKau_Mode1, 'T' + SubStr(TypeMC.Kod, 1, 2),  SubStr(TypeMC.Kod, 3, 2) );
           TxoBodyAddKau  (hTxo, wFlKau_Mode1, cgKau_KatPodr, SklOrder.cPodr);
           TxoBodyAddKau  (hTxo, wFlKau_Mode1, cgKau_KatMOL , SklOrder.cMOL);
           TxoBodyAddKau  (hTxo, wFlKau_Mode1, cgKau_KatMC  , SpOrder.cMC);
           TxoBodyInsert  (hTxo);
          }
       }
     }

end;



}

handleevent
end;

end.
