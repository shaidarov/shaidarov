Function GetDbfName(wTidkGal: word; sTable : string; sDate : string) : string;
{
  result := GetDirImport(wTidkGal) + string(wTidkGal)+ '_' + sDate + '_' + sTable + '.dbf';
}

Function InsertDogToTMP (hMarker : longint; sDbfName : string): boolean;
{
  result := false;
  DBFDogovorDoc := DBFOpen(sDbfName, stOpenRead);
  if (DBFDogovorDoc = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFDogovorDoc) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpDogovorDoc);
    tmpDogovorDoc.NREC          := comp(DBFGetFieldValue(DBFDogovorDoc, 'NREC'));
    tmpDogovorDoc.CALPLANSTATUS := word(DBFGetFieldValue(DBFDogovorDoc, 'CALPLANS'));
    tmpDogovorDoc.CBANKPLAT     := comp(DBFGetFieldValue(DBFDogovorDoc, 'CBANKPLA'));
    tmpDogovorDoc.CBANKPOL      := comp(DBFGetFieldValue(DBFDogovorDoc, 'CBANKPOL'));
    tmpDogovorDoc.CDOGOVOR      := comp(DBFGetFieldValue(DBFDogovorDoc, 'CDOGOVOR'));
    tmpDogovorDoc.CLANG1        := comp(DBFGetFieldValue(DBFDogovorDoc, 'CLANG1'));
    tmpDogovorDoc.CLANG2        := comp(DBFGetFieldValue(DBFDogovorDoc, 'CLANG2'));
    tmpDogovorDoc.CMYORG        := comp(DBFGetFieldValue(DBFDogovorDoc, 'CMYORG'));
    tmpDogovorDoc.CNOTE         := comp(DBFGetFieldValue(DBFDogovorDoc, 'CNOTE'));
    tmpDogovorDoc.CNOTESPEC     := comp(DBFGetFieldValue(DBFDogovorDoc, 'CNOTESPE'));
    tmpDogovorDoc.CORG          := comp(DBFGetFieldValue(DBFDogovorDoc, 'CORG'));
    tmpDogovorDoc.CPLAT         := comp(DBFGetFieldValue(DBFDogovorDoc, 'CPLAT'));
    tmpDogovorDoc.CPOL          := comp(DBFGetFieldValue(DBFDogovorDoc, 'CPOL'));
    tmpDogovorDoc.CPRICELS      := comp(DBFGetFieldValue(DBFDogovorDoc, 'CPRICELS'));
    tmpDogovorDoc.CPROG         := comp(DBFGetFieldValue(DBFDogovorDoc, 'CPROG'));
    tmpDogovorDoc.CSHIPMENT     := comp(DBFGetFieldValue(DBFDogovorDoc, 'CSHIPMEN'));
    tmpDogovorDoc.CSHTRAFPLAT   := comp(DBFGetFieldValue(DBFDogovorDoc, 'CSHTRAFP'));
    tmpDogovorDoc.CSHTRAFSHIP   := comp(DBFGetFieldValue(DBFDogovorDoc, 'CSHTRAFS'));
    tmpDogovorDoc.CTIPOTG       := comp(DBFGetFieldValue(DBFDogovorDoc, 'CTIPOTG'));
    tmpDogovorDoc.CVAL          := comp(DBFGetFieldValue(DBFDogovorDoc, 'CVAL'));
    tmpDogovorDoc.CVALRAS       := comp(DBFGetFieldValue(DBFDogovorDoc, 'CVALRAS'));
    tmpDogovorDoc.CVIDDOG       := comp(DBFGetFieldValue(DBFDogovorDoc, 'CVIDDOG'));
    tmpDogovorDoc.CWAYMOVE      := comp(DBFGetFieldValue(DBFDogovorDoc, 'CWAYMOVE'));
    tmpDogovorDoc.CNAZNA        := comp(DBFGetFieldValue(DBFDogovorDoc, 'CNAZNA'));
    tmpDogovorDoc.DBEG          := StrToDate(DBFGetFieldValue(DBFDogovorDoc, 'DBEG'), 'YYYYMMDD');
    tmpDogovorDoc.DDOC          := StrToDate(DBFGetFieldValue(DBFDogovorDoc, 'DDOC'), 'YYYYMMDD');
    tmpDogovorDoc.DEND          := StrToDate(DBFGetFieldValue(DBFDogovorDoc, 'DEND'), 'YYYYMMDD');
    tmpDogovorDoc.DESCR         := DBFGetFieldValue(DBFDogovorDoc, 'DESCR');
    tmpDogovorDoc.DESGR         := DBFGetFieldValue(DBFDogovorDoc, 'DESGR');
    tmpDogovorDoc.DINPUT        := StrToDate(DBFGetFieldValue(DBFDogovorDoc, 'DINPUT'), 'YYYYMMDD');
    tmpDogovorDoc.DIRECT        := word(DBFGetFieldValue(DBFDogovorDoc     , 'DIRECT'));
    tmpDogovorDoc.DIRECTIN      := word(DBFGetFieldValue(DBFDogovorDoc     , 'DIRECTIN'));
    tmpDogovorDoc.DIRECTOUT     := word(DBFGetFieldValue(DBFDogovorDoc     , 'DIRECTOU'));
    tmpDogovorDoc.DISCOUNT      := double(DBFGetFieldValue(DBFDogovorDoc   , 'DISCOUNT'));
    tmpDogovorDoc.DRASCHET      := StrToDate(DBFGetFieldValue(DBFDogovorDoc, 'DRASCHET'), 'YYYYMMDD');
    tmpDogovorDoc.DVALCURSE     := StrToDate(DBFGetFieldValue(DBFDogovorDoc, 'DVALCURS'), 'YYYYMMDD');
    tmpDogovorDoc.ISEXTRA       := word(DBFGetFieldValue(DBFDogovorDoc     , 'ISEXTRA'));
    tmpDogovorDoc.ISSUM         := word(DBFGetFieldValue(DBFDogovorDoc     , 'ISSUM'));
    tmpDogovorDoc.MAXDEBTS        := double(DBFGetFieldValue(DBFDogovorDoc , 'MAXDEBTS'));
    tmpDogovorDoc.MAXDEBTSCONTROL := word(DBFGetFieldValue(DBFDogovorDoc   , 'MAXDEBTS'));
    tmpDogovorDoc.METHODPRICE     := word(DBFGetFieldValue(DBFDogovorDoc   , 'METHODPR'));
    tmpDogovorDoc.NODOC           := DBFGetFieldValue(DBFDogovorDoc        , 'NODOC');
    tmpDogovorDoc.NODOC_EXT       := DBFGetFieldValue(DBFDogovorDoc        , 'NODOC_EX');
    tmpDogovorDoc.SHEMASUM        := word(DBFGetFieldValue(DBFDogovorDoc   , 'SHEMASUM'));
    tmpDogovorDoc.SHIPADDTERMS    := DBFGetFieldValue(DBFDogovorDoc        , 'SHIPADDT');
    tmpDogovorDoc.SPECSTATUS      := word(DBFGetFieldValue(DBFDogovorDoc   , 'SPECSTAT'));
    tmpDogovorDoc.STATUS          := word(DBFGetFieldValue(DBFDogovorDoc   , 'STATUS'));
    tmpDogovorDoc.SUMMA           := double(DBFGetFieldValue(DBFDogovorDoc , 'SUMMA'));
    tmpDogovorDoc.SUMMASPEC       := double(DBFGetFieldValue(DBFDogovorDoc , 'SUMMASPE'));
    tmpDogovorDoc.TIDK            := word(DBFGetFieldValue(DBFDogovorDoc   , 'TIDK'));
    tmpDogovorDoc.TIPMONEY        := word(DBFGetFieldValue(DBFDogovorDoc   , 'TIPMONEY'));
    tmpDogovorDoc.VHODNAL         := word(DBFGetFieldValue(DBFDogovorDoc   , 'VHODNAL'));
    tmpDogovorDoc.VIDDOG          := word(DBFGetFieldValue(DBFDogovorDoc   , 'VIDDOG'));
    tmpDogovorDoc.CGROTP          := comp(DBFGetFieldValue(DBFDogovorDoc   , 'CGROTP'));
    tmpDogovorDoc.CGRPOL          := comp(DBFGetFieldValue(DBFDogovorDoc   , 'CGRPOL'));
    tmpDogovorDoc.CZAMENA         := comp(DBFGetFieldValue(DBFDogovorDoc   , 'CZAMENA'));
    tmpDogovorDoc.SUMNDS          := double(DBFGetFieldValue(DBFDogovorDoc , 'SUMNDS'));
    tmpDogovorDoc.CDOPKLAS        := comp(DBFGetFieldValue(DBFDogovorDoc   , 'CDOPKLAS'));
    tmpDogovorDoc.VIDOPL          := word(DBFGetFieldValue(DBFDogovorDoc   , 'VIDOPL'));
    tmpDogovorDoc.DAYOPL          := word(DBFGetFieldValue(DBFDogovorDoc   , 'DAYOPL'));
    tmpDogovorDoc.MINDEBTS        := double(DBFGetFieldValue(DBFDogovorDoc , 'MINDEBTS'));
    tmpDogovorDoc.MAXDEBTSAGE     := LongInt(DBFGetFieldValue(DBFDogovorDoc, 'MAXDEBTS'));
    tmpDogovorDoc.MINDEBTSAGE     := LongInt(DBFGetFieldValue(DBFDogovorDoc, 'MINDEBTS'));
    tmpDogovorDoc.CCALENDAR       := comp(DBFGetFieldValue(DBFDogovorDoc   , 'CCALENDA'));
    tmpDogovorDoc.CAGENTDOG       := comp(DBFGetFieldValue(DBFDogovorDoc   , 'CAGENTDO'));
    tmpDogovorDoc.CCURPODR        := comp(DBFGetFieldValue(DBFDogovorDoc   , 'CCURPODR'));
    tmpDogovorDoc.CPLANNIOKR      := comp(DBFGetFieldValue(DBFDogovorDoc   , 'CPLANNIO'));
    If((Insert Current tmpDogovorDoc) = tsOk)
    {
      ClearBuffer(#tmpIerDog);
      tmpIerDog.nRec   := comp(DBFGetFieldValue(DBFDogovorDoc, 'NREC'));
      tmpIerDog.CUPREC := comp(DBFGetFieldValue(DBFDogovorDoc, 'CDOGUP'));
      insert current tmpIerDog;
    }
    //проверка ошибочный документ или нет.
    if (not m_bErrorFile)
      m_bErrorFile := comp(DBFGetFieldValue(DBFDogovorDoc, 'STATE')) = m_cStateOfBadRec;
  }
  while DBFGetNext(DBFDogovorDoc) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertCalPlanDoc (hMarker : longint; sDbfName : string) : boolean;
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFCalPlanDoc := DBFOpen(sDbfName, stOpenRead);

  if (DBFCalPlanDoc = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFCalPlanDoc) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpCalPlanDoc);
    tmpCalPlanDoc.NREC            := comp(DBFGetFieldValue(DBFCalPlanDoc, 'NREC'));
    tmpCalPlanDoc.ADDTERMS        := DBFGetFieldValue(DBFCalPlanDoc     , 'ADDTERMS');
    tmpCalPlanDoc.CDOGOVOR        := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CDOGOVOR'));
    tmpCalPlanDoc.CGROTP          := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CGROTP'));
    tmpCalPlanDoc.CGRPOL          := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CGRPOL'));
    tmpCalPlanDoc.CMARAVT         := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CMARAVT'));
    tmpCalPlanDoc.CNOTE           := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CNOTE'));
    tmpCalPlanDoc.CONDSTATUS      := word(DBFGetFieldValue(DBFCalPlanDoc, 'CONDSTAT'));
    tmpCalPlanDoc.CONT_FIO        := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CONT_FIO'));
    tmpCalPlanDoc.CONT_POST       := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CONT_POS'));
    tmpCalPlanDoc.CORG            := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CORG'));
    tmpCalPlanDoc.COTVMY          := comp(DBFGetFieldValue(DBFCalPlanDoc, 'COTVMY'));
    tmpCalPlanDoc.CPLAT           := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CPLAT'));
    tmpCalPlanDoc.CPLATBANK       := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CPLATBAN'));
    tmpCalPlanDoc.CPOL            := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CPOL'));
    tmpCalPlanDoc.CPOLBANK        := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CPOLBANK'));
    tmpCalPlanDoc.CPUNKTP         := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CPUNKTP'));
    tmpCalPlanDoc.CPUNKTR         := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CPUNKTR'));
    tmpCalPlanDoc.CSHIPMENT       := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CSHIPMEN'));
    tmpCalPlanDoc.CTIPOTG         := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CTIPOTG'));
    tmpCalPlanDoc.CVAL            := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CVAL'));
    tmpCalPlanDoc.CWAYMOVE        := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CWAYMOVE'));
    tmpCalPlanDoc.CNAZNA          := comp(DBFGetFieldValue(DBFCalPlanDoc, 'CNAZNA'));
    tmpCalPlanDoc.DCOND           := StrToDate(DBFGetFieldValue(DBFCalPlanDoc, 'DCOND'), 'YYYYMMDD');
    tmpCalPlanDoc.DESCR           := DBFGetFieldValue(DBFCalPlanDoc, 'DESCR');
    tmpCalPlanDoc.DESGR           := DBFGetFieldValue(DBFCalPlanDoc, 'DESGR');
    tmpCalPlanDoc.DFROM           := StrToDate(DBFGetFieldValue(DBFCalPlanDoc, 'DFROM'), 'YYYYMMDD');
    tmpCalPlanDoc.DINPUT          := StrToDate(DBFGetFieldValue(DBFCalPlanDoc, 'DINPUT'), 'YYYYMMDD');
    tmpCalPlanDoc.DIRECTMC        := word(DBFGetFieldValue(DBFCalPlanDoc     , 'DIRECTMC'));
    tmpCalPlanDoc.DIRECTPLAT      := word(DBFGetFieldValue(DBFCalPlanDoc     , 'DIRECTPL'));
    tmpCalPlanDoc.DTO             := StrToDate(DBFGetFieldValue(DBFCalPlanDoc, 'DTO'), 'YYYYMMDD');
    tmpCalPlanDoc.DVALCURSE       := StrToDate(DBFGetFieldValue(DBFCalPlanDoc, 'DVALCURS'), 'YYYYMMDD');
    tmpCalPlanDoc.NDAYS           := word(DBFGetFieldValue(DBFCalPlanDoc  , 'NDAYS'));
    tmpCalPlanDoc.NODOC           := DBFGetFieldValue(DBFCalPlanDoc       , 'NODOC');
    tmpCalPlanDoc.OTV_MY_FIO      := DBFGetFieldValue(DBFCalPlanDoc       , 'OTV_MY_F');
    tmpCalPlanDoc.OTV_MY_POST     := DBFGetFieldValue(DBFCalPlanDoc       , 'OTV_MY_P');
    tmpCalPlanDoc.STATUS          := word(DBFGetFieldValue(DBFCalPlanDoc  , 'STATUS'));
    tmpCalPlanDoc.SUMMA           := double(DBFGetFieldValue(DBFCalPlanDoc, 'SUMMA'));
    tmpCalPlanDoc.SUMMASPEC       := double(DBFGetFieldValue(DBFCalPlanDoc, 'SUMMASPE'));
    tmpCalPlanDoc.TERMDEFBY       := word(DBFGetFieldValue(DBFCalPlanDoc  , 'TERMDEFB'));
    tmpCalPlanDoc.VHODNAL         := word(DBFGetFieldValue(DBFCalPlanDoc  , 'VHODNAL'));
    tmpCalPlanDoc.DISCOUNT        := double(DBFGetFieldValue(DBFCalPlanDoc, 'DISCOUNT'));
    tmpCalPlanDoc.ISEXTRA         := word(DBFGetFieldValue(DBFCalPlanDoc  , 'ISEXTRA'));
    tmpCalPlanDoc.ISSUM           := word(DBFGetFieldValue(DBFCalPlanDoc  , 'ISSUM'));
    tmpCalPlanDoc.NODOC_EXT       := DBFGetFieldValue(DBFCalPlanDoc       , 'NODOC_EX');
    tmpCalPlanDoc.CCALPLAN        := comp(DBFGetFieldValue(DBFCalPlanDoc  , 'CCALPLAN'));
    tmpCalPlanDoc.CPREDPLAN       := comp(DBFGetFieldValue(DBFCalPlanDoc  , 'CPREDPLA'));
    tmpCalPlanDoc.RUNOK           := word(DBFGetFieldValue(DBFCalPlanDoc  , 'RUNOK'));
    tmpCalPlanDoc.SUMNDS          := double(DBFGetFieldValue(DBFCalPlanDoc, 'SUMNDS'));
    tmpCalPlanDoc.TIPOTVPODR      := word(DBFGetFieldValue(DBFCalPlanDoc  , 'TIPOTVPO'));
    tmpCalPlanDoc.COTVPODR        := comp(DBFGetFieldValue(DBFCalPlanDoc  , 'COTVPODR'));
    tmpCalPlanDoc.TIPPLATPODR     := word(DBFGetFieldValue(DBFCalPlanDoc  , 'TIPPLATP'));
    tmpCalPlanDoc.CPLATPODR       := comp(DBFGetFieldValue(DBFCalPlanDoc  , 'CPLATPOD'));

    If((Insert Current tmpCalPlanDoc) <> tsOk)
    {

    }
  }
  while DBFGetNext(DBFCalPlanDoc) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

Function InsertSpDocsDoc (hMarker : longint; sDbfName : string) :boolean;
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSpDocs := DBFOpen(sDbfName, stOpenRead);

  if (DBFSpDocs = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSpDocs) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpSpDocsDoc);
    tmpSpDocsDoc.NREC          := comp(DBFGetFieldValue(DBFSpDocs, 'NREC'));
    tmpSpDocsDoc.CDOC          := comp(DBFGetFieldValue(DBFSpDocs, 'CDOC'));
    tmpSpDocsDoc.CGRMCUSL      := comp(DBFGetFieldValue(DBFSpDocs, 'CGRMCUSL'));
    tmpSpDocsDoc.CGRNAL        := comp(DBFGetFieldValue(DBFSpDocs, 'CGRNAL'));
    tmpSpDocsDoc.CMCUSL        := comp(DBFGetFieldValue(DBFSpDocs, 'CMCUSL'));
    tmpSpDocsDoc.CMOVECELL     := comp(DBFGetFieldValue(DBFSpDocs, 'CMOVECEL'));
    tmpSpDocsDoc.CODE          := DBFGetFieldValue(DBFSpDocs, 'CODE');
    tmpSpDocsDoc.COTPED        := comp(DBFGetFieldValue(DBFSpDocs, 'COTPED'));
    tmpSpDocsDoc.CPRICELS      := comp(DBFGetFieldValue(DBFSpDocs, 'CPRICELS'));
    tmpSpDocsDoc.CRESOTGR      := comp(DBFGetFieldValue(DBFSpDocs, 'CRESOTGR'));
    tmpSpDocsDoc.CSHIPMENT     := comp(DBFGetFieldValue(DBFSpDocs, 'CSHIPMEN'));
    tmpSpDocsDoc.CTIPOTG       := comp(DBFGetFieldValue(DBFSpDocs, 'CTIPOTG'));
    tmpSpDocsDoc.CUPDOC        := comp(DBFGetFieldValue(DBFSpDocs, 'CUPDOC'));
    tmpSpDocsDoc.CVAL          := comp(DBFGetFieldValue(DBFSpDocs, 'CVAL'));
    tmpSpDocsDoc.CWAYMOVE      := comp(DBFGetFieldValue(DBFSpDocs, 'CWAYMOVE'));
    tmpSpDocsDoc.DIRECT        := word(DBFGetFieldValue(DBFSpDocs, 'DIRECT'));
    tmpSpDocsDoc.EMPTY         := word(DBFGetFieldValue(DBFSpDocs, 'EMPTY'));
    tmpSpDocsDoc.KOL           := double(DBFGetFieldValue(DBFSpDocs, 'KOL'));
    tmpSpDocsDoc.MAXSUMMA      := double(DBFGetFieldValue(DBFSpDocs, 'MAXSUMMA'));
    tmpSpDocsDoc.MAXVALUE      := double(DBFGetFieldValue(DBFSpDocs, 'MAXVALUE'));
    tmpSpDocsDoc.MINSUMMA      := double(DBFGetFieldValue(DBFSpDocs, 'MINSUMMA'));
    tmpSpDocsDoc.MINVALUE      := double(DBFGetFieldValue(DBFSpDocs, 'MINVALUE'));
    tmpSpDocsDoc.OSTATOK       := double(DBFGetFieldValue(DBFSpDocs, 'OSTATOK'));
    tmpSpDocsDoc.PRICE         := double(DBFGetFieldValue(DBFSpDocs, 'PRICE'));
    tmpSpDocsDoc.PRMC          := word(DBFGetFieldValue(DBFSpDocs  , 'PRMC'));
    tmpSpDocsDoc.SHIPADDTERMS  := DBFGetFieldValue(DBFSpDocs       , 'SHIPADDT');
    tmpSpDocsDoc.SHIPVALTYPE   := word(DBFGetFieldValue(DBFSpDocs  , 'SHIPVALT'));
    tmpSpDocsDoc.SUMMA         := double(DBFGetFieldValue(DBFSpDocs, 'SUMMA'));
    tmpSpDocsDoc.TIDK          := word(DBFGetFieldValue(DBFSpDocs  , 'TIDK'));
    tmpSpDocsDoc.CONTROL       := word(DBFGetFieldValue(DBFSpDocs  , 'CONTROL'));
    tmpSpDocsDoc.CONTROLTYPE   := word(DBFGetFieldValue(DBFSpDocs  , 'CONTROLT'));
    tmpSpDocsDoc.CSPMC         := comp(DBFGetFieldValue(DBFSpDocs  , 'CSPMC'));
    tmpSpDocsDoc.CMAKESP       := comp(DBFGetFieldValue(DBFSpDocs  , 'CMAKESP'));
    tmpSpDocsDoc.SUMNDS        := double(DBFGetFieldValue(DBFSpDocs, 'SUMNDS'));
    tmpSpDocsDoc.TIPOTVPODR    := word(DBFGetFieldValue(DBFSpDocs  , 'TIPOTVPO'));
    tmpSpDocsDoc.COTVPODR      := comp(DBFGetFieldValue(DBFSpDocs  , 'COTVPODR'));
    tmpSpDocsDoc.MANUALTAX     := word(DBFGetFieldValue(DBFSpDocs  , 'MANUALTA'));
    tmpSpDocsDoc.PERIOD        := word(DBFGetFieldValue(DBFSpDocs  , 'PERIOD'));
    tmpSpDocsDoc.DFROM         := StrToDate(DBFGetFieldValue(DBFSpDocs, 'DFROM'), 'YYYYMMDD');
    tmpSpDocsDoc.DTO           := StrToDate(DBFGetFieldValue(DBFSpDocs, 'DTO'), 'YYYYMMDD');
    tmpSpDocsDoc.KOLPERIOD     := double(DBFGetFieldValue(DBFSpDocs, 'KOLPERIO'));
    tmpSpDocsDoc.NUMPERIOD     := word(DBFGetFieldValue(DBFSpDocs  , 'NUMPERIO'));
    tmpSpDocsDoc.TIPPLATPODR   := word(DBFGetFieldValue(DBFSpDocs  , 'TIPPLATP'));
    tmpSpDocsDoc.CPLATPODR     := comp(DBFGetFieldValue(DBFSpDocs  , 'CPLATPOD'));
    tmpSpDocsDoc.CUKS          := comp(DBFGetFieldValue(DBFSpDocs  , 'CUKS'));
    tmpSpDocsDoc.PRNORMA       := word(DBFGetFieldValue(DBFSpDocs  , 'PRNORMA'));
    tmpSpDocsDoc.CNORMA        := comp(DBFGetFieldValue(DBFSpDocs  , 'CNORMA'));
    tmpSpDocsDoc.DPOST         := StrToDate(DBFGetFieldValue(DBFSpDocs, 'DPOST'), 'YYYYMMDD');

    If((Insert Current tmpSpDocsDoc) <> tsOk)
    {
    }
  }
  while DBFGetNext(DBFSpDocs) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertSklOrder(hMarker : longint; sDbfName : string; bDefErrorFile : boolean = false) :boolean;//1
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSklOrder := DBFOpen(sDbfName, stOpenRead);

  if (DBFSklOrder = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSklOrder) = tsOk
  do
  {
    NextVisual;
    tmpSklOrder.NREC      := comp(DBFGetFieldValue(DBFSklOrder, 'NREC'));
    tmpSklOrder.SP        := word(DBFGetFieldValue(DBFSklOrder, 'SP'));
    tmpSklOrder.DESCR     := DBFGetFieldValue(DBFSklOrder, 'DESCR');
    tmpSklOrder.DESGR     := DBFGetFieldValue(DBFSklOrder, 'DESGR');
    tmpSklOrder.NORDER    := DBFGetFieldValue(DBFSklOrder, 'NORDER');
    tmpSklOrder.VIDORDER  := comp(DBFGetFieldValue(DBFSklOrder, 'VIDORDER'));
    tmpSklOrder.CSOPR     := comp(DBFGetFieldValue(DBFSklOrder, 'CSOPR'));
    tmpSklOrder.CRZDOC    := comp(DBFGetFieldValue(DBFSklOrder, 'CRZDOC'));
    tmpSklOrder.CPODR     := comp(DBFGetFieldValue(DBFSklOrder, 'CPODR'));
    tmpSklOrder.CMOL      := comp(DBFGetFieldValue(DBFSklOrder, 'CMOL'));
    tmpSklOrder.DORD      := StrToDate(DBFGetFieldValue(DBFSklOrder, 'DORD'), 'YYYYMMDD');
    tmpSklOrder.CGRPODR   := comp(DBFGetFieldValue(DBFSklOrder, 'CGRPODR'));
    tmpSklOrder.YEARORD   := word(DBFGetFieldValue(DBFSklOrder, 'YEARORD'));
    tmpSklOrder.TIPORD    := word(DBFGetFieldValue(DBFSklOrder, 'TIPORD'));
    tmpSklOrder.CHOZOPER  := comp(DBFGetFieldValue(DBFSklOrder, 'CHOZOPER'));
    tmpSklOrder.NPP       := longInt(DBFGetFieldValue(DBFSklOrder, 'NPP'));
    If((Insert Current tmpSklOrder) <> tsOk)
    {
    }
    //проверка ошибочный документ или нет.
    if (bDefErrorFile)
      if (not m_bErrorFile)
        m_bErrorFile := comp(DBFGetFieldValue(DBFSklOrder, 'STATE')) = m_cStateOfBadRec;
  }
  while DBFGetNext(DBFSklOrder) = tsOk;
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  StopVisual('', 0);
  result := true;
}

function InsertSpOrder(hMarker : longint; sDbfName : string) :boolean;//1
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSpOrder := DBFOpen(sDbfName, stOpenRead);

  if (DBFSpOrder = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSpOrder) = tsOk
  do
  {
    NextVisual;
    tmpSpOrder.NREC         := comp(DBFGetFieldValue(DBFSpOrder, 'NREC'));
    tmpSpOrder.DESCR        := DBFGetFieldValue(DBFSpOrder, 'DESCR');
    tmpSpOrder.DESGR        := DBFGetFieldValue(DBFSpOrder, 'DESGR');
    tmpSpOrder.SP           := word(DBFGetFieldValue(DBFSpOrder, 'SP'));
    tmpSpOrder.CSKLORDER    := comp(DBFGetFieldValue(DBFSpOrder, 'CSKLORDE'));
    tmpSpOrder.DORD         := StrToDate(DBFGetFieldValue(DBFSpOrder, 'DORD'), 'YYYYMMDD');
    tmpSpOrder.NPP          := word(DBFGetFieldValue(DBFSpOrder, 'NPP'));
    tmpSpOrder.VIDORDER     := word(DBFGetFieldValue(DBFSpOrder, 'VIDORDER'));
    tmpSpOrder.TIPORD       := word(DBFGetFieldValue(DBFSpOrder, 'TIPORD'));
    tmpSpOrder.CMC          := comp(DBFGetFieldValue(DBFSpOrder, 'CMC'));
    tmpSpOrder.KOL          := double(DBFGetFieldValue(DBFSpOrder, 'KOL'));
    tmpSpOrder.CPARTY       := comp(DBFGetFieldValue(DBFSpOrder, 'CPARTY'));
    tmpSpOrder.CBOX         := comp(DBFGetFieldValue(DBFSpOrder, 'CBOX'));
    tmpSpOrder.SRPRICE      := double(DBFGetFieldValue(DBFSpOrder, 'SRPRICE'));
    tmpSpOrder.CVAL         := comp(DBFGetFieldValue(DBFSpOrder  , 'CVAL'));
    tmpSpOrder.VPRICE       := double(DBFGetFieldValue(DBFSpOrder, 'VPRICE'));
    tmpSpOrder.RSRPRICE     := double(DBFGetFieldValue(DBFSpOrder, 'RSRPRICE'));
    tmpSpOrder.RVPRICE      := double(DBFGetFieldValue(DBFSpOrder, 'RVPRICE'));
    tmpSpOrder.CCMOL        := comp(DBFGetFieldValue(DBFSpOrder  , 'CCMOL'));
    tmpSpOrder.CCPODR       := comp(DBFGetFieldValue(DBFSpOrder  , 'CCPODR'));
    tmpSpOrder.OSTATOK      := double(DBFGetFieldValue(DBFSpOrder, 'OSTATOK'));
    tmpSpOrder.EMPTY        := word(DBFGetFieldValue(DBFSpOrder  , 'EMPTY'));
    tmpSpOrder.CSPORDER     := comp(DBFGetFieldValue(DBFSpOrder  , 'CSPORDER'));
    tmpSpOrder.CSPSOPR      := comp(DBFGetFieldValue(DBFSpOrder  , 'CSPSOPR'));
    tmpSpOrder.CSPORDV      := comp(DBFGetFieldValue(DBFSpOrder  , 'CSPORDV'));
    tmpSpOrder.METHOD       := word(DBFGetFieldValue(DBFSpOrder  , 'METHOD'));
    tmpSpOrder.CSALDOFND    := comp(DBFGetFieldValue(DBFSpOrder  , 'CSALDOFN'));
    tmpSpOrder.KOLDOP       := double(DBFGetFieldValue(DBFSpOrder, 'KOLDOP'));
    tmpSpOrder.PERPRICE     := double(DBFGetFieldValue(DBFSpOrder, 'PERPRICE '));
    tmpSpOrder.PERVPRICE    := double(DBFGetFieldValue(DBFSpOrder, 'PERVPRIC'));
    tmpSpOrder.COBJ         := comp(DBFGetFieldValue(DBFSpOrder  , 'COBJ'));
    tmpSpOrder.PRICEN       := double(DBFGetFieldValue(DBFSpOrder, 'PRICEN'));
    tmpSpOrder.VPRICEN      := double(DBFGetFieldValue(DBFSpOrder, 'VPRICEN'));
    tmpSpOrder.CSPRZDOC     := comp(DBFGetFieldValue(DBFSpOrder  , 'CSPRZDOC'));
    tmpSpOrder.GLOB_NPP     := longint(DBFGetFieldValue(DBFSpOrder, 'GLOB_NPP'));
    If((Insert Current tmpSpOrder) <> tsOk)
    {
    }
  }
  while DBFGetNext(DBFSpOrder) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertKatSopr(hMarker : longint; sDbfName : string) :boolean;//1
{
  result := false;
  DBFKatSopr := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatSopr = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFKatSopr) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatSopr);
    tmpKatSopr.NREC := comp(DBFGetFieldValue(DBFKatSopr, 'NREC'));
    tmpKatSopr.NAME  := DBFGetFieldValue(DBFKatSopr    , 'NAME');
    tmpKatSopr.DESCR:= DBFGetFieldValue(DBFKatSopr     , 'DESCR');
    tmpKatSopr.DESGR := DBFGetFieldValue(DBFKatSopr    , 'DESGR');
    tmpKatSopr.CORG := comp(DBFGetFieldValue(DBFKatSopr, 'CORG'));
    tmpKatSopr.SUMMA := double(DBFGetFieldValue(DBFKatSopr , 'SUMMA'));
    tmpKatSopr.CVAL := comp(DBFGetFieldValue(DBFKatSopr    , 'CVAL'));
    tmpKatSopr.SUMVAL := double(DBFGetFieldValue(DBFKatSopr, 'SUMVAL'));
    tmpKatSopr.VHODNAL := word(DBFGetFieldValue(DBFKatSopr , 'VHODNAL'));
    tmpKatSopr.DPRICE := StrToDate(DBFGetFieldValue(DBFKatSopr, 'DPRICE'), 'YYYYMMDD');
    tmpKatSopr.CCOMPL := comp(DBFGetFieldValue(DBFKatSopr     , 'CCOMPL'));
    tmpKatSopr.KOLKOMPL := double(DBFGetFieldValue(DBFKatSopr , 'KOLKOMPL'));
    tmpKatSopr.RNDR := double(DBFGetFieldValue(DBFKatSopr     , 'RNDR'));
    tmpKatSopr.RNDV := double(DBFGetFieldValue(DBFKatSopr     , 'RNDV'));
    tmpKatSopr.CNAZNA := comp(DBFGetFieldValue(DBFKatSopr     , 'CNAZNA'));
    tmpKatSopr.CDOGOVOR := comp(DBFGetFieldValue(DBFKatSopr   , 'CDOGOVOR'));
    tmpKatSopr.CAPPDOGOVOR := comp(DBFGetFieldValue(DBFKatSopr, 'CAPPDOGO'));
    tmpKatSopr.CCALPLAN := comp(DBFGetFieldValue(DBFKatSopr   , 'CCALPLAN'));
    tmpKatSopr.CPERSON := comp(DBFGetFieldValue(DBFKatSopr    , 'CPERSON'));
    tmpKatSopr.CDOVER := comp(DBFGetFieldValue(DBFKatSopr     , 'CDOVER'));
    tmpKatSopr.NDOVER := DBFGetFieldValue(DBFKatSopr          , 'NDOVER');
    tmpKatSopr.DDOVER := StrToDate(DBFGetFieldValue(DBFKatSopr, 'DDOVER'), 'YYYYMMDD');
    tmpKatSopr.SDOVER := DBFGetFieldValue(DBFKatSopr          , 'SDOVER');
    tmpKatSopr.CDOVFIO := comp(DBFGetFieldValue(DBFKatSopr    , 'CDOVFIO'));
    tmpKatSopr.STATUS := word(DBFGetFieldValue(DBFKatSopr     , 'STATUS'));
    tmpKatSopr.CNOTE := comp(DBFGetFieldValue(DBFKatSopr      , 'CNOTE'));
    tmpKatSopr.CPAYMENT := comp(DBFGetFieldValue(DBFKatSopr   , 'CPAYMENT'));
    tmpKatSopr.CTRANSP := comp(DBFGetFieldValue(DBFKatSopr    , 'CTRANSP'));
    tmpKatSopr.NVAGON := DBFGetFieldValue(DBFKatSopr          , 'NVAGON');
    tmpKatSopr.NKVIT := DBFGetFieldValue(DBFKatSopr           , 'NKVIT');
    tmpKatSopr.NSERTIF := DBFGetFieldValue(DBFKatSopr         , 'NSERTIF');
    tmpKatSopr.CMASED := comp(DBFGetFieldValue(DBFKatSopr     , 'CMASED'));
    tmpKatSopr.CMASVID := comp(DBFGetFieldValue(DBFKatSopr    , 'CMASVID'));
    tmpKatSopr.NETTO := double(DBFGetFieldValue(DBFKatSopr    , 'NETTO'));
    tmpKatSopr.MTARA := double(DBFGetFieldValue(DBFKatSopr    , 'MTARA'));
    tmpKatSopr.CSTEPDOC := comp(DBFGetFieldValue(DBFKatSopr   , 'CSTEPDOC'));
    tmpKatSopr.TIPSOPR := word(DBFGetFieldValue(DBFKatSopr    , 'TIPSOPR'));
    tmpKatSopr.DSOPR := StrToDate(DBFGetFieldValue(DBFKatSopr , 'DSOPR'), 'YYYYMMDD');
    tmpKatSopr.YEARSOPR := word(DBFGetFieldValue(DBFKatSopr   , 'YEARSOPR'));
    tmpKatSopr.NSOPR := DBFGetFieldValue(DBFKatSopr           , 'NSOPR');
    tmpKatSopr.VIDSOPR := word(DBFGetFieldValue(DBFKatSopr    , 'VIDSOPR'));
    tmpKatSopr.CPODRFROM := comp(DBFGetFieldValue(DBFKatSopr  , 'CPODRFRO'));
    tmpKatSopr.CPODRTO := comp(DBFGetFieldValue(DBFKatSopr    , 'CPODRTO'));
    tmpKatSopr.CMOLFROM := comp(DBFGetFieldValue(DBFKatSopr   , 'CMOLFROM'));
    tmpKatSopr.CMOLTO := comp(DBFGetFieldValue(DBFKatSopr     , 'CMOLTO'));
    tmpKatSopr.CGRUZFROM := comp(DBFGetFieldValue(DBFKatSopr  , 'CGRUZFRO'));
    tmpKatSopr.CGRUZTO := comp(DBFGetFieldValue(DBFKatSopr    , 'CGRUZTO'));
    tmpKatSopr.CORGBASE := comp(DBFGetFieldValue(DBFKatSopr   , 'CORGBASE'));
    tmpKatSopr.DOPR := StrToDate(DBFGetFieldValue(DBFKatSopr  , 'DOPR'), 'YYYYMMDD');
    tmpKatSopr.CHOZOPER := comp(0);
    tmpKatSopr.SOPRHOZ := word(DBFGetFieldValue(DBFKatSopr     , 'SOPRHOZ'));
    tmpKatSopr.RESERVED := word(DBFGetFieldValue(DBFKatSopr    , 'RESERVED'));
    tmpKatSopr.SROKRES := StrToDate(DBFGetFieldValue(DBFKatSopr, 'SROKRES'), 'YYYYMMDD');
    tmpKatSopr.CKATSOPR := comp(DBFGetFieldValue(DBFKatSopr    , 'CKATSOPR'));
    tmpKatSopr.CVALUT := comp(DBFGetFieldValue(DBFKatSopr      , 'CVALUT'));
    tmpKatSopr.CSCHFACT := comp(DBFGetFieldValue(DBFKatSopr    , 'CSCHFACT'));
    tmpKatSopr.USERFIELD := DBFGetFieldValue(DBFKatSopr        , 'USERFIEL');
    tmpKatSopr.CGRSOPR := comp(DBFGetFieldValue(DBFKatSopr     , 'CGRSOPR'));
    tmpKatSopr.SNALOGS := double(DBFGetFieldValue(DBFKatSopr   , 'SNALOGS'));
    tmpKatSopr.SVNALOGS := double(DBFGetFieldValue(DBFKatSopr  , 'SVNALOGS'));
    tmpKatSopr.TRANSP := word(DBFGetFieldValue(DBFKatSopr      , 'TRANSP'));
    tmpKatSopr.CNZAKAZ := comp(DBFGetFieldValue(DBFKatSopr     , 'CNZAKAZ'));
    tmpKatSopr.COTGORDER := comp(DBFGetFieldValue(DBFKatSopr   , 'COTGORDE'));
    tmpKatSopr.WADOC := word(DBFGetFieldValue(DBFKatSopr       , 'WADOC'));
    tmpKatSopr.CADOC := comp(DBFGetFieldValue(DBFKatSopr       , 'CADOC'));
    tmpKatSopr.CIZD := comp(DBFGetFieldValue(DBFKatSopr        , 'CIZD'));
    tmpKatSopr.WCIZD := word(DBFGetFieldValue(DBFKatSopr       , 'WCIZD'));
    tmpKatSopr.CZAKAZ := comp(DBFGetFieldValue(DBFKatSopr      , 'CZAKAZ'));
    tmpKatSopr.CPRICEALG := comp(DBFGetFieldValue(DBFKatSopr   , 'CPRICEAL'));
    tmpKatSopr.TYPEDOC := word(DBFGetFieldValue(DBFKatSopr     , 'TYPEDOC'));
    tmpKatSopr.CCELLVAL := comp(DBFGetFieldValue(DBFKatSopr    , 'CCELLVAL'));
    tmpKatSopr.CNMOVECELL := comp(DBFGetFieldValue(DBFKatSopr  , 'CNMOVECE'));
    tmpKatSopr.TARAVOZ := word(DBFGetFieldValue(DBFKatSopr     , 'TARAVOZ'));
    tmpKatSopr.CORGPLAT := comp(DBFGetFieldValue(DBFKatSopr    , 'CORGPLAT'));
    tmpKatSopr.TIPOTVPODR := word(DBFGetFieldValue(DBFKatSopr  , 'TIPOTVPO'));
    tmpKatSopr.COTVPODR := comp(DBFGetFieldValue(DBFKatSopr    , 'COTVPODR'));
    tmpKatSopr.CUKS := comp(DBFGetFieldValue(DBFKatSopr        , 'CUKS'));
    If((Insert Current tmpKatSopr) <> tsOk)
    {

    }
    //проверка ошибочный документ или нет.
    if (not m_bErrorFile)
      m_bErrorFile := comp(DBFGetFieldValue(DBFKatSopr, 'STATE')) = m_cStateOfBadRec;
  }
  while DBFGetNext(DBFKatSopr) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertSpSopr(hMarker : longint; sDbfName : string) :boolean;//2
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSpSopr := DBFOpen(sDbfName, stOpenRead);
  if (DBFSpSopr = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSpSopr) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpSpSopr);
    tmpSpSopr.NREC    := comp(DBFGetFieldValue(DBFSpSopr, 'NREC'));
    tmpSpSopr.CSPSOPR := comp(DBFGetFieldValue(DBFSpSopr, 'CSPSOPR'));
    tmpSpSopr.NPP     := word(DBFGetFieldValue(DBFSpSopr, 'NPP'));
    tmpSpSopr.PRMC    := word(DBFGetFieldValue(DBFSpSopr, 'PRMC'));
    tmpSpSopr.CMCUSL  := comp(DBFGetFieldValue(DBFSpSopr, 'CMCUSL'));
    tmpSpSopr.COTPED  := comp(DBFGetFieldValue(DBFSpSopr, 'COTPED'));
    tmpSpSopr.CALTED  := comp(DBFGetFieldValue(DBFSpSopr, 'CALTED'));
    tmpSpSopr.CPARTY  := comp(DBFGetFieldValue(DBFSpSopr, 'CPARTY'));
    tmpSpSopr.CVAL    := comp(DBFGetFieldValue(DBFSpSopr, 'CVAL'));
    tmpSpSopr.CPRICELIST := comp(DBFGetFieldValue(DBFSpSopr  , 'CPRICELI'));
    tmpSpSopr.KOL        := double(DBFGetFieldValue(DBFSpSopr, 'KOL'));
    tmpSpSopr.KOLOPL     := double(DBFGetFieldValue(DBFSpSopr, 'KOLOPL'));
    tmpSpSopr.OSTKOL     := double(DBFGetFieldValue(DBFSpSopr, 'OSTKOL'));
    tmpSpSopr.PRICE      := double(DBFGetFieldValue(DBFSpSopr, 'PRICE'));
    tmpSpSopr.PROCUB     := double(DBFGetFieldValue(DBFSpSopr, 'PROCUB'));
    tmpSpSopr.CPERSONS   := comp(DBFGetFieldValue(DBFSpSopr  , 'CPERSONS'));
    tmpSpSopr.MANUALTAX  := word(DBFGetFieldValue(DBFSpSopr  , 'MANUALTA'));
    tmpSpSopr.CGRNAL     := comp(DBFGetFieldValue(DBFSpSopr  , 'CGRNAL'));
    tmpSpSopr.CCELLVAL   := comp(DBFGetFieldValue(DBFSpSopr  , 'CCELLVAL'));
    tmpSpSopr.CTRANSP    := comp(DBFGetFieldValue(DBFSpSopr  , 'CTRANSP'));
    tmpSpSopr.NVAGON     := DBFGetFieldValue(DBFSpSopr, 'NVAGON');
    tmpSpSopr.NKVIT      := DBFGetFieldValue(DBFSpSopr, 'NKVIT');
    tmpSpSopr.NSERTIF    := DBFGetFieldValue(DBFSpSopr, 'NSERTIF');
    tmpSpSopr.SUMAVT     := double(DBFGetFieldValue(DBFSpSopr, 'SUMAVT'));
    tmpSpSopr.CVALAVT    := comp(DBFGetFieldValue(DBFSpSopr, 'CVALAVT'));
    tmpSpSopr.CMASED     := comp(DBFGetFieldValue(DBFSpSopr, 'CMASED'));
    tmpSpSopr.CMASVID    := comp(DBFGetFieldValue(DBFSpSopr, 'CMASVID'));
    tmpSpSopr.NETTO      := double(DBFGetFieldValue(DBFSpSopr, 'NETTO'));
    tmpSpSopr.MTARA      := double(DBFGetFieldValue(DBFSpSopr, 'MTARA'));
    tmpSpSopr.CRESOTGR   := comp(DBFGetFieldValue(DBFSpSopr, 'CRESOTGR'));
    tmpSpSopr.CSPDOCS    := comp(DBFGetFieldValue(DBFSpSopr, 'CSPDOCS'));
    tmpSpSopr.CSOPR      := comp(DBFGetFieldValue(DBFSpSopr, 'CSOPR'));
    tmpSpSopr.DSOPR      := StrToDate(DBFGetFieldValue(DBFSpSopr, 'DSOPR'), 'YYYYMMDD');
    tmpSpSopr.DOPRTTN    := StrToDate(DBFGetFieldValue(DBFSpSopr, 'DOPRTTN'), 'YYYYMMDD');
    tmpSpSopr.VIDSOPR    := word(DBFGetFieldValue(DBFSpSopr  , 'VIDSOPR'));
    tmpSpSopr.KOL2       := double(DBFGetFieldValue(DBFSpSopr, 'KOL2'));
    tmpSpSopr.VPRICE     := double(DBFGetFieldValue(DBFSpSopr, 'VPRICE'));
    tmpSpSopr.KOLFACT    := double(DBFGetFieldValue(DBFSpSopr, 'KOLFACT'));
    tmpSpSopr.KOLFACT2   := double(DBFGetFieldValue(DBFSpSopr, 'KOLFACT2'));
    tmpSpSopr.KOLNORMA   := double(DBFGetFieldValue(DBFSpSopr, 'KOLNORMA'));
    tmpSpSopr.OILPLOT    := double(DBFGetFieldValue(DBFSpSopr, 'OILPLOT'));
    tmpSpSopr.OILTEMPER  := double(DBFGetFieldValue(DBFSpSopr, 'OILTEMPE'));
    tmpSpSopr.CSPORDER   := comp(DBFGetFieldValue(DBFSpSopr  , 'CSPORDER'));
    tmpSpSopr.PROCNAC    := double(DBFGetFieldValue(DBFSpSopr, 'PROCNAC'));
    tmpSpSopr.CSPSTEP    := comp(DBFGetFieldValue(DBFSpSopr  , 'CSPSTEP'));
    tmpSpSopr.SUMNDS     := double(DBFGetFieldValue(DBFSpSopr, 'SUMNDS'));
    tmpSpSopr.SUMVNDS    := double(DBFGetFieldValue(DBFSpSopr, 'SUMVNDS'));
    tmpSpSopr.RPRICE     := double(DBFGetFieldValue(DBFSpSopr, 'RPRICE'));
    tmpSpSopr.RVPRICE    := double(DBFGetFieldValue(DBFSpSopr, 'RVPRICE'));
    tmpSpSopr.CSPNZAKAZ  := comp(DBFGetFieldValue(DBFSpSopr  , 'CSPNZAKA'));
    tmpSpSopr.CSPSCHF    := comp(DBFGetFieldValue(DBFSpSopr  , 'CSPSCHF'));
    tmpSpSopr.WADOCSP    := word(DBFGetFieldValue(DBFSpSopr  , 'WADOCSP'));
    tmpSpSopr.CADOCSP    := comp(DBFGetFieldValue(DBFSpSopr  , 'CADOCSP'));
    tmpSpSopr.CZAKVOL    := comp(DBFGetFieldValue(DBFSpSopr  , 'CZAKVOL'));
    tmpSpSopr.KOLGRM     := double(DBFGetFieldValue(DBFSpSopr, 'KOLGRM'));
    tmpSpSopr.COTPEDGRM  := comp(DBFGetFieldValue(DBFSpSopr  , 'COTPEDGR'));
    tmpSpSopr.CNMOVECELL := comp(DBFGetFieldValue(DBFSpSopr  , 'CNMOVECE'));
    tmpSpSopr.COWNER     := comp(DBFGetFieldValue(DBFSpSopr  , 'COWNER'));
    tmpSpSopr.PRVOZ      := word(DBFGetFieldValue(DBFSpSopr  , 'PRVOZ'));
    tmpSpSopr.KOLPOV     := double(DBFGetFieldValue(DBFSpSopr, 'KOLPOV'));
    tmpSpSopr.CGPSOPR    := comp(DBFGetFieldValue(DBFSpSopr  , 'CGPSOPR'));
    tmpSpSopr.KOLDOP     := double(DBFGetFieldValue(DBFSpSopr, 'KOLDOP'));
    tmpSpSopr.CUKS       := comp(DBFGetFieldValue(DBFSpSopr  , 'CUKS'));
    tmpSpSopr.WMCPROP    := word(DBFGetFieldValue(DBFSpSopr  , 'WMCPROP'));
    tmpSpSopr.PRICEN     := double(DBFGetFieldValue(DBFSpSopr, 'PRICEN'));
    tmpSpSopr.VPRICEN    := double(DBFGetFieldValue(DBFSpSopr, 'VPRICEN'));
    tmpSpSopr.MANUALNALUCH := word(DBFGetFieldValue(DBFSpSopr, 'MANUALNA'));
    tmpSpSopr.CPODR        := comp(DBFGetFieldValue(DBFSpSopr, 'CPODR'));
    tmpSpSopr.CMOL         := comp(DBFGetFieldValue(DBFSpSopr, 'CMOL'));
    tmpSpSopr.LASTDATE     := StrToDate(DBFGetFieldValue(DBFSpSopr, 'LASTDATE'), 'YYYYMMDD');
    tmpSpSopr.LASTTIME     := StrToTime(DBFGetFieldValue(DBFSpSopr, 'LASTTIME'), 'HH:MM');
    tmpSpSopr.RESERVE      := double(DBFGetFieldValue(DBFSpSopr, 'RESERVE'));

    If((Insert Current tmpSpSopr) <> tsOk)
    {
    }
  }
  while DBFGetNext(DBFSpSopr) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertSchFact(hMarker : longint; sDbfName : string) :boolean;//20
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSchFact := DBFOpen(sDbfName, stOpenRead);

  if (DBFSchFact = 0)
    Exit;


  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSchFact) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpSchFact);
    tmpSchFact.NREC     := comp(DBFGetFieldValue(DBFSchFact, 'NREC'));
    tmpSchFact.DIRECT   := word(DBFGetFieldValue(DBFSchFact, 'DIRECT'));
    tmpSchFact.REGDOC   := word(DBFGetFieldValue(DBFSchFact, 'REGDOC'));
    tmpSchFact.STATE    := word(DBFGetFieldValue(DBFSchFact, 'STATE'));
    tmpSchFact.STATUS   := word(DBFGetFieldValue(DBFSchFact, 'STATUS'));
    tmpSchFact.TIPUSER  := word(DBFGetFieldValue(DBFSchFact, 'TIPUSER'));
    tmpSchFact.SUBTIP   := word(DBFGetFieldValue(DBFSchFact, 'SUBTIP'));
    tmpSchFact.DFACT    := StrToDate(DBFGetFieldValue(DBFSchFact, 'DFACT'), 'YYYYMMDD');
    tmpSchFact.DPOST    := StrToDate(DBFGetFieldValue(DBFSchFact, 'DPOST'), 'YYYYMMDD');
    tmpSchFact.DREG     := StrToDate(DBFGetFieldValue(DBFSchFact, 'DREG'), 'YYYYMMDD');
    tmpSchFact.TIPNUM   := word(DBFGetFieldValue(DBFSchFact, 'TIPNUM'));
    tmpSchFact.SCHYEAR  := word(DBFGetFieldValue(DBFSchFact, 'SCHYEAR'));
    tmpSchFact.NUM      := DBFGetFieldValue(DBFSchFact, 'NUM');
    tmpSchFact.DESCR    := DBFGetFieldValue(DBFSchFact, 'DESCR');
    tmpSchFact.DESGR    := DBFGetFieldValue(DBFSchFact, 'DESGR');
    tmpSchFact.CORG     := comp(DBFGetFieldValue(DBFSchFact, 'CORG'));
    tmpSchFact.CSOPRHOZ := comp(DBFGetFieldValue(DBFSchFact, 'CSOPRHOZ'));
    tmpSchFact.CBASEDOC := comp(DBFGetFieldValue(DBFSchFact, 'CBASEDOC'));
    tmpSchFact.CSTEPDOC := comp(DBFGetFieldValue(DBFSchFact, 'CSTEPDOC'));
    tmpSchFact.FLAGS    := word(DBFGetFieldValue(DBFSchFact, 'FLAGS'));
    tmpSchFact.NAZN     := DBFGetFieldValue(DBFSchFact, 'NAZN');
    tmpSchFact.SUM[1]   := double(DBFGetFieldValue(DBFSchFact, 'SUM[1]'));
    tmpSchFact.SUM[2]   := double(DBFGetFieldValue(DBFSchFact, 'SUM[2]'));
    tmpSchFact.SUM[3]   := double(DBFGetFieldValue(DBFSchFact, 'SUM[3]'));
    tmpSchFact.SUM[4]   := double(DBFGetFieldValue(DBFSchFact, 'SUM[4]'));
    tmpSchFact.SUM[5]   := double(DBFGetFieldValue(DBFSchFact, 'SUM[5]'));
    tmpSchFact.SUM[6]   := double(DBFGetFieldValue(DBFSchFact, 'SUM[6]'));
    tmpSchFact.SUM[7]   := double(DBFGetFieldValue(DBFSchFact, 'SUM[7]'));
    tmpSchFact.SUM[8]   := double(DBFGetFieldValue(DBFSchFact, 'SUM[8]'));
    tmpSchFact.SUM[9]   := double(DBFGetFieldValue(DBFSchFact, 'SUM[9]'));
    tmpSchFact.SUM[10]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[10]'));
    tmpSchFact.SUM[11]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[11]'));
    tmpSchFact.SUM[12]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[12]'));
    tmpSchFact.SUM[13]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[13]'));
    tmpSchFact.SUM[14]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[14]'));
    tmpSchFact.SUM[15]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[15]'));
    tmpSchFact.SUM[16]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[16]'));
    tmpSchFact.SUM[17]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[17]'));
    tmpSchFact.SUM[18]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[18]'));
    tmpSchFact.SUM[19]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[19]'));
    tmpSchFact.SUM[20]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[20]'));
    tmpSchFact.SUM[21]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[21]'));
    tmpSchFact.SUM[22]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[22]'));
    tmpSchFact.SUM[23]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[23]'));
    tmpSchFact.SUM[24]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[24]'));
    tmpSchFact.SUM[25]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[25]'));
    tmpSchFact.SUM[26]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[26]'));
    tmpSchFact.SUM[27]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[27]'));
    tmpSchFact.SUM[28]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[28]'));
    tmpSchFact.SUM[29]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[29]'));
    tmpSchFact.SUM[30]  := double(DBFGetFieldValue(DBFSchFact, 'SUM[30]'));
    tmpSchFact.SUMIN[1] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[1]'));
    tmpSchFact.SUMIN[2] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[2]'));
    tmpSchFact.SUMIN[3] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[3]'));
    tmpSchFact.SUMIN[4] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[4]'));
    tmpSchFact.SUMIN[5] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[5]'));
    tmpSchFact.SUMIN[6] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[6]'));
    tmpSchFact.SUMIN[7] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[7]'));
    tmpSchFact.SUMIN[8] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[8]'));
    tmpSchFact.SUMIN[9] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[9]'));
    tmpSchFact.SUMIN[10] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[10]'));
    tmpSchFact.SUMIN[11] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[11]'));
    tmpSchFact.SUMIN[12] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[12]'));
    tmpSchFact.SUMIN[13] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[13]'));
    tmpSchFact.SUMIN[14] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[14]'));
    tmpSchFact.SUMIN[15] := double(DBFGetFieldValue(DBFSchFact, 'SUMIN[15]'));
    tmpSchFact.SUMMA     := double(DBFGetFieldValue(DBFSchFact, 'SUMMA'));
    tmpSchFact.SUMMAREG  := double(DBFGetFieldValue(DBFSchFact, 'SUMMAREG'));
    tmpSchFact.CVAL      := comp(DBFGetFieldValue(DBFSchFact, 'CVAL'));
    tmpSchFact.CGRUZFROM := comp(DBFGetFieldValue(DBFSchFact, 'CGRUZFRO'));
    tmpSchFact.CGRUZTO   := comp(DBFGetFieldValue(DBFSchFact, 'CGRUZTO'));
    tmpSchFact.CPLATDOC  := comp(DBFGetFieldValue(DBFSchFact, 'CPLATDOC'));
    tmpSchFact.CMYACC    := comp(DBFGetFieldValue(DBFSchFact, 'CMYACC'));
    tmpSchFact.CKONTRACC := comp(DBFGetFieldValue(DBFSchFact, 'CKONTRACC'));
    tmpSchFact.CORGNAL   := comp(DBFGetFieldValue(DBFSchFact, 'CORGNAL'));
    tmpSchFact.INTEXT    := word(DBFGetFieldValue(DBFSchFact, 'INTEXT'));
    tmpSchFact.MANUALTAX := word(DBFGetFieldValue(DBFSchFact, 'MANUALTA'));
    tmpSchFact.PRSTAV    := word(DBFGetFieldValue(DBFSchFact, 'PRSTAV'));
    tmpSchFact.WMEMO     := word(DBFGetFieldValue(DBFSchFact, 'WMEMO'));
    tmpSchFact.CMEMO     := comp(DBFGetFieldValue(DBFSchFact, 'CMEMO'));
    tmpSchFact.WADOC     := word(DBFGetFieldValue(DBFSchFact, 'WADOC'));
    tmpSchFact.CADOC     := comp(DBFGetFieldValue(DBFSchFact, 'CADOC'));
    tmpSchFact.DS[1]     := StrToDate(DBFGetFieldValue(DBFSchFact, 'DS[1]'), 'YYYYMMDD');
    tmpSchFact.DS[2]     := StrToDate(DBFGetFieldValue(DBFSchFact, 'DS[2]'), 'YYYYMMDD');
    tmpSchFact.DS[3]     := StrToDate(DBFGetFieldValue(DBFSchFact, 'DS[3]'), 'YYYYMMDD');
    tmpSchFact.DS[4]     := StrToDate(DBFGetFieldValue(DBFSchFact, 'DS[4]'), 'YYYYMMDD');
    tmpSchFact.DS[5]     := StrToDate(DBFGetFieldValue(DBFSchFact, 'DS[5]'), 'YYYYMMDD');
    tmpSchFact.CRECS[1]  := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[1]'));
    tmpSchFact.CRECS[2]  := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[2]'));
    tmpSchFact.CRECS[3]  := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[3]'));
    tmpSchFact.CRECS[4]  := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[4]'));
    tmpSchFact.CRECS[5]  := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[5]'));
    tmpSchFact.CRECS[6]  := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[6]'));
    tmpSchFact.CRECS[7]  := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[7]'));
    tmpSchFact.CRECS[8]  := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[8]'));
    tmpSchFact.CRECS[9]  := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[9]'));
    tmpSchFact.CRECS[10] := comp(DBFGetFieldValue(DBFSchFact, 'CRECS[10]'));
    tmpSchFact.LS[1]     := longInt(DBFGetFieldValue(DBFSchFact, 'LS[1]'));
    tmpSchFact.LS[2]     := longInt(DBFGetFieldValue(DBFSchFact, 'LS[2]'));
    tmpSchFact.LS[3]     := longInt(DBFGetFieldValue(DBFSchFact, 'LS[3]'));
    tmpSchFact.LS[4]     := longInt(DBFGetFieldValue(DBFSchFact, 'LS[4]'));
    tmpSchFact.LS[5]     := longInt(DBFGetFieldValue(DBFSchFact, 'LS[5]'));
    tmpSchFact.SS[1]     := DBFGetFieldValue(DBFSchFact, 'SS[1]');
    tmpSchFact.SS[2]     := DBFGetFieldValue(DBFSchFact, 'SS[2]');
    tmpSchFact.SS[3]     := DBFGetFieldValue(DBFSchFact, 'SS[3]');
    tmpSchFact.SS[4]     := DBFGetFieldValue(DBFSchFact, 'SS[4]');
    tmpSchFact.SS[5]     := DBFGetFieldValue(DBFSchFact, 'SS[5]');
    tmpSchFact.TIPOTVPODR := word(DBFGetFieldValue(DBFSchFact, 'TIPOTVPO'));
    tmpSchFact.COTVPODR   := comp(DBFGetFieldValue(DBFSchFact, 'COTVPODR'));

    If((Insert Current tmpSchFact) <> tsOk)
    {
    }
  }
  while DBFGetNext(DBFSchFact) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertSpSchF(hMarker : longint; sDbfName : string) :boolean;//21
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSPSchF := DBFOpen(sDbfName, stOpenRead);

  if (DBFSPSchF = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSPSchF) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpSpSchF);
    tmpSpSchF.NREC     := comp(DBFGetFieldValue(DBFSPSchF, 'NREC'));
    tmpSpSchF.NUMPOS        := LongInt(DBFGetFieldValue(DBFSPSchF, 'NUMPOS'));
    tmpSpSchF.NAME          := DBFGetFieldValue(DBFSPSchF, 'NAME');
    tmpSpSchF.CSCHFACT      := comp(DBFGetFieldValue(DBFSPSchF, 'CSCHFACT'));
    tmpSpSchF.CMCUSL        := comp(DBFGetFieldValue(DBFSPSchF, 'CMCUSL'));
    tmpSpSchF.COTPED        := comp(DBFGetFieldValue(DBFSPSchF, 'COTPED'));
    tmpSpSchF.PRMC          := word(DBFGetFieldValue(DBFSPSchF, 'PRMC'));
    tmpSpSchF.KOLOPL        := double(DBFGetFieldValue(DBFSPSchF, 'KOLOPL'));
    tmpSpSchF.CVAL          := comp(DBFGetFieldValue(DBFSPSchF  , 'CVAL'));
    tmpSpSchF.CPARTY        := comp(DBFGetFieldValue(DBFSPSchF  , 'CPARTY'));
    tmpSpSchF.CGRNAL        := comp(DBFGetFieldValue(DBFSPSchF  , 'CGRNAL'));
    tmpSpSchF.MANUALTAX     := word(DBFGetFieldValue(DBFSPSchF  , 'MANUALTA'));
    tmpSpSchF.PRICE         := double(DBFGetFieldValue(DBFSPSchF, 'PRICE'));
    tmpSpSchF.PRNONDS       := double(DBFGetFieldValue(DBFSPSchF, 'PRNONDS'));
    tmpSpSchF.AKCIZPR       := double(DBFGetFieldValue(DBFSPSchF, 'AKCIZPR'));
    tmpSpSchF.SUM           := double(DBFGetFieldValue(DBFSPSchF, 'SUM'));
    tmpSpSchF.AKCIZSUM      := double(DBFGetFieldValue(DBFSPSchF, 'AKCIZSUM'));
    tmpSpSchF.PERCNDS       := double(DBFGetFieldValue(DBFSPSchF, 'PERCNDS'));
    tmpSpSchF.NDS           := double(DBFGetFieldValue(DBFSPSchF, 'NDS'));
    tmpSpSchF.DRNAL         := double(DBFGetFieldValue(DBFSPSchF, 'DRNAL'));
    tmpSpSchF.SUMALL        := double(DBFGetFieldValue(DBFSPSchF, 'SUMALL'));
    tmpSpSchF.VPRICE        := double(DBFGetFieldValue(DBFSPSchF, 'VPRICE'));
    tmpSpSchF.VPRNONDS      := double(DBFGetFieldValue(DBFSPSchF, 'VPRNONDS'));
    tmpSpSchF.VAKCIZPR      := double(DBFGetFieldValue(DBFSPSchF, 'VAKCIZPR'));
    tmpSpSchF.VSUM          := double(DBFGetFieldValue(DBFSPSchF, 'VSUM'));
    tmpSpSchF.VAKCIZSUM     := double(DBFGetFieldValue(DBFSPSchF, 'VAKCIZSU'));
    tmpSpSchF.VPERCNDS      := double(DBFGetFieldValue(DBFSPSchF, 'VPERCNDS'));
    tmpSpSchF.VNDS          := double(DBFGetFieldValue(DBFSPSchF, 'VNDS'));
    tmpSpSchF.VDRNAL        := double(DBFGetFieldValue(DBFSPSchF, 'VDRNAL'));
    tmpSpSchF.VSUMALL       := double(DBFGetFieldValue(DBFSPSchF, 'VSUMALL'));
    tmpSpSchF.DS[1]         := StrToDate(DBFGetFieldValue(DBFSPSchF, 'DS[1]'), 'YYYYMMDD');
    tmpSpSchF.DS[2]         := StrToDate(DBFGetFieldValue(DBFSPSchF, 'DS[2]'), 'YYYYMMDD');
    tmpSpSchF.DS[3]         := StrToDate(DBFGetFieldValue(DBFSPSchF, 'DS[3]'), 'YYYYMMDD');
    tmpSpSchF.DS[4]         := StrToDate(DBFGetFieldValue(DBFSPSchF, 'DS[4]'), 'YYYYMMDD');
    tmpSpSchF.DS[5]         := StrToDate(DBFGetFieldValue(DBFSPSchF, 'DS[5]'), 'YYYYMMDD');
    tmpSpSchF.CRECS[1]      := comp(DBFGetFieldValue(DBFSPSchF, 'CRECS[1]'));
    tmpSpSchF.CRECS[2]      := comp(DBFGetFieldValue(DBFSPSchF, 'CRECS[2]'));
    tmpSpSchF.CRECS[3]      := comp(DBFGetFieldValue(DBFSPSchF, 'CRECS[3]'));
    tmpSpSchF.CRECS[4]      := comp(DBFGetFieldValue(DBFSPSchF, 'CRECS[4]'));
    tmpSpSchF.CRECS[5]      := comp(DBFGetFieldValue(DBFSPSchF, 'CRECS[5]'));
    tmpSpSchF.LS[1]         := longInt(DBFGetFieldValue(DBFSPSchF, 'LS[1]'));
    tmpSpSchF.LS[2]         := longInt(DBFGetFieldValue(DBFSPSchF, 'LS[2]'));
    tmpSpSchF.LS[3]         := longInt(DBFGetFieldValue(DBFSPSchF, 'LS[3]'));
    tmpSpSchF.LS[4]         := longInt(DBFGetFieldValue(DBFSPSchF, 'LS[4]'));
    tmpSpSchF.LS[5]         := longInt(DBFGetFieldValue(DBFSPSchF, 'LS[5]'));
    tmpSpSchF.FS[1]         := double(DBFGetFieldValue(DBFSPSchF, 'FS[1]'));
    tmpSpSchF.FS[2]         := double(DBFGetFieldValue(DBFSPSchF, 'FS[2]'));
    tmpSpSchF.FS[3]         := double(DBFGetFieldValue(DBFSPSchF, 'FS[3]'));
    tmpSpSchF.FS[4]         := double(DBFGetFieldValue(DBFSPSchF, 'FS[4]'));
    tmpSpSchF.FS[5]         := double(DBFGetFieldValue(DBFSPSchF, 'FS[5]'));
    tmpSpSchF.FS[6]         := double(DBFGetFieldValue(DBFSPSchF, 'FS[6]'));
    tmpSpSchF.FS[7]         := double(DBFGetFieldValue(DBFSPSchF, 'FS[7]'));
    tmpSpSchF.FS[8]         := double(DBFGetFieldValue(DBFSPSchF, 'FS[8]'));
    tmpSpSchF.FS[9]         := double(DBFGetFieldValue(DBFSPSchF, 'FS[9]'));
    tmpSpSchF.FS[10]        := double(DBFGetFieldValue(DBFSPSchF, 'FS[10]'));
    tmpSpSchF.FS[11]        := double(DBFGetFieldValue(DBFSPSchF, 'FS[11]'));
    tmpSpSchF.FS[12]        := double(DBFGetFieldValue(DBFSPSchF, 'FS[12]'));
    tmpSpSchF.FS[13]        := double(DBFGetFieldValue(DBFSPSchF, 'FS[13]'));
    tmpSpSchF.FS[14]        := double(DBFGetFieldValue(DBFSPSchF, 'FS[14]'));
    tmpSpSchF.FS[15]        := double(DBFGetFieldValue(DBFSPSchF, 'FS[15]'));
    tmpSpSchF.SS[1]         := DBFGetFieldValue(DBFSPSchF, 'SS[1]');
    tmpSpSchF.SS[2]         := DBFGetFieldValue(DBFSPSchF, 'SS[2]');
    tmpSpSchF.SS[3]         := DBFGetFieldValue(DBFSPSchF, 'SS[3]');
    tmpSpSchF.SS[4]         := DBFGetFieldValue(DBFSPSchF, 'SS[4]');
    tmpSpSchF.SS[5]         := DBFGetFieldValue(DBFSPSchF, 'SS[5]');
    tmpSpSchF.WPRREST       := word(DBFGetFieldValue(DBFSPSchF  , 'WPRREST'));
    tmpSpSchF.DBLREST       := double(DBFGetFieldValue(DBFSPSchF, 'DBLREST'));
    tmpSpSchF.COBJECT       := comp(DBFGetFieldValue(DBFSPSchF  , 'COBJECT'));

    If((Insert Current tmpSpSchF) <> tsOk)
    {
    }
  }
  while DBFGetNext(DBFSPSchF) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertUsersDoc(hMarker : longint; sDbfName : string) :boolean;//22
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFUsersDoc := DBFOpen(sDbfName, stOpenRead);

  if (DBFUsersDoc = 0)
    Exit;


  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFUsersDoc) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpUsersDoc);
    tmpUsersDoc.NREC         := comp(DBFGetFieldValue(DBFUsersDoc, 'NREC'));
    tmpUsersDoc.RAZDEL       := word(DBFGetFieldValue(DBFUsersDoc, 'RAZDEL'));
    tmpUsersDoc.TIPGAL       := word(DBFGetFieldValue(DBFUsersDoc, 'TIPGAL'));
    tmpUsersDoc.TIPUSERS     := word(DBFGetFieldValue(DBFUsersDoc, 'TIPUSERS'));
    tmpUsersDoc.NAME         := DBFGetFieldValue(DBFUsersDoc     , 'NAME');
    tmpUsersDoc.CCASHBANK    := comp(DBFGetFieldValue(DBFUsersDoc, 'CCASHBAN'));
    tmpUsersDoc.TIPNUM       := word(DBFGetFieldValue(DBFUsersDoc, 'TIPNUM'));
    tmpUsersDoc.SUBTIP       := word(DBFGetFieldValue(DBFUsersDoc, 'SUBTIP'));
    tmpUsersDoc.SHNAME       := DBFGetFieldValue(DBFUsersDoc     , 'SHNAME');
    tmpUsersDoc.FLAGS        := LongInt(DBFGetFieldValue(DBFUsersDoc, 'FLAGS'));

    If((Insert Current tmpUsersDoc) <> tsOk)
    {
    }
  }
  while DBFGetNext(DBFUsersDoc) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertBaseDoc(hMarker : longint; sDbfName : string) :boolean;//23
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFBaseDoc := DBFOpen(sDbfName, stOpenRead);

  if (DBFBaseDoc = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFBaseDoc) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpBaseDoc);
    tmpBaseDoc.NREC             := comp(DBFGetFieldValue(DBFBaseDoc, 'NREC'));
    tmpBaseDoc.NAME             := DBFGetFieldValue(DBFBaseDoc, 'NAME');
    tmpBaseDoc.DESCR            := DBFGetFieldValue(DBFBaseDoc, 'DESCR');
    tmpBaseDoc.DESGR            := DBFGetFieldValue(DBFBaseDoc, 'DESGR');
    tmpBaseDoc.CORG             := comp(DBFGetFieldValue(DBFBaseDoc    , 'CORG'));
    tmpBaseDoc.SUMMA            := double(DBFGetFieldValue(DBFBaseDoc  , 'SUMMA'));
    tmpBaseDoc.CVAL             := comp(DBFGetFieldValue(DBFBaseDoc    , 'CVAL'));
    tmpBaseDoc.SUMVAL           := double(DBFGetFieldValue(DBFBaseDoc  , 'SUMVAL'));
    tmpBaseDoc.VHODNAL          := word(DBFGetFieldValue(DBFBaseDoc    , 'VHODNAL'));
    tmpBaseDoc.DPRICE           := StrToDate(DBFGetFieldValue(DBFBaseDoc, 'DPRICE'), 'YYYYMMDD');
    tmpBaseDoc.CCOMPL           := comp(DBFGetFieldValue(DBFBaseDoc    , 'CCOMPL'));
    tmpBaseDoc.KOLKOMPL         := double(DBFGetFieldValue(DBFBaseDoc  , 'KOLKOMPL'));
    tmpBaseDoc.RNDR             := double(DBFGetFieldValue(DBFBaseDoc  , 'RNDR'));
    tmpBaseDoc.RNDV             := double(DBFGetFieldValue(DBFBaseDoc  , 'RNDV'));
    tmpBaseDoc.CNAZNA           := comp(DBFGetFieldValue(DBFBaseDoc    , 'CNAZNA'));
    tmpBaseDoc.CDOGOVOR         := comp(DBFGetFieldValue(DBFBaseDoc    , 'CDOGOVOR'));
    tmpBaseDoc.CAPPDOGOVOR      := comp(DBFGetFieldValue(DBFBaseDoc    , 'CAPPDOGO'));
    tmpBaseDoc.CCALPLAN         := comp(DBFGetFieldValue(DBFBaseDoc    , 'CCALPLAN'));
    tmpBaseDoc.CPERSON          := comp(DBFGetFieldValue(DBFBaseDoc    , 'CPERSON'));
    tmpBaseDoc.CDOVER           := comp(DBFGetFieldValue(DBFBaseDoc    , 'CDOVER'));
    tmpBaseDoc.NDOVER           := DBFGetFieldValue(DBFBaseDoc         , 'NDOVER');
    tmpBaseDoc.DDOVER           := StrToDate(DBFGetFieldValue(DBFBaseDoc, 'DDOVER'), 'YYYYMMDD');
    tmpBaseDoc.SDOVER           := DBFGetFieldValue(DBFBaseDoc         , 'SDOVER');
    tmpBaseDoc.CDOVFIO          := comp(DBFGetFieldValue(DBFBaseDoc    , 'CDOVFIO'));
    tmpBaseDoc.STATUS           := word(DBFGetFieldValue(DBFBaseDoc    , 'STATUS'));
    tmpBaseDoc.CNOTE            := comp(DBFGetFieldValue(DBFBaseDoc    , 'CNOTE'));
    tmpBaseDoc.CPAYMENT         := comp(DBFGetFieldValue(DBFBaseDoc    , 'CPAYMENT'));
    tmpBaseDoc.CTRANSP          := comp(DBFGetFieldValue(DBFBaseDoc    , 'CTRANSP'));
    tmpBaseDoc.NVAGON           := DBFGetFieldValue(DBFBaseDoc         , 'NVAGON');
    tmpBaseDoc.NKVIT            := DBFGetFieldValue(DBFBaseDoc         , 'NKVIT');
    tmpBaseDoc.NSERTIF          := DBFGetFieldValue(DBFBaseDoc         , 'NSERTIF');
    tmpBaseDoc.CMASED           := comp(DBFGetFieldValue(DBFBaseDoc    , 'CMASED'));
    tmpBaseDoc.CMASVID          := comp(DBFGetFieldValue(DBFBaseDoc    , 'CMASVID'));
    tmpBaseDoc.NETTO            := double(DBFGetFieldValue(DBFBaseDoc  , 'NETTO'));
    tmpBaseDoc.MTARA            := double(DBFGetFieldValue(DBFBaseDoc  , 'MTARA'));
    tmpBaseDoc.VIDDOC           := word(DBFGetFieldValue(DBFBaseDoc     , 'VIDDOC'));
    tmpBaseDoc.NODOC            := DBFGetFieldValue(DBFBaseDoc          , 'NODOC');
    tmpBaseDoc.DFORM            := StrToDate(DBFGetFieldValue(DBFBaseDoc, 'DFORM'), 'YYYYMMDD');
    tmpBaseDoc.DDOC             := StrToDate(DBFGetFieldValue(DBFBaseDoc, 'DDOC'), 'YYYYMMDD');
    tmpBaseDoc.YEARDOC          := word(DBFGetFieldValue(DBFBaseDoc     , 'YEARDOC'));
    tmpBaseDoc.KOLDN            := word(DBFGetFieldValue(DBFBaseDoc     , 'KOLDN'));
    tmpBaseDoc.DEND             := StrToDate(DBFGetFieldValue(DBFBaseDoc, 'DEND'), 'YYYYMMDD');
    tmpBaseDoc.CBANK            := comp(DBFGetFieldValue(DBFBaseDoc     , 'CBANK'));
    tmpBaseDoc.CDOGAGR          := comp(DBFGetFieldValue(DBFBaseDoc     , 'CDOGAGR'));
    tmpBaseDoc.CMYBANK          := comp(DBFGetFieldValue(DBFBaseDoc     , 'CMYBANK'));
    tmpBaseDoc.SHTRAF           := word(DBFGetFieldValue(DBFBaseDoc     , 'SHTRAF'));
    tmpBaseDoc.SKIDKA           := double(DBFGetFieldValue(DBFBaseDoc   , 'SKIDKA'));
    tmpBaseDoc.NDS              := double(DBFGetFieldValue(DBFBaseDoc   , 'NDS'));
    tmpBaseDoc.DOPPROC          := double(DBFGetFieldValue(DBFBaseDoc   , 'DOPPROC'));
    tmpBaseDoc.TOTAL            := double(DBFGetFieldValue(DBFBaseDoc   , 'TOTAL'));
    tmpBaseDoc.TOTALNDE         := double(DBFGetFieldValue(DBFBaseDoc   , 'TOTALND'));
    tmpBaseDoc.CGRPOL           := comp(DBFGetFieldValue(DBFBaseDoc     , 'CGRPOL'));
    tmpBaseDoc.CGROTPR          := comp(DBFGetFieldValue(DBFBaseDoc     , 'CGROTPR'));
    tmpBaseDoc.CSTATDOC         := comp(DBFGetFieldValue(DBFBaseDoc     , 'CSTATDOC'));
    tmpBaseDoc.DIRECT           := word(DBFGetFieldValue(DBFBaseDoc     , 'DIRECT'));
    tmpBaseDoc.TIPMONEY         := word(DBFGetFieldValue(DBFBaseDoc     , 'TIPMONEY'));
    tmpBaseDoc.PRIOR            := DBFGetFieldValue(DBFBaseDoc          , 'PRIOR');
    tmpBaseDoc.CNALOG           := comp(DBFGetFieldValue(DBFBaseDoc     , 'CNALOG'));
    tmpBaseDoc.CPARTY           := comp(DBFGetFieldValue(DBFBaseDoc     , 'CPARTY'));
    tmpBaseDoc.CPODRTO          := comp(DBFGetFieldValue(DBFBaseDoc     , 'CPODRTO'));
    tmpBaseDoc.DOTSROCH         := StrToDate(DBFGetFieldValue(DBFBaseDoc, 'DOTSROCH'), 'YYYYMMDD');
    tmpBaseDoc.VHSKID           := word(DBFGetFieldValue(DBFBaseDoc     , 'VHSKID'));
    tmpBaseDoc.VALCURSE         := double(DBFGetFieldValue(DBFBaseDoc   , 'VALCURSE'));
    tmpBaseDoc.DVALCURSE        := StrToDate(DBFGetFieldValue(DBFBaseDoc, 'DVALCURS'), 'YYYYMMDD');
    tmpBaseDoc.CSKLAD           := comp(DBFGetFieldValue(DBFBaseDoc     , 'CSKLAD'));
    tmpBaseDoc.CZAKAZ           := comp(DBFGetFieldValue(DBFBaseDoc     , 'CZAKAZ'));
    tmpBaseDoc.CIZD             := comp(DBFGetFieldValue(DBFBaseDoc     , 'CIZD'));
    tmpBaseDoc.WCIZD            := word(DBFGetFieldValue(DBFBaseDoc     , 'WCIZD'));
    tmpBaseDoc.PROCOPL          := double(DBFGetFieldValue(DBFBaseDoc   , 'PROCOPL'));
    tmpBaseDoc.SPECYES          := word(DBFGetFieldValue(DBFBaseDoc     , 'SPECYES'));
    tmpBaseDoc.TYPEDOC          := word(DBFGetFieldValue(DBFBaseDoc     , 'TYPEDOC'));
    tmpBaseDoc.CCELLVAL         := comp(DBFGetFieldValue(DBFBaseDoc     , 'CCELLVAL'));
    tmpBaseDoc.CNMOVECELL       := comp(DBFGetFieldValue(DBFBaseDoc     , 'CNMOVECE'));
    tmpBaseDoc.TARAVOZ          := word(DBFGetFieldValue(DBFBaseDoc     , 'TARAVOZ'));
    tmpBaseDoc.TIPOTVPODR       := word(DBFGetFieldValue(DBFBaseDoc     , 'TIPOTVPO'));
    tmpBaseDoc.COTVPODR         := comp(DBFGetFieldValue(DBFBaseDoc     , 'COTVPODR'));
    tmpBaseDoc.WCURSFORPLPOR    := word(DBFGetFieldValue(DBFBaseDoc     , 'WCURSFOR'));

    If((Insert Current tmpBaseDoc) <> tsOk)
    {
    }
  }
  while DBFGetNext(DBFBaseDoc) = tsOk;
  StopVisual('',0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertSpStep(hMarker : longint; sDbfName : string) :boolean;//24
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSpStep := DBFOpen(sDbfName, stOpenRead);

  if (DBFSpStep = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSpStep) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpSpStep);
    tmpSpStep.NREC             := comp(DBFGetFieldValue(DBFSpStep, 'NREC'));
    tmpSpStep.CSPSOPR          := comp(DBFGetFieldValue(DBFSpStep, 'CSPSOPR'));
    tmpSpStep.NPP              := word(DBFGetFieldValue(DBFSpStep, 'NPP'));
    tmpSpStep.PRMC             := word(DBFGetFieldValue(DBFSpStep, 'PRMC'));
    tmpSpStep.CMCUSL           := comp(DBFGetFieldValue(DBFSpStep, 'CMCUSL'));
    tmpSpStep.COTPED           := comp(DBFGetFieldValue(DBFSpStep, 'COTPED'));
    tmpSpStep.CALTED           := comp(DBFGetFieldValue(DBFSpStep, 'CALTED'));
    tmpSpStep.CPARTY           := comp(DBFGetFieldValue(DBFSpStep, 'CPARTY'));
    tmpSpStep.CVAL             := comp(DBFGetFieldValue(DBFSpStep, 'CVAL'));
    tmpSpStep.CPRICELIST       := comp(DBFGetFieldValue(DBFSpStep, 'CPRICELI'));
    tmpSpStep.KOL              := double(DBFGetFieldValue(DBFSpStep, 'KOL'));
    tmpSpStep.KOLOPL           := double(DBFGetFieldValue(DBFSpStep, 'KOLOPL'));
    tmpSpStep.OSTKOL           := double(DBFGetFieldValue(DBFSpStep, 'OSTKOL'));
    tmpSpStep.PRICE            := double(DBFGetFieldValue(DBFSpStep, 'PRICE'));
    tmpSpStep.PROCUB           := double(DBFGetFieldValue(DBFSpStep, 'PROCUB'));
    tmpSpStep.CPERSONS         := comp(DBFGetFieldValue(DBFSpStep  , 'CPERSONS'));
    tmpSpStep.MANUALTAX        := word(DBFGetFieldValue(DBFSpStep  , 'MANUALTA'));
    tmpSpStep.CGRNAL           := comp(DBFGetFieldValue(DBFSpStep  , 'CGRNAL'));
    tmpSpStep.CCELLVAL         := comp(DBFGetFieldValue(DBFSpStep  , 'CCELLVAL'));
    tmpSpStep.CTRANSP          := comp(DBFGetFieldValue(DBFSpStep  , 'CTRANSP'));
    tmpSpStep.NVAGON           := DBFGetFieldValue(DBFSpStep       , 'NVAGON');
    tmpSpStep.NKVIT            := DBFGetFieldValue(DBFSpStep       , 'NKVIT');
    tmpSpStep.NSERTIF          := DBFGetFieldValue(DBFSpStep       , 'NSERTIF');
    tmpSpStep.SUMAVT           := double(DBFGetFieldValue(DBFSpStep, 'SUMAVT'));
    tmpSpStep.CVALAVT          := comp(DBFGetFieldValue(DBFSpStep  , 'CVALAVT'));
    tmpSpStep.CMASED           := comp(DBFGetFieldValue(DBFSpStep  , 'CMASED'));
    tmpSpStep.CMASVID          := comp(DBFGetFieldValue(DBFSpStep  , 'CMASVID'));
    tmpSpStep.NETTO            := double(DBFGetFieldValue(DBFSpStep, 'NETTO'));
    tmpSpStep.MTARA            := double(DBFGetFieldValue(DBFSpStep, 'MTARA'));
    tmpSpStep.CRESOTGR         := comp(DBFGetFieldValue(DBFSpStep  , 'CRESOTGR'));
    tmpSpStep.CSPDOCS          := comp(DBFGetFieldValue(DBFSpStep  , 'CSPDOCS'));
    tmpSpStep.DDOC             := StrToDate(DBFGetFieldValue(DBFSpStep, 'DDOC'), 'YYYYMMDD');
    tmpSpStep.CSTEPDOC         := comp(DBFGetFieldValue(DBFSpStep  , 'CSTEPDOC'));
    tmpSpStep.KOLSKL           := double(DBFGetFieldValue(DBFSpStep, 'KOLSKL'));
    tmpSpStep.SUMMA            := double(DBFGetFieldValue(DBFSpStep, 'SUMMA'));
    tmpSpStep.RESERV           := double(DBFGetFieldValue(DBFSpStep, 'RESERV'));
    tmpSpStep.SUMVAL           := double(DBFGetFieldValue(DBFSpStep, 'SUMVAL'));
    tmpSpStep.GARANT           := double(DBFGetFieldValue(DBFSpStep, 'GARANT'));
    tmpSpStep.SROKRES          := StrToDate(DBFGetFieldValue(DBFSpStep, 'SROKRES'), 'YYYYMMDD');
    tmpSpStep.SOPUSL           := word(DBFGetFieldValue(DBFSpStep  , 'SOPUSL'));
    tmpSpStep.STOTOV           := double(DBFGetFieldValue(DBFSpStep, 'STOTOV'));
    tmpSpStep.PRSKID           := word(DBFGetFieldValue(DBFSpStep  , 'PRSKID'));
    tmpSpStep.VLSKID           := double(DBFGetFieldValue(DBFSpStep, 'VLSKID'));
    tmpSpStep.NDS              := double(DBFGetFieldValue(DBFSpStep, 'NDS'));
    tmpSpStep.PRUSNKL          := word(DBFGetFieldValue(DBFSpStep  , 'PRUSNKL'));
    tmpSpStep.CSPMC            := comp(DBFGetFieldValue(DBFSpStep  , 'CSPMC'));
    tmpSpStep.CDOGOVOR         := comp(DBFGetFieldValue(DBFSpStep  , 'CDOGOVOR'));
    tmpSpStep.CAPPDOGOVOR      := comp(DBFGetFieldValue(DBFSpStep  , 'CAPPDOGO'));
    tmpSpStep.CCALPLAN         := comp(DBFGetFieldValue(DBFSpStep  , 'CCALPLAN'));
    tmpSpStep.KOLGRM           := double(DBFGetFieldValue(DBFSpStep, 'KOLGRM'));
    tmpSpStep.COTPEDGRM        := comp(DBFGetFieldValue(DBFSpStep  , 'COTPEDGR'));
    tmpSpStep.CNMOVECELL       := comp(DBFGetFieldValue(DBFSpStep  , 'CNMOVECE'));
    tmpSpStep.COWNER           := comp(DBFGetFieldValue(DBFSpStep  , 'COWNER'));
    tmpSpStep.PRVOZ            := word(DBFGetFieldValue(DBFSpStep  , 'PRVOZ'));
    tmpSpStep.KOLDOP           := double(DBFGetFieldValue(DBFSpStep, 'KOLDOP'));
    tmpSpStep.CUKS             := comp(DBFGetFieldValue(DBFSpStep  , 'CUKS'));
    tmpSpStep.WMCPROP          := word(DBFGetFieldValue(DBFSpStep  , 'WMCPROP'));

    If((Insert Current tmpSpStep) <> tsOk)
    {
    }
  }
  while DBFGetNext(DBFSpStep) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertStepDoc(hMarker : longint; sDbfName : string) :boolean;
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFStepDoc := DBFOpen(sDbfName, stOpenRead);

  if (DBFStepDoc = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFStepDoc) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpStepDoc);
    tmpStepDoc.NREC             := comp(DBFGetFieldValue(DBFStepDoc, 'NREC'));
    tmpStepDoc.CBASEDOC             := comp(DBFGetFieldValue(DBFStepDoc, 'CBASEDOC'));
    tmpStepDoc.NAME                 := DBFGetFieldValue(DBFStepDoc, 'NAME');
    tmpStepDoc.NSTEP                := DBFGetFieldValue(DBFStepDoc, 'NSTEP');
    tmpStepDoc.DSTART               := StrToDate(DBFGetFieldValue(DBFStepDoc, 'DSTART'), 'YYYYMMDD');
    tmpStepDoc.DEND                 := StrToDate(DBFGetFieldValue(DBFStepDoc, 'DEND'), 'YYYYMMDD');
    tmpStepDoc.SUMMA                := double(DBFGetFieldValue(DBFStepDoc, 'SUMMA'));
    tmpStepDoc.CVAL                 := comp(DBFGetFieldValue(DBFStepDoc, 'CVAL'));
    tmpStepDoc.SUMVAL               := double(DBFGetFieldValue(DBFStepDoc, 'SUMVAL'));
    tmpStepDoc.CSTATDOC             := comp(DBFGetFieldValue(DBFStepDoc, 'CSTATDOC'));
    tmpStepDoc.STATUS               := word(DBFGetFieldValue(DBFStepDoc, 'STATUS'));
    tmpStepDoc.DIZVMAX              := StrToDate(DBFGetFieldValue(DBFStepDoc, 'DIZVMAX '), 'YYYYMMDD');
    tmpStepDoc.DIZVFACT             := StrToDate(DBFGetFieldValue(DBFStepDoc, 'DIZVFACT'), 'YYYYMMDD');
    tmpStepDoc.DOPLMAX              := StrToDate(DBFGetFieldValue(DBFStepDoc, 'DOPLMAX'), 'YYYYMMDD');
    tmpStepDoc.DOPLFACT             := StrToDate(DBFGetFieldValue(DBFStepDoc, 'DOPLFACT'), 'YYYYMMDD');
    tmpStepDoc.DOTGR                := StrToDate(DBFGetFieldValue(DBFStepDoc, 'DOTGR'), 'YYYYMMDD');
    tmpStepDoc.DZABOR               := StrToDate(DBFGetFieldValue(DBFStepDoc, 'DZABOR'), 'YYYYMMDD');
    tmpStepDoc.DVT                  := StrToDate(DBFGetFieldValue(DBFStepDoc, 'DVT'), 'YYYYMMDD');
    tmpStepDoc.CSHTRAFP             := comp(DBFGetFieldValue(DBFStepDoc, 'CSHTRAFP'));
    tmpStepDoc.CSHTRAFG             := comp(DBFGetFieldValue(DBFStepDoc, 'CSHTRAFG'));
    tmpStepDoc.CSHTRAFT             := comp(DBFGetFieldValue(DBFStepDoc, 'CSHTRAFT'));
    tmpStepDoc.NSERT                := DBFGetFieldValue(DBFStepDoc, 'NSERT');
    tmpStepDoc.NKONT                := DBFGetFieldValue(DBFStepDoc, 'NKONT');
    tmpStepDoc.KONTPRI              := DBFGetFieldValue(DBFStepDoc, 'KONTPRI');

    If((Insert Current tmpStepDoc) <> tsOk)
    {
    }
  }
  while DBFGetNext(DBFStepDoc) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}
//вставка организаций
Function InsertKatOrg(hMarker : longint; sDbfName : string) : boolean;//3
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatOrg := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatOrg = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatOrg) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatOrg);
    tmpKatOrg.NREC := comp(DBFGetFieldValue(DBFKatOrg, 'NREC'));
    tmpKatOrg.NAME := DBFGetFieldValue(DBFKatOrg, 'NAME');
    tmpKatOrg.CODE := DBFGetFieldValue(DBFKatOrg, 'CODE');
    insert current tmpKatOrg;
  }
  while DBFGetNext(DBFKatOrg) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertKatBank(hMarker : longint; sDbfName : string) : boolean;//4
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatBank := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatBank = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatBank) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatBank);
    tmpKatBank.NREC := comp(DBFGetFieldValue(DBFKatBank, 'NREC'));
    tmpKatBank.NAME := DBFGetFieldValue(DBFKatBank, 'NAME');
    tmpKatBank.SCHET1 := DBFGetFieldValue(DBFKatBank, 'SCHET1');
    tmpKatBank.MFO1 := DBFGetFieldValue(DBFKatBank, 'MFO1');
    insert current tmpKatBank;
  }
  while DBFGetNext(DBFKatBank) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertKatPodr(hMarker : longint; sDbfName : string) : boolean;//5
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatPodr := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatPodr = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatPodr) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatPodr);
    tmpKatPodr.NREC := comp(DBFGetFieldValue(DBFKatPodr, 'NREC'));
    tmpKatPodr.NAME := DBFGetFieldValue(DBFKatPodr, 'NAME');
    tmpKatPodr.KOD := DBFGetFieldValue(DBFKatPodr, 'KOD');
    insert current tmpKatPodr;
  }
  while DBFGetNext(DBFKatPodr) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertKatMC(hMarker : longint; sDbfName : string) : boolean;//7
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatMC := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatMC = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatMC) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatMC);
    tmpKatMC.NREC := comp(DBFGetFieldValue(DBFKatMC, 'NREC'));
    tmpKatMC.NAME := DBFGetFieldValue(DBFKatMC, 'NAME');
    tmpKatMC.BARKOD := DBFGetFieldValue(DBFKatMC, 'BARKOD');
    insert current tmpKatMC;
  }
  while DBFGetNext(DBFKatMC) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertKatUsl(hMarker : longint; sDbfName : string) : boolean;//7
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatUsl := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatUsl = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatUsl) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatUsl);
    tmpKatUsl.NREC := comp(DBFGetFieldValue(DBFKatUsl, 'NREC'));
    tmpKatUsl.NAME := DBFGetFieldValue(DBFKatUsl, 'NAME');
    tmpKatUsl.KOD := DBFGetFieldValue(DBFKatUsl, 'KOD');
    insert current tmpKatUsl;
  }
  while DBFGetNext(DBFKatUsl) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertKatOtpEd(hMarker : longint; sDbfName : string) : boolean;//8
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatOtpEd := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatOtpEd = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatOtpEd) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatOtpEd);
    tmpKatOtpEd.NREC := comp(DBFGetFieldValue(DBFKatOtpEd, 'NREC'));
    tmpKatOtpEd.NAME := DBFGetFieldValue(DBFKatOtpEd, 'NAME');
    tmpKatOtpEd.BKOD := DBFGetFieldValue(DBFKatOtpEd, 'BKOD');
    insert current tmpKatOtpEd;
  }
  while DBFGetNext(DBFKatOtpEd) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertFpCO(hMarker : longint; sDbfName : string) : boolean;//10
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFFPCO := DBFOpen(sDbfName, stOpenRead);

  if (DBFFPCO = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFFPCO) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpFpCO);
    tmpFpCO.NREC := comp(DBFGetFieldValue(DBFFPCO, 'NREC'));
    tmpFpCO.NAME := DBFGetFieldValue(DBFFPCO, 'NAME');
    tmpFpCO.CODE := DBFGetFieldValue(DBFFPCO, 'CODE');
    insert current tmpFpCO;
  }
  while DBFGetNext(DBFFPCO) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertKatMol(hMarker : longint; sDbfName : string) : boolean;//12
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatMol := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatMol = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatMol) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatMol);
    tmpKatMol.NREC := comp(DBFGetFieldValue(DBFKatMol, 'NREC'));
    tmpKatMol.NAME := DBFGetFieldValue(DBFKatMol, 'NAME');
    tmpKatMol.KOD := DBFGetFieldValue(DBFKatMol, 'KOD');
    insert current tmpKatMol;
  }
  while DBFGetNext(DBFKatMol) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertKatParty(hMarker : longint; sDbfName : string) : boolean;//13
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatParty := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatParty = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatParty) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatParty);
    tmpKatParty.NREC := comp(DBFGetFieldValue(DBFKatParty, 'NREC'));
    tmpKatParty.NAME := DBFGetFieldValue(DBFKatParty, 'NAME');
    tmpKatParty.KOD := DBFGetFieldValue(DBFKatParty, 'KOD');
    insert current tmpKatParty;
  }
  while DBFGetNext(DBFKatParty) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertGrNal(hMarker : longint; sDbfName : string) : boolean;//14
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFGrNal := DBFOpen(sDbfName, stOpenRead);

  if (DBFGrNal = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFGrNal) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmp_GrNal);
    tmp_GrNal.NREC := comp(DBFGetFieldValue(DBFGrNal, 'NREC'));
    tmp_GrNal.NAME := DBFGetFieldValue(DBFGrNal, 'NAME');
    tmp_GrNal.KOD := DBFGetFieldValue(DBFGrNal, 'KOD');
    insert current tmp_GrNal;
  }
  while DBFGetNext(DBFGrNal) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertSaldTune(hMarker : longint; sDbfName : string) : boolean;//15
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSaldTune := DBFOpen(sDbfName, stOpenRead);

  if (DBFSaldTune = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFSaldTune) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpSaldTune);

    tmpSaldTune.NREC := comp(DBFGetFieldValue(DBFSaldTune, 'NREC'));
    tmpSaldTune.NAME := DBFGetFieldValue(DBFSaldTune, 'NAME');
    tmpSaldTune.CODE := DBFGetFieldValue(DBFSaldTune, 'CODE');
    tmpSaldTune.WTYPE := word(DBFGetFieldValue(DBFSaldTune, 'WTYPE'));

    tmpSaldTune.WKAU1 := word(DBFGetFieldValue(DBFSaldTune, 'WKAU1'));
    tmpSaldTune.WKAU2 := word(DBFGetFieldValue(DBFSaldTune, 'WKAU2'));
    tmpSaldTune.WKAU3 := word(DBFGetFieldValue(DBFSaldTune, 'WKAU3'));
    tmpSaldTune.WKAU4 := word(DBFGetFieldValue(DBFSaldTune, 'WKAU4'));
    tmpSaldTune.WKAU5 := word(DBFGetFieldValue(DBFSaldTune, 'WKAU5'));
    tmpSaldTune.WKAU6 := word(DBFGetFieldValue(DBFSaldTune, 'WKAU6'));
    tmpSaldTune.WKAU7 := word(DBFGetFieldValue(DBFSaldTune, 'WKAU7'));
    tmpSaldTune.WKAU8 := word(DBFGetFieldValue(DBFSaldTune, 'WKAU8'));
    tmpSaldTune.WKAU9 := word(DBFGetFieldValue(DBFSaldTune, 'WKAU9'));
    tmpSaldTune.WOBJ :=  word(DBFGetFieldValue(DBFSaldTune, 'WOBJ'));

    insert current tmpSaldTune;
  }
  while DBFGetNext(DBFSaldTune) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertSpKau(hMarker : longint; sDbfName : string) : boolean;//16
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSpKau := DBFOpen(sDbfName, stOpenRead);

  if (DBFSpKau = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFSpKau) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmp_SpKau);
    tmp_SpKau.NREC := comp(DBFGetFieldValue(DBFSpKau, 'NREC'));
    tmp_SpKau.NAME := DBFGetFieldValue(DBFSpKau, 'NAME');
    tmp_SpKau.CODE := DBFGetFieldValue(DBFSpKau, 'CODE');
    insert current tmp_SpKau;
  }
  while DBFGetNext(DBFSpKau) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertDogovor(hMarker : longint; sDbfName : string) : boolean;//18
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFDogovor := DBFOpen(sDbfName, stOpenRead);

  if (DBFDogovor = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFDogovor) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmp_Dogovor);
    tmp_Dogovor.NREC := comp(DBFGetFieldValue(DBFDogovor, 'NREC'));
    tmp_Dogovor.NODOC := DBFGetFieldValue(DBFDogovor, 'NODOC');
    tmp_Dogovor.DDOC := StrToDate(DBFGetFieldValue(DBFDogovor, 'DDOC'), 'YYYYMMDD');
    insert current tmp_Dogovor;
  }
  while DBFGetNext(DBFDogovor) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertCalPlan(hMarker : longint; sDbfName : string) : boolean;//19
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFCalPlan := DBFOpen(sDbfName, stOpenRead);

  if (DBFCalPlan = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFCalPlan) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmp_CalPlan);
    tmp_CalPlan.NREC := comp(DBFGetFieldValue(DBFCalPlan, 'NREC'));
    tmp_CalPlan.NODOC := DBFGetFieldValue(DBFCalPlan, 'NODOC');
    tmp_CalPlan.DINPUT := StrToDate(DBFGetFieldValue(DBFCalPlan, 'DINPUT'), 'YYYYMMDD');
    insert current tmp_CalPlan;
  }
  while DBFGetNext(DBFCalPlan) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertAttrVal(hMarker : longint; sDbfName : string) : boolean;//25
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFAttrVal := DBFOpen(sDbfName, stOpenRead);

  if (DBFAttrVal = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFAttrVal) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmp_AttrVal);
    tmp_AttrVal.NREC     := comp(DBFGetFieldValue(DBFAttrVal, 'NREC'));
    tmp_AttrVal.WTABLE   := word(DBFGetFieldValue(DBFAttrVal, 'WTABLE'));
    tmp_AttrVal.CATTRNAM := comp(DBFGetFieldValue(DBFAttrVal, 'CATTRNAM'));
    tmp_AttrVal.VSTRING  := DBFGetFieldValue(DBFAttrVal, 'VSTRING');
    tmp_AttrVal.VDOUBLE  := double(DBFGetFieldValue(DBFAttrVal, 'VDOUBLE'));
    tmp_AttrVal.VDATE    := StrToDate(DBFGetFieldValue(DBFAttrVal, 'VDATE'), 'YYYYMMDD');
    tmp_AttrVal.VTIME    := StrToTime(DBFGetFieldValue(DBFAttrVal, 'VTIME'), 'HH:MM');
    tmp_AttrVal.VCOMP    := comp(DBFGetFieldValue(DBFAttrVal, 'VCOMP'));
    tmp_AttrVal.CREC     := comp(DBFGetFieldValue(DBFAttrVal, 'CREC'));

    tmp_AttrVal.NAME     := DBFGetFieldValue(DBFAttrVal, 'NAME');
    tmp_AttrVal.ATTRTYPE := word(DBFGetFieldValue(DBFAttrVal, 'ATTRTYPE'));
    tmp_AttrVal.RTYPE    := word(DBFGetFieldValue(DBFAttrVal, 'RTYPE'));
    tmp_AttrVal.ROBJECT  := word(DBFGetFieldValue(DBFAttrVal, 'ROBJECT'));
    tmp_AttrVal.COTABLE  := word(DBFGetFieldValue(DBFAttrVal, 'COTABLE'));

    insert current tmp_AttrVal;
  }
  while DBFGetNext(DBFAttrVal) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertSpecMtr(hMarker : longint; sDbfName : string) : boolean;
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSpecMtr := DBFOpen(sDbfName, stOpenRead);

  if (DBFSpecMtr = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFSpecMtr) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpSpecMTR);
    tmpSpecMTR.nRec := comp(DBFGetFieldValue(DBFSpecMtr, 'NREC'));
    tmpSpecMTR.COTABLE := word(DBFGetFieldValue(DBFSpecMtr, 'COTABLE'));
    tmpSpecMTR.CSALDTUNE := comp(DBFGetFieldValue(DBFSpecMtr, 'CSALDTUN'));
    tmpSpecMTR.CSPEC     := comp(DBFGetFieldValue(DBFSpecMtr, 'CSPEC'));
    tmpSpecMTR.CKAU1     := comp(DBFGetFieldValue(DBFSpecMtr, 'CKAU1'));
    tmpSpecMTR.CKAU1NAME := DBFGetFieldValue(DBFSpecMtr, 'CKAU1NAM');
    tmpSpecMTR.CKAU1KOD  := DBFGetFieldValue(DBFSpecMtr, 'CKAU1KOD');
    tmpSpecMTR.CKAU2     := comp(DBFGetFieldValue(DBFSpecMtr, 'CKAU2'));
    tmpSpecMTR.CKAU2NAME := DBFGetFieldValue(DBFSpecMtr, 'CKAU2NAM');
    tmpSpecMTR.CKAU2KOD  := DBFGetFieldValue(DBFSpecMtr, 'CKAU2KOD');
    tmpSpecMTR.CKAU3     := comp(DBFGetFieldValue(DBFSpecMtr, 'CKAU3'));
    tmpSpecMTR.CKAU3NAME := DBFGetFieldValue(DBFSpecMtr, 'CKAU3NAM');
    tmpSpecMTR.CKAU3KOD  := DBFGetFieldValue(DBFSpecMtr, 'CKAU3KOD');
    tmpSpecMTR.CKAU4     := comp(DBFGetFieldValue(DBFSpecMtr, 'CKAU4'));
    tmpSpecMTR.CKAU4NAME := DBFGetFieldValue(DBFSpecMtr, 'CKAU4NAM');
    tmpSpecMTR.CKAU4KOD  := DBFGetFieldValue(DBFSpecMtr, 'CKAU4KOD');
    tmpSpecMTR.CKAU5     := comp(DBFGetFieldValue(DBFSpecMtr, 'CKAU5'));
    tmpSpecMTR.CKAU5NAME := DBFGetFieldValue(DBFSpecMtr, 'CKAU5NAM');
    tmpSpecMTR.CKAU5KOD  := DBFGetFieldValue(DBFSpecMtr, 'CKAU5KOD');
    tmpSpecMTR.CKAU6     := comp(DBFGetFieldValue(DBFSpecMtr, 'CKAU6'));
    tmpSpecMTR.CKAU6NAME := DBFGetFieldValue(DBFSpecMtr, 'CKAU6NAM');
    tmpSpecMTR.CKAU6KOD  := DBFGetFieldValue(DBFSpecMtr, 'CKAU6KOD');
    tmpSpecMTR.CKAU7     := comp(DBFGetFieldValue(DBFSpecMtr, 'CKAU7'));
    tmpSpecMTR.CKAU7NAME := DBFGetFieldValue(DBFSpecMtr, 'CKAU7NAM');
    tmpSpecMTR.CKAU7KOD  := DBFGetFieldValue(DBFSpecMtr, 'CKAU7KOD');
    tmpSpecMTR.CKAU8     := comp(DBFGetFieldValue(DBFSpecMtr, 'CKAU8'));
    tmpSpecMTR.CKAU8NAME := DBFGetFieldValue(DBFSpecMtr, 'CKAU8NAM');
    tmpSpecMTR.CKAU8KOD  := DBFGetFieldValue(DBFSpecMtr, 'CKAU8KOD');
    tmpSpecMTR.CKAU9     := comp(DBFGetFieldValue(DBFSpecMtr, 'CKAU9'));
    tmpSpecMTR.CKAU9NAME := DBFGetFieldValue(DBFSpecMtr, 'CKAU9NAM');
    tmpSpecMTR.CKAU9KOD  := DBFGetFieldValue(DBFSpecMtr, 'CKAU9KOD');
    tmpSpecMTR.COBJ      := comp(DBFGetFieldValue(DBFSpecMtr, 'COBJ'));
    tmpSpecMTR.COBJNAME  := DBFGetFieldValue(DBFSpecMtr, 'COBJNAME');
    tmpSpecMTR.COBJKOD   := DBFGetFieldValue(DBFSpecMtr, 'COBJKOD');

    insert current tmpSpecMTR;
  }
  while DBFGetNext(DBFSpecMtr) = tsOk;
  StopVisual('', 0);
  result := true;
}

function InsertSoprHoz(hMarker : longint; sDbfName : string) :boolean;//1
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSoprHoz := DBFOpen(sDbfName, stOpenRead);

  if (DBFSoprHoz = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSoprHoz) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpSoprHoz);
    tmpSoprHoz.NREC             := comp(DBFGetFieldValue(DBFSoprHoz  , 'NREC'));
    tmpSoprHoz.CDOGOVOR         := comp(DBFGetFieldValue(DBFSoprHoz  , 'CDOGOVOR'));
    tmpSoprHoz.CAPPDOGOVOR      := comp(DBFGetFieldValue(DBFSoprHoz  , 'CAPPDOGO'));
    tmpSoprHoz.CSTEPDOC         := comp(DBFGetFieldValue(DBFSoprHoz  , 'CSTEPDOC'));
    tmpSoprHoz.TIDKBASE         := word(DBFGetFieldValue(DBFSoprHoz  , 'TIDKBASE'));
    tmpSoprHoz.DATOB            := StrToDate(DBFGetFieldValue(DBFSoprHoz, 'DATOB'), 'YYYYMMDD');
    tmpSoprHoz.DVALCURSE        := StrToDate(DBFGetFieldValue(DBFSoprHoz, 'DVALCURS'), 'YYYYMMDD');
    tmpSoprHoz.CSOPRDOC         := comp(DBFGetFieldValue(DBFSoprHoz  , 'CSOPRDOC'));
    tmpSoprHoz.TIPDOC           := word(DBFGetFieldValue(DBFSoprHoz  , 'TIPDOC'));
    tmpSoprHoz.TIDKGAL          := word(DBFGetFieldValue(DBFSoprHoz  , 'TIDKGAL'));
    tmpSoprHoz.NODOC            := DBFGetFieldValue(DBFSoprHoz       , 'NODOC');
    tmpSoprHoz.DESCR            := DBFGetFieldValue(DBFSoprHoz       , 'DESCR');
    tmpSoprHoz.DESGR            := DBFGetFieldValue(DBFSoprHoz       , 'DESGR');
    tmpSoprHoz.CHOZOPER         := comp(0);
    tmpSoprHoz.SYSOPER          := word(DBFGetFieldValue(DBFSoprHoz  , 'SYSOPER'));
    tmpSoprHoz.NAMESHO          := DBFGetFieldValue(DBFSoprHoz       , 'NAMESHO');
    tmpSoprHoz.SUMMA            := double(DBFGetFieldValue(DBFSoprHoz, 'SUMMA'));
    tmpSoprHoz.KODVALUT         := comp(DBFGetFieldValue(DBFSoprHoz  , 'KODVALUT'));
    tmpSoprHoz.SUMVALUT         := double(DBFGetFieldValue(DBFSoprHoz, 'SUMVALUT'));
    tmpSoprHoz.SUMMASP          := double(DBFGetFieldValue(DBFSoprHoz, 'SUMMASP'));
    tmpSoprHoz.KODVALSP         := comp(DBFGetFieldValue(DBFSoprHoz  , 'KODVALSP'));
    tmpSoprHoz.SUMVALSP         := comp(DBFGetFieldValue(DBFSoprHoz  , 'SUMVALSP'));
    tmpSoprHoz.PROBOR           := word(DBFGetFieldValue(DBFSoprHoz  , 'PROBOR'));
    tmpSoprHoz.DIRECT           := word(DBFGetFieldValue(DBFSoprHoz  , 'DIRECT'));
    tmpSoprHoz.CFILKOR          := comp(DBFGetFieldValue(DBFSoprHoz  , 'CFILKOR'));
    tmpSoprHoz.VHSUMHOZ         := DBFGetFieldValue(DBFSoprHoz       , 'VHSUMHOZ');
    tmpSoprHoz.PRIORHOZ         := word(DBFGetFieldValue(DBFSoprHoz  , 'PRIORHOZ'));
    tmpSoprHoz.STATHOZ          := word(DBFGetFieldValue(DBFSoprHoz  , 'STATHOZ'));
    tmpSoprHoz.CSCHFACT         := comp(DBFGetFieldValue(DBFSoprHoz  , 'CSCHFACT'));
    tmpSoprHoz.MODEDOC          := word(DBFGetFieldValue(DBFSoprHoz  , 'MODEDOC'));
    tmpSoprHoz.CCALPLAN         := comp(DBFGetFieldValue(DBFSoprHoz  , 'CCALPLAN'));
    tmpSoprHoz.CFINPLAN         := comp(DBFGetFieldValue(DBFSoprHoz  , 'CFINPLAN'));
    tmpSoprHoz.CORG             := comp(DBFGetFieldValue(DBFSoprHoz  , 'CORG'));
    tmpSoprHoz.CPREDOPLDO       := comp(DBFGetFieldValue(DBFSoprHoz  , 'CPREDOPL'));

    If((Insert Current tmpSoprHoz) = tsOk)
    {
    }
  }
  while DBFGetNext(DBFSoprHoz) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

Function ImportAttrVal(cRec : comp; coTable : word): boolean;
{
  result := false;
  _loop tmp_AttrVal where (( coTable == tmp_AttrVal.wTable
                         and cRec    == tmp_AttrVal.cRec ))
  {
    NextVisual;
    case tmp_AttrVal.ATTRTYPE of
      cgAttrType_Str  : oExtAttr.sSetAttr(coTable, cRec, tmp_AttrVal.Name, tmp_AttrVal.VSTRING);
      cgAttrType_Dbl  : oExtAttr.doSetAttr(coTable, cRec, tmp_AttrVal.Name, tmp_AttrVal.VDOUBLE);
      cgAttrType_Date : oExtAttr.dSetAttr(coTable, cRec, tmp_AttrVal.Name, tmp_AttrVal.VDATE);
      cgAttrType_Time : oExtAttr.tSetAttr(coTable, cRec, tmp_AttrVal.Name, tmp_AttrVal.VTIME);
//      cgAttrType_Memo :
      cgAttrType_Comp : oExtAttr.coSetAttrID(coTable, cRec,
                        oExtAttr.CreateAttrComp(coTable, tmp_AttrVal.Name, tmp_AttrVal.AttrType, tmp_AttrVal.RTYPE, tmp_AttrVal.ROBJEct), tmp_AttrVal.VCOMP, tmp_AttrVal.VSTRING);
    end;
  }
  ClearBuffer(#DocMemo);
  DocMemo.cRec   := cRec;
  DocMemo.wTable := coTable;
  Insert current DocMemo;
}

Procedure ImportMemoVal(sDbfName : string);
var DBFMemo  : longInt;
    cRec : comp;
    wTable : word;
{
  if (not ExistFile(sDbfName))
    exit;

  DBFMemo := DBFOpen(sDbfName, stOpenRead);

  if (DBFMemo = 0)
    Exit;

  StartNewVisual(vtRotateVisual + vfScreenBottom , vfTimer + vfScreenBottom, 'Импорт внешних атрибутов в БД', 1);
  if DBFGetFirst(DBFMemo) = tsOk
  do
  {
    NextVisual;
    cRec   := comp(DBFGetFieldValue(DBFMemo, 'CREC'));
    wTable := word(DBFGetFieldValue(DBFMemo, 'WTABLE'));
    if (GetFirst DocMemo where ((cRec == DocMemo.cRec and wTable == DocMemo.wTable)) = tsOK)
    {
      ClearBuffer(#AttrVal);
      AttrVal.NREC      := 0;
      AttrVal.WTABLE    := wTable;
      AttrVal.CREC      := cRec;
      AttrVal.CATTRNAM  := oExtAttr.CreateAttr(AttrVal.WTABLE , DBFGetFieldValue(DBFMemo, 'ATTRNAM'), cgAttrType_Memo);
      DBFGetMemoFieldValue(DBFMEMO, 'VLVAR', AttrVal.VLVAR);
      If((Insert Current AttrVal) = tsOk)
      {
      }
    }
  }
  while DBFGetNext(DBFMemo) = tsOk;
  StopVisual('', 0);
  DBFClose(DBFMemo);
}

Function InsertKatSoprRef(hMarker : longint; sDbfName : string) : boolean;//3
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatSoprRef := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatSoprRef = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatSoprRef) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatSoprRef);
    tmpKatSoprRef.NREC  := comp(DBFGetFieldValue(DBFKatSoprRef, 'NREC'));
    tmpKatSoprRef.NSOPR := DBFGetFieldValue(DBFKatSoprRef, 'NSOPR');
    tmpKatSoprRef.DSOPR := StrToDate(DBFGetFieldValue(DBFKatSoprRef, 'DSOPR'), 'YYYYMMDD');
    tmpKatSoprRef.cRec  := comp(DBFGetFieldValue(DBFKatSoprRef, 'CREC'));
    insert current tmpKatSoprRef;
  }
  while DBFGetNext(DBFKatSoprRef) = tsOk;
  StopVisual('', 0);
  result := true;
}

Function InsertKatStroy(hMarker : longint; sDbfName : string) : boolean;//3
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFKatStroy := DBFOpen(sDbfName, stOpenRead);

  if (DBFKatStroy = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if (DBFGetFirst(DBFKatStroy) = tsOk)
  do
  {
    NextVisual;
    ClearBuffer(#tmpKatStroy);
    tmpKatStroy.NREC := comp(DBFGetFieldValue(DBFKatStroy, 'NREC'));
    tmpKatStroy.NAME := DBFGetFieldValue(DBFKatStroy, 'NAME');
    tmpKatStroy.CODE := DBFGetFieldValue(DBFKatStroy, 'CODE');
    insert current tmpKatStroy;
  }
  while DBFGetNext(DBFKatStroy) = tsOk;
  StopVisual('', 0);
  result := true;
}

function InsertPaySchem(hMarker : longint; sDbfName : string) :boolean;//1
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFPaySchem := DBFOpen(sDbfName, stOpenRead);

  if (DBFPaySchem = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFPaySchem) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpPaySchem);
    tmpPaySchem.NREC           := comp(DBFGetFieldValue(DBFPaySchem, 'NREC'));
    tmpPaySchem.ADDTERMS       := DBFGetFieldValue(DBFPaySchem     , 'ADDTERMS');
    tmpPaySchem.CCALPLAN       := comp(DBFGetFieldValue(DBFPaySchem, 'CCALPLAN'));
    tmpPaySchem.CODE           := DBFGetFieldValue(DBFPaySchem     , 'CODE');
    tmpPaySchem.CPLANPAYS      := comp(DBFGetFieldValue(DBFPaySchem, 'CPLANPAY'));
    tmpPaySchem.CPLAT          := comp(DBFGetFieldValue(DBFPaySchem, 'CPLAT'));
    tmpPaySchem.CPLATBANK      := comp(DBFGetFieldValue(DBFPaySchem, 'CPLATBAN'));
    tmpPaySchem.CPOL           := comp(DBFGetFieldValue(DBFPaySchem, 'CPOL'));
    tmpPaySchem.CPOLBANK       := comp(DBFGetFieldValue(DBFPaySchem, 'CPOLBANK'));
    tmpPaySchem.CVAL           := comp(DBFGetFieldValue(DBFPaySchem, 'CVAL'));
    tmpPaySchem.DIRECT         := word(DBFGetFieldValue(DBFPaySchem, 'DIRECT'));
    tmpPaySchem.PAYFORM        := comp(DBFGetFieldValue(DBFPaySchem, 'PAYFORM'));
    tmpPaySchem.PAYTYPE        := word(DBFGetFieldValue(DBFPaySchem, 'PAYTYPE'));
    tmpPaySchem.PERCENT        := double(DBFGetFieldValue(DBFPaySchem, 'PERCENT'));
    tmpPaySchem.SUMMA          := double(DBFGetFieldValue(DBFPaySchem, 'SUMMA'));
    tmpPaySchem.CONTROL        := word(DBFGetFieldValue(DBFPaySchem, 'CONTROL'));
    tmpPaySchem.CMCPLAN        := comp(DBFGetFieldValue(DBFPaySchem, 'CMCPLAN'));

    If((Insert Current tmpPaySchem) = tsOk)
    {
    }
  }
  while DBFGetNext(DBFPaySchem) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertPlanPays(hMarker : longint; sDbfName : string) :boolean;//1
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFPlanPays := DBFOpen(sDbfName, stOpenRead);

  if (DBFPlanPays = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFPlanPays) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpPlanPays);
    tmpPlanPays.NREC            := comp(DBFGetFieldValue(DBFPlanPays, 'NREC'));
    tmpPlanPays.ADDTERMS        := DBFGetFieldValue(DBFPlanPays     , 'ADDTERMS');
    tmpPlanPays.CCALPLAN        := comp(DBFGetFieldValue(DBFPlanPays, 'CCALPLAN'));
    tmpPlanPays.CONDSTATUS      := word(DBFGetFieldValue(DBFPlanPays, 'CONDSTAT'));
    tmpPlanPays.CVAL            := comp(DBFGetFieldValue(DBFPlanPays, 'CVAL'));
    tmpPlanPays.DCOND           := StrToDate(DBFGetFieldValue(DBFPlanPays, 'DCOND'), 'YYYYMMDD');
    tmpPlanPays.DEFBY           := word(DBFGetFieldValue(DBFPlanPays, 'DEFBY'));
    tmpPlanPays.DFROM           := StrToDate(DBFGetFieldValue(DBFPlanPays, 'DFROM'), 'YYYYMMDD');
    tmpPlanPays.DTO             := StrToDate(DBFGetFieldValue(DBFPlanPays, 'DTO'), 'YYYYMMDD');
    tmpPlanPays.NDAYS           := word(DBFGetFieldValue(DBFPlanPays  , 'NDAYS'));
    tmpPlanPays.PERCENT         := double(DBFGetFieldValue(DBFPlanPays, 'PERCENT'));
    tmpPlanPays.SUMMA           := double(DBFGetFieldValue(DBFPlanPays, 'SUMMA'));
    tmpPlanPays.TERMDEFBY       := word(DBFGetFieldValue(DBFPlanPays  , 'TERMDEFB'));
    tmpPlanPays.VIDPLAT         := word(DBFGetFieldValue(DBFPlanPays  , 'VIDPLAT'));
    tmpPlanPays.CPLANMC         := comp(DBFGetFieldValue(DBFPlanPays  , 'CPLANMC'));

    If((Insert Current tmpPlanPays) = tsOk)
    {
    }
  }
  while DBFGetNext(DBFPlanPays) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}
// налоги
function InsertSpDocNal(hMarker : longint; sDbfName : string) :boolean;//1
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSpDocNal := DBFOpen(sDbfName, stOpenRead);

  if (DBFSpDocNal = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSpDocNal) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpSpDocNal);
    tmpSpDocNal.NREC                := comp(DBFGetFieldValue(DBFSpDocNal, 'NREC'));
    tmpSpDocNal.CSPDOC              := comp(DBFGetFieldValue(DBFSpDocNal, 'CSPDOC'));
    tmpSpDocNal.CDOC                := comp(DBFGetFieldValue(DBFSpDocNal, 'CDOC'));
    tmpSpDocNal.TIPDOC              := word(DBFGetFieldValue(DBFSpDocNal, 'TIPDOC'));
    tmpSpDocNal.CGRNAL              := comp(DBFGetFieldValue(DBFSpDocNal, 'CGRNAL'));
    tmpSpDocNal.CNALOG              := comp(DBFGetFieldValue(DBFSpDocNal, 'CNALOG'));
    tmpSpDocNal.NALOG               := double(DBFGetFieldValue(DBFSpDocNal, 'NALOG'));
    tmpSpDocNal.SUMNAL              := double(DBFGetFieldValue(DBFSpDocNal, 'SUMNAL'));
    tmpSpDocNal.CVAL                := comp(DBFGetFieldValue(DBFSpDocNal, 'CVAL'));
    tmpSpDocNal.SUMVAL              := double(DBFGetFieldValue(DBFSpDocNal, 'SUMVAL'));
    tmpSpDocNal.SUMMA               := double(DBFGetFieldValue(DBFSpDocNal, 'SUMMA'));
    tmpSpDocNal.ISAGREG             := boolean(DBFGetFieldValue(DBFSpDocNal, 'ISAGREG'));
    tmpSpDocNal.CORG                := comp(DBFGetFieldValue(DBFSpDocNal, 'CORG'));
    tmpSpDocNal.VALCURSE            := double(DBFGetFieldValue(DBFSpDocNal, 'VALCURSE'));
    tmpSpDocNal.CROSCURSE           := double(DBFGetFieldValue(DBFSpDocNal, 'CROSCURS'));
    tmpSpDocNal.NPP                 := word(DBFGetFieldValue(DBFSpDocNal, 'NPP'));
    tmpSpDocNal.ISCUSTOM            := word(DBFGetFieldValue(DBFSpDocNal, 'ISCUSTOM'));
    tmpSpDocNal.RSUMMA              := double(DBFGetFieldValue(DBFSpDocNal, 'RSUMMA'));
    tmpSpDocNal.RSUMVAL             := double(DBFGetFieldValue(DBFSpDocNal, 'RSUMVAL'));
    tmpSpDocNal.RSUMNAL             := double(DBFGetFieldValue(DBFSpDocNal, 'RSUMNAL'));
    tmpSpDocNal.NalogKod            := DBFGetFieldValue(DBFSpDocNal, 'NALOGKOD');
    If((Insert Current tmpSpDocNal) = tsOk)
    {
    }
  }
  while DBFGetNext(DBFSpDocNal) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}

function InsertSpecZatr(hMarker : longint; sDbfName : string) :boolean;//1
{
  result := false;
  if (not ExistFile(sDbfName))
  {
    result := true;
    exit;
  }

  DBFSpecZatr := DBFOpen(sDbfName, stOpenRead);

  if (DBFSpecZatr = 0)
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfScreenBottom, 'Загрузка данных из файла "' + sDbfName + '"', 1);
  if DBFGetFirst(DBFSpecZatr) = tsOk
  do
  {
    NextVisual;
    ClearBuffer(#tmpSpecZatr);
    tmpSpecZatr.NREC        := comp(DBFGetFieldValue(DBFSpecZatr, 'NREC'));
    tmpSpecZatr.coTable     := word(DBFGetFieldValue(DBFSpecZatr, 'COTABLE'));
    tmpSpecZatr.CSPEC       := comp(DBFGetFieldValue(DBFSpecZatr, 'CSPEC'));
    tmpSpecZatr.CADDSUMTUNE := comp(DBFGetFieldValue(DBFSpecZatr, 'CADDSUMT'));
    tmpSpecZatr.CUKS        := comp(DBFGetFieldValue(DBFSpecZatr, 'CUKS'));
    If((Insert Current tmpSpecZatr) = tsOk)
    {
    }
  }
  while DBFGetNext(DBFSpecZatr) = tsOk;
  StopVisual('', 0);
  //Обновляем Статус(наличие ошибок) в протоколе по таблице
  result := true;
}
