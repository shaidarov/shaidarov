//by ABSOLUTO
//=====================================
//Сводный отчет о начисленной заработной плате
//, dbo.toInt64(katsopr.f$corg) as k2
// 1711499 
//=====================================
window wnReport02 'Структура аванса';
//--------------------------------------------------------------------------------
//-------------------------'Первая панель (группы)'-------------------------------

Tree trTmpTree02('Ctrl+P - Печать всего отчета, Alt+P - Печать с текущего уровня',, sci1EscTree);
//  Show at (,,, 10);
  Table TempDescr;

Fields

  TempDescr.Name    'Наименование'    ('Наименование',,)
                    : [50], Protect;
  TempDescr.Sum[1]  'Система оплаты'    ('Система оплаты',,)
                    :  Skip;
  TempDescr.Sum[2]  'Оклад/тариф' ('Оклад/тариф',,)
                    : [16.2,'\2p[|-]366`666`666`666.88'], Skip;
  TempDescr.Sum[3]  'Плановый аванс'    ( 'Плановый аванс',,)
                    : [16.2,'\2p[|-]366`666`666`666.88'], Skip;
  TempDescr.Sum[4]  'Факт.аванс'   ('Фактический аванс',,)
                    : [16.2,'\2p[|-]366`666`666`666.88'], Skip;
  TempDescr.Sum[5]  'В кассу'   ('Сумма по платежным ведомостям',,)
                    : [16.2,'\2p[|-]366`666`666`666.88'], Skip;
  TempDescr.Sum[6]  'В банк'   ('Сумма',,)
                    : [16.2,'\2p[|-]366`666`666`666.88'], Skip;
  TempDescr.Sum[7]  'Разница'   ('Не выплачено',,)
                    : [16.2,'\2p[|-]366`666`666`666.88'], Skip;
end;
HandleEvent
cmInit:
{ 

}
cmHotKeys:
{ PutCommand(RunMenu('mnFZ21_Print')) ;
}
cmValue2: PrintDoc_02(2);
cmPrintDoc: 
{ PrintDoc_02(0);
}
cmPlansNo:
{ PrintDoc_02(1);
}
end; //HandleEvent
end; //window wnReport02  'Отчет;
//===============
create view tv02
var
 ww_cpodr :comp;
 sPref,sPrefP :string;
 wPrizDel:word;
 lVidUd  :word;
 ww_mes :word;
 ww_year:word;
 w_dtb,w_dte:date;
as select lschet.nrec 
from lschet(lschet01),shtraf, SpplBan, SbBan ,PlatVed, SPPLVED, PrMonth
where
((  root == lschet.tabn
and   Lschet.Nrec == Shtraf.Clsch
and lVidUd == Uder.VidUdS
and Shtraf.VidUd == KlVidUd.VidUd  
// платежные ведомости
and lschet.nrec == SpplBan.CLSCH
and 15001 == SpPlBan.PrizMeg
and SpplBan.CsbBan  == SbBan.Nrec 
and w_dtb     <<= spplban.DFORM (noindex)
and w_dte     >>= spplban.DFORM (noindex)
and (spplban.vidud <> 110 and spplban.vidud <> 177 and spplban.vidud <> 179 and spplban.vidud <> 182
and spplban.vidud <> 183 and spplban.vidud <> 184)
and word(1) == SbBan.PrizDel(noindex) And sPref == SbBan.Prefix(noindex)
// реестры
and Lschet.Nrec == SPPLVED.clsch
and 1 == SPPLVED.PrizMeg
and w_dtb     <<= spplved.Dform(noindex)
and w_dte     >>= spplved.Dform(noindex)

And  SPPLVED.CPLATVED == PlatVed.Nrec 
and word(0) == PlatVed.PrizDel(noindex) 
And sPrefP == PlatVed.Prefix  (noindex)
// для суммы на руки
and ww_mes == Prmonth.MesN 
And ww_year == PRMONTH.YearN 
))
bounds bycex ww_cpodr ==lschet.cex
//bounds byAll root ==lschet.tabn
;
//=====================================
//
//=====================================
function SborRec02 :boolean;
VAR
  WCKAU:COMP;
  wtbl :word;
  kl_vihod : boolean;
  i,j : word;
  ww_analitik_lev:word;
{ SborRec02:=true;
  mylogwrite(false,GetStrTabn(tv02.lschet.tabn,tv02.lschet.strtabn))
  if not chk_filter(tv02.lschet.cex,tv02.lschet.kateg,tv02.lschet.cappoint,tv02.lschet.rejim)  then exit;
  mylogwrite(false,'фильтр')
  for(i:=1;i<=Grp_Count+1;i:=i+1)
  { wc_lev:=0;
    if i<=Grp_Count
    {case mTable[i] of
     coKatPodr:
     { wc_lev:=GetKatpodrIe( tv02.lschet.cex,mIeSvertka[i],wNameGr)
       
       
     }
     coKlKatego:
     { wc_lev:= GetKategNrec(tv02.lschet.kateg)
       if  i=Grp_Count
         wNameGr:=GetKategName(tv02.lschet.kateg)
       
     }
     coPersons:
     { wc_lev:=tv02.lschet.tperson
       if  i=Grp_Count
         wNameGr:=tmp_persons.fio;
     }
     coTmpKatalog:
     { wsch :=tv02.lschet.cschetd; wsubsch:=tv02.lschet.csubschd;
       ww_analitik_lev:=Analitik_GetLevel(wsch,wsubsch)
       wckau:= tv02.lschet.CKAUD[ww_analitik_lev]
       wTBL:= tv02.lschet.TBLD[ww_analitik_lev]
       wc_lev:=Analitik_InsValue(CurCode,wtbl,wckau,mHierar[i], mIeSvertka[i],wNameGr,if((UserDeskRep.ResWord[40] and 2)>0,1,0))
       if  i=Grp_Count
         wNameGr:=TmpKatalog.name;
       
     } //coTmpKatalog:
     end;
    }else
    { wc_lev:=tv02.lschet.tperson
      if getfirst tmp_persons=0
      { wNameGr:=tmp_persons.fio;
      }
      else
      { wNameGr:='-'
      }

    } 
     case i of
     1: wc_cut1:=wc_lev;
     2: wc_cut2:=wc_lev;
     3: wc_cut3:=wc_lev;
     4: wc_cut4:=wc_lev;
     5: wc_cut5:=wc_lev;
     6: wc_cut6:=wc_lev;
     end;
  } //for(i:=1;i<=6;i:=i+1) 
  Tobot_Ins;
  Tobot.Sum[1]:=tv02.lschet.sisopl;
  Tobot.Sum[2]:=tv02.lschet.tarif;
  Tobot.Sum[3]:= Tobot.Sum[3]+tv02.lschet.avplan;
  Tobot.Sum[4]:= Tobot.Sum[4]+tv02.lschet.avfakt;
  tv02._loop spplved
  { if tv02.getfirst platved<>0 then continue;
    Tobot.Sum[5]:= Tobot.Sum[5]+tv02.spplved.SUMUD;
  }
  tv02._loop SpplBan
  { if tv02.getfirst sbban<>0 then continue;
    Tobot.Sum[6]:= Tobot.Sum[6]+tv02.SpplBan.SUMUD;
  }
  if Tobot.Sum[3]=0 and Tobot.Sum[4]=0 and Tobot.Sum[5]=0 and Tobot.sum[6]=0 then
  { delete current tobot;
  }
  else
  { update current tobot;
  }
  SborRec02:=true;
} //function SborRec02 :boolean;
//=====================================
// сбор данных
//=====================================
Function SborData02(wklavans:word):boolean;
var i,j :longint;
{ SborData02:=false;
  if wklavans=0
  { tv02.sPref:= 'R$Z';
    tv02.sPrefP:='0$Z'
    tv02.lVidUd:= 220; 
  }
  else
  { tv02.sPref:= 'R$A';
    tv02.sPrefP:='0$A'
    tv02.lVidUd:= 199;
  } 
  if not inextvisual('Сбор данных ')
  then exit
  chet:=0  
  c1:=GetMarkerCount(MarkerPodr)
  tv02.ww_mes:=month(UserDeskRep.ResDate[1])
  tv02.ww_year:=year(UserDeskRep.ResDate[1])
  tv02.w_dtb   := date(1,month(UserDeskRep.ResDate[1]),year(UserDeskRep.ResDate[1]))
  tv02.w_dte   := date(last_day(UserDeskRep.ResDate[2]),month(UserDeskRep.ResDate[2]),year(UserDeskRep.ResDate[2]))
  
  if (UserDeskRep.ResWord[1] and 1)>0
  { mylogwrite(false,'Sbordata02 podr')
    tv02.pushbounds(tv02.tbByCex)
    for(i:=0;i<c1;inc(i))
    { if not GetMarker(MarkerPodr, i, wc_podr) then continue;
      if not inextvisual('Сбор данных '
         +chr(13)+' подразд.'+string(i)+' из '+string(c1))
      then exit
      mylogwrite(false,'Sbordata02 '+string(i)+' подразделение = '+string(wc_podr))
    
      tv02.ww_cpodr:=wc_podr
      tv02._loop fullcache lschet
      { if not SborRec02 then exit;
      }
    }  //for(i:=0;i<c1;inc(i))
  }  //if (UserDeskRep.ResWord[1] and 1)>0
  else
  { tv02.pushbounds(tv02.tnlschet)
    mylogwrite(false,'Sbordata02 all')
    tv02._loop fullcache lschet
    { if not nextvisual then exit;
      mylogwrite(false,'Sbordata02 '+string(lschet.tabn)+'/'+string(lschet.strtabn))
      if not SborRec02 then exit;
    } 
  }  //ELSE if (UserDeskRep.ResWord[1] and 1)>0
  SborData02:=true;
} //Function SborData01:boolean;
//=====================================
//==============================
// запуск отчета
//==============================
Function CreateReport02 :boolean;
var ww_dt :date;
    ww_su:double;
    i,j :word;
{ CreateReport02:=false;
  logfilekl:=if((UserDeskRep.ResWord[40] and 4 )>0,true,false)
  ww_dt:=UserDeskRep.ResDate[1]
  if UserDeskRep.ResDate[1]>UserDeskRep.ResDate[2]
  { message('Дата конца периода меньше начала')
    exit;
  }
  pushbounds(#lstab);
  InitWorkingTable;

  //CurCode:=0;
  ClearTable(CurCode)
  logfilenm:='!wt_avans.log'
  // для свертки подразделений
  iPodrFilterDef.katpodrGetLevelInit;
  iPodrFilterDef.SetLogFile(if(logfilekl,logfilenm,'')) 
  MyLogwrite(true,'START')
  CurGroup:=0;
  len1:=0
   //Add_Group(1,99,0)
   Add_Group(1,UserDeskRep.ResWord[11],UserDeskRep.ResWord[12],UserDeskRep.ResWord[31])
   Add_Group(2,UserDeskRep.ResWord[13],UserDeskRep.ResWord[14],UserDeskRep.ResWord[32])
   Add_Group(3,UserDeskRep.ResWord[15],UserDeskRep.ResWord[16],UserDeskRep.ResWord[33])
   Add_Group(4,UserDeskRep.ResWord[17],UserDeskRep.ResWord[18],UserDeskRep.ResWord[34])
   Add_Group(5,UserDeskRep.ResWord[19],UserDeskRep.ResWord[20],UserDeskRep.ResWord[35])
   Grp_Count:=Len1
   mylogwrite(false,'Число уровней '+string(Grp_Count));
   SborData02(1);
   if not inextVisual('Подсчет итогов') then exit;
   _loop fullcache tobot
   { if not nextvisual then exit;
     update current tobot set tobot.sum[7]:=  tobot.sum[4] - (tobot.sum[5]+tobot.sum[6])
  
   }
     // Построить дерево
   if not inextVisual('Построение дерева') then exit;
   
   cRep := InitTreeBuilder(#Tobot);
   if cRep=0 { message('Ошибка инициализации дерева!'); exit; }
   DoneWorkingTable;  
   for(i:=1;i<=Grp_Count;i:=i+1)
   { 
     TuneLevel(cRep, i, mTable[i], if(mkol[i]=0,tsNoExpand,0), mName[i],0 , mGrupSort[i], mkol[i]);
     for(j:=3;j<=7;j++)
     {  TuneSum(cRep, j, 0, 0);
     }
     Mylogwrite(false,'Группировки '+string(mTable[i])+','+mName[i]+','+string(mkol[i])+','+string(mIeSvertka[Len1]))
   }
   SetReportStyles(cRep, rsNodeReport+if(logfilekl,rsShowStat,0), UserDeskRep.RepName)
   BuildTunedTree(crep, CurCode); 
   if (cRep<>0)
     DoneTreeBuilder(cRep);
   StopVisual('',0)  
   TreeGetFirstEx(MainTree );
   case UserDeskRep.ResWord[39] of  
   2: RunWindowModal(wnReport02) ;
   end; 
   CreateReport02:=true;
   rescanpanel(#UserDeskRep)
} //Function CreateReport02 :boolean;
//===================================
Function PrintDoc_02(ww_type:word) : boolean;
VAR
 boIsTerm :boolean;
 wnpp:longint;
 wwkl:boolean;
 wLevel_Start: word;
 wCurLevel,wPrevLevel:longint;
 i:word;
{ PrintDoc_02 :=false
  if ExcelInit(nmtemplate,true,2009)<>0
  { message('Ошибка инициализации шаблона')
    exit ;
  }
  StartNewVisual(vtNumericVisual,vfTimer+vfBreak,'Идет печать...', vfTimer+vfBreak);
  wexrow:=2;wexcol:=1;
  MyPutExcel('Состав аванса ',0,0,-1,-1)
  wexrow:=3;wexcol:=3;
  MyPutExcel(fFltPodr ,0,0,-1,-1)
  wexrow:=4;wexcol:=3;
  MyPutExcel(DateToStr(dgettune('UP.DATOTCH'),'` month YYYY ') ,0,0,-1,-1)
  HeaderStrCount:=8;  
  wexrow:=HeaderStrCount+1;
  MyXlCreaMatrix(10000,70)
  wexrow:=wexrow-1;
  case ww_type of
  0,2: wwkl:=TreeGetFirstEx(MainTree );
  1: { wwkl:=true; wLevel_Start:=TreeLevel(MainTree);}
  else exit;
  end;
  wnpp:=0;
  if  wwkl
  do
  {   if not nextvisual then break;
      Mylogwrite(false,'TempDescr.name='+TempDescr.name+'/'+string(wnpp))
      wPrevLevel := wCurLevel;
      wCurLevel  := TreeLevel(MainTree);
      boIsTerm   := TreeIsTerminal( MainTree );
      if (not boIsTerm) //or ((UserDeskRep.ResWord[40] and 8)>0) 
      { wexrow:=wexrow+1; wexcol:=1;
        wnpp:=wnpp+1;
        MyPutExcelNumber(WNPP,1,10,0,-1,-1)
        MyPutExcel(lpad(' ',wcurlevel*2)+PrintName(TempDescr.name),10,0,-1,-1)
        for(i:=1;i<=7;i++)
        { MyPutExcelNumber(round(TempDescr.sum[i],2),1,10,0,-1,-1)
        }// for(i:=3;i<=64) 
      } //  
      case ww_type of
      0:
      { wwkl:=TreeGetNextEx(MainTree)
      }
      1:
      { wwkl:=TreeGetNextEx(MainTree)
        if wwkl
        if  ww_type=1 and TreeLevel(MainTree)<=wLevel_Start wwkl:=false;
      }
      2:
      { wwkl:=TreeGetNext(MainTree)
      }
      else
      { wwkl:=false;
      }
      end;
  }    
  While ( wwkl );
  MyxlWriteMatrix(wexrow);
  xlFreeMatrix;
  
  matrixkl:=False;
  MyxlFrameCells(63, 2, 1, 1, HeaderStrCount,1,wexrow,9);
  //xlSetFontStyle(xlBold, wexrow,1,wexrow,17);
  MyXlEnd;
  StopVisual('',0);
  PrintDoc_02 :=true;
}