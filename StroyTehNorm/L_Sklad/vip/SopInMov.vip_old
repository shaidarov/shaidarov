Здесь дополнено создание карточки МБП с зашитой Методикой списания - такая проблема уже решена через ПИР
Этот код устарел

//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 7.11 - логистика - склад
// Накладные на внутреннее перемещение
//********************************************************************************

#ifNdef _USE_SOPIN_OBJ_

#define SOPINMOV_VIP
#define _SOPINMOV_
#define _USE_SERIAL_

#include CopyExClass.vih
#include autoplan.vih
#include BoxFuncsFunctions.vih
#include CalcFuns.vih
#include Confirm.vih
#include Contexts.vih
#include iphonecard.vih
#include IznMetod.vih
#include KatSopr.vih    // подключение объектных интерфейсов, общих для сопроводительных документов
#include MBP_Doc.vih
#include MBP_In.vih
#include MBP_Out.vih
#include MBP_Tune.vih
#include MCToOS.vih
#include nbuilder.vih
#include RoznFuns.vih
#include sopinmov.vih
#include TransLib.vih
#include vedvmc.vih
#include copysopr.vih
#include chkschem.vih
#include xlReport.Vih
#include LinkMTR2Spec.vih     // функции целевого учета
#include UksStore.vih  // Выгрузка сальдовых остатков по объектам целевого назначения
#include FurnInSet.vih // Фурнитура в комплекте

#ifdef ComponentVersion
  #include MtrCount.vih
  #include GetMOL.vih
  #include KatStroy.vih
  #include FpCO.vih
  #include SoprHoz.vih
  #include MoveOS.vih   // Операции с ОС и НМА
#end

//********************************************************************************
#doc
Накладные на внутреннее перемещение
#end

Interface SopInMov 'Список накладных на внутреннее перемещение' EscClose, Cyan;
  Show at (, , 110, 31);

#include CopyExClass.var      // iCExClass
#include Confirm.var
#include IznMetod.var
#include KatSopr.var    // объектные переменные, общие для сопр.документов
#include MBP_Doc.vih
#include MBP_In.var
#include MBP_Out.var
#include MBP_Tune.var
#include ServKau.vih
#include TransLib.var
#include serialmove.var
#include chkschem.var
#include LinkMTR2Spec.var     // функции целевого учета

const
 constPickSpSopr = 64126;
end

var

  bResOtkat       // последний результат проверки
                : boolean;
//-------------------------
  tTimeOtkat      // последнее время проверки
                : time;
//-------------------------
  tRecOtkat      // номер проверенной записи
                : comp;
//-------------------------
Table struct frSpav
(
  MCName   : string,
  MCBarKod : string,
  Kol      : double,
  edIzm    : string,
  Massa    : double,
  Vol      : double,
  Stoim    : double,
  Val      : string
);

//-------------------------
// Таблицы для печати в FastReport

Table struct FrHead
(
  nrec         : comp
, NomDoc       : string
, Descr        : string
, NomDescr     : string
, OrgName      : string
, OrgUNN       : string
, OrgOKPO      : string
, OrgOKDP      : string
, Data         : string
, Prim         : string
, PodrFrom     : string
, PodrTo       : string
, Nazn         : string
, DovLico      : string
, MOLFrom      : string
, MOLTo        : string
, MOLFromDl    : string
, MOLToDl      : string
, MyOrgName    : string
, MyOrgUNN     : string
, MyOrgOKPO    : string
, MyOrgAddr    : string
, MyOrgBankName: string
, MyOrgBankSch : string
, MyOrgBankMFO : string
, GrOtpName    : string
, GrOtpUNN     : string
, GrOtpOKPO    : string
, GrOtpAddr    : string
, GrOtpBankName: string
, GrOtpBankSch : string
, GrOtpBankMFO : string
, GrPolName    : string
, GrPolUNN     : string
, GrPolOKPO    : string
, GrPolAddr    : string
, GrPolBankName: string
, GrPolBankSch : string
, GrPolBankMFO : string
, ItogKol      : double
, ItogSum      : double
, VItogSum     : double
, ValSimv      : string
, VsegoNom     : longint
, NomDover     : string
, DataDover    : string
, DoverLico    : string
, avtopredp    : string
, automobile   : string
, putlist      : string
, otp_rztr_dolj: string
, otp_rztr_fio : string
, otpustil_dolj: string
, otpustil_fio : string
, voditel      : string
)
with index
(
  FrHeadInd = nrec
);

Table struct FrData
(
  NomPP       : comp
, DataRec     : comp
, BarKod      : string
, Name        : string
, TNVED       : string
, Mas         : double
, MasBrut     : double
, Volume      : double
, SizeX       : double
, SizeY       : double
, SizeZ       : double
, Resurs      : string
, KodGr       : string
, NameGr      : string
, OtpEd       : string
, UchEd       : string
, Koef        : double
, KodOKEI     : string
, Partia      : string
, Kol         : double
, KolFact     : double
, Price       : double
, VPrice      : double
, Simv        : string
, Sum         : double
, SumV        : double
, StavkaNDS   : double
, SumNDS      : double
, PriceUch    : double
, VPriceUch   : double
, OptNadb     : double
)
with index
(
  FrDataInd = DataRec + NomPP
);
//-------------------------

//******************************************************************************

Function GetKAUField(pNum : integer) : string; Forward;
Function GetKAUFieldS(pNum : integer) : string; Forward;
Function CheckDEISumm(pcKatSopr: comp; pwPrMC: word; pbOne: boolean; pwTipKol, pwNpp: word): double; Forward;
Function CheckOsnSumm(pcKatSopr: comp; pwPrMC: word; pbOne: boolean; pwTipKol: word): double; Forward;

//******************************************************************************

Create view
Var
//-----------------------------------------------------------
  _dOpr
, aBegDate
, aEndDate
                : Date;

//-----------------------------------------------------------
  pxlrepsetup   : xlrepsetup;
  oSaldo        : IUksStore;   // Выгрузка сальдовых остатков по объектам целевого назначения
//-----------------------------------------------------------
  FAlgoritm
, wSeason
, _wTuneSeason
, _wTuneProgram
, FilterParam
, FilterParam_Old
, CurVisible                    //для maymod.vpp
, wTimerCount
                : word;
//-----------------------------------------------------------
  _cPodrSrc
, _cPodrDest
, _cMolSrc
, _cMolDest
, _cMC_class
, NRecNaklParam
, NRecFromParam
, NRecToParam
, pNrec
, NRecKatNotes2
, cNazna
                : comp;
//-----------------------------------------------------------
  MarkerNZ
, IndexNZ
                : longint;
//-----------------------------------------------------------
  RazrezChanged,
  noCheckOtkat,
  pickSpSopr_regim,
  wasPickSpSopr,
  printFR
, NeedRound
, FlagKol
                : boolean;
//-----------------------------------------------------------
  Word4Seach                    // для совместимости с МБП
, stri
, s_SimvRub
, _StrStatus
, _sDesGR
, ID
, sXLTFileName
, sDEISumLabel
, sDEI1Name
, sDEI2Name
                : string;
//-----------------------------------------------------------
  _sDescr
, CurDescr                      // для maymod.vpp
                : string[20];
//-----------------------------------------------------------
  CurDesGr      : string[4];   //для maymod.vpp
//-----------------------------------------------------------
  KolSrc
, KolBound1
, KolBound2
, d
, min_kol
                : double;
//-----------------------------------------------------------
  iFurnInSet    : FurnInSet new;
//-----------------------------------------------------------
#include soprvar.vpp // общие переменные сопроводительных документов
//--------------------------------------------------------------------------------
#include varos.vpp

//********************************************************************************

As select
  if(SearchMarker(MarkerNZ, KatSopr.NRec, IndexNZ), 'V', ' ')
        ( FieldName = picked )
//--------------------------------------------------------------------------------
#ifdef _MOVENAKL_
, if(KatSopr.VhodNal = 1, 'Налоги входят в цену позиций', 'Налоги не входят в цену позиций')
        ( FieldName = VhNal )
//--------------------------------------------------------------------------------
, if(SpSopr.ManualTax = 0, 'расчетные', 'ручные')
        ( FieldName = AutoNalogs )
//--------------------------------------------------------------------------------
, (string(SpSopr.SumNDS, 14, 2) + ' '+ if(s_SimvRub = '', 'руб.', s_SimvRub))
        ( FieldName = StrSumNal )
#end
//--------------------------------------------------------------------------------
, if(KatSopr.cVal = 0,
    if(s_SimvRub <> '', s_SimvRub, 'руб.'), KlVal.SimVolV)
        ( FieldName = Valut )
//--------------------------------------------------------------------------------
, if(KatSopr.cVal = 0, SpSopr.price*SpSopr.kolfact, SpSopr.VPrice*SpSopr.kolfact)
        ( FieldName = SumPrice )
//--------------------------------------------------------------------------------
, if(KatSopr.cVal = 0, KatSopr.Summa, KatSopr.SumVal)
        ( FieldName = Sum )
//--------------------------------------------------------------------------------
, if(KatSopr.cVal = 0, SpSopr.rPrice, SpSopr.rVPrice)
        ( FieldName = Prv )
//--------------------------------------------------------------------------------
, PrintNumber(KatSopr.Descr, KatSopr.NSopr)
        ( FieldName = NomDes )
//--------------------------------------------------------------------------------
, if(KatSopr.Reserved = 1, 'зарезервированы до', 'не зарезервированы')
        ( FieldName = ifRes )
//--------------------------------------------------------------------------------
, if(isValid(tnKatKod), '+', '')
        ( FieldName = Furn )
//--------------------------------------------------------------------------------
, if(SpSopr.cOtpEd = 0, KatEd.Abbr, if   (SpSopr.cOtpEd = 0, KatEd.Name,
   if (wGetTune('Doc.BrAbbrEd')=0, KatOtpEd.ABBR, KatOtpEd.Name)))
        ( FieldName = OtpEd )
//--------------------------------------------------------------------------------
, if(KatSopr.Transp = 0, 'нет', 'да')
        ( FieldName = trp )
//--------------------------------------------------------------------------------
, if(longint(KatSopr.dOpr) = 0, '-', '+')
        ( FieldName = PrOrd )
//--------------------------------------------------------------------------------
, if(KatSopr.cValut = 0, ' ',
    if(SpSopr.VPrice = 0, 'Курс не определен', 'Курс: '+string(SpSopr.rPrice / SpSopr.rVPrice, 14, 2)))
        ( FieldName = StrCurse )
//--------------------------------------------------------------------------------
, if(KatSopr.cKatSopr <>0, KatSopr2.NSopr, '')
        ( FieldName = TranzNakl )
//--------------------------------------------------------------------------------
, PrintNumber(KatSopr3.Descr, KatSopr3.NSopr)
        ( FieldName = NaklParam )
//--------------------------------------------------------------------------------
, (SpSopr.mTara + SpSopr.Netto)
        ( FieldName = TTN_massa_all )
//--------------------------------------------------------------------------------
#ifdef _MOVENAKL_
, if(SpDocNal.cVal = 0, s_SimvRub, NalValut.SimvolV)
        ( FieldName = ValutNal )
#end
//--------------------------------------------------------------------------------
, if(IsValid(tnTempProgram), 'фильтр выбран', '')
        ( FieldName = sProgram )
//--------------------------------------------------------------------------------
, if(SpSopUsl.PrMC = 3, '%', if(SpSopUsl.PrMC = 4, 'С', if(SpSopUsl.PrMC = 5, 'В', 'О')))
        ( FieldName = prSopusl )
//--------------------------------------------------------------------------------
, if(SpDocNalSopUsl.cVal = 0, s_SimvRub, NalValutSpsopUsl.SimvolV)
        ( FieldName = ValutNalSopUsl )
//--------------------------------------------------------------------------------
, if(SpSopr.OilPlot<>0, SpSopr.KolFact/SpSopr.OilPlot*KatOtpEd.Koef, 0)
        ( FieldName = Capacity )
//--------------------------------------------------------------------------------
, if(SpSopr.OilPlot<>0, SpSopr.KolFact*if(katsopr.cval = 0, SpSopr.rPrice, SpSopr.rVPrice)/(SpSopr.KolFact/SpSopr.OilPlot*KatOtpEd.Koef), 0)
        ( FieldName = CapacityPrice )
//--------------------------------------------------------------------------------
#define __HozOperViewName__
, if(IsValid(tnSoprHoz), iTxoBind.ShowName(SoprHoz.BufferP), '') ( FieldName = HozOperViewName )
//--------------------------------------------------------------------------------
, if(IsValid(tnPickSpSopr), '+', '')
    (FieldName = PickSpSoprMark)
//--------------------------------------------------------------------------------
, CheckDEISumm(KatSopr.nRec, 1, true, 1, 1)
        ( FieldName = fDEI1Kol )
//------------------------------------------------------------------------------
, CheckDEISumm(KatSopr.nRec, 1, true, 1, 2)
        ( FieldName = fDEI2Kol )
//------------------------------------------------------------------------------
, CheckOsnSumm(KatSopr.nRec, 1, true, 1)
        ( FieldName = fOsnKol )
//------------------------------------------------------------------------------

, GetKAUField(1)  ( FieldName = vsKau1 )
, GetKAUField(2)  ( FieldName = vsKau2 )
, GetKAUField(3)  ( FieldName = vsKau3 )
, GetKAUField(4)  ( FieldName = vsKau4 )
, GetKAUField(5)  ( FieldName = vsKau5 )
, GetKAUField(6)  ( FieldName = vsKau6 )
, GetKAUField(7)  ( FieldName = vsKau7 )
, GetKAUField(8)  ( FieldName = vsKau8 )
, GetKAUField(9)  ( FieldName = vsKau9 )
, GetKAUField(10) ( FieldName = vsKau10 )

, GetKAUFieldS(1)  ( FieldName = vsKau1S )
, GetKAUFieldS(2)  ( FieldName = vsKau2S )
, GetKAUFieldS(3)  ( FieldName = vsKau3S )
, GetKAUFieldS(4)  ( FieldName = vsKau4S )
, GetKAUFieldS(5)  ( FieldName = vsKau5S )
, GetKAUFieldS(6)  ( FieldName = vsKau6S )
, GetKAUFieldS(7)  ( FieldName = vsKau7S )
, GetKAUFieldS(8)  ( FieldName = vsKau8S )
, GetKAUFieldS(9)  ( FieldName = vsKau9S )
, GetKAUFieldS(10) ( FieldName = vsKau10S )

// Основные таблицы
, KatSopr.*
, SpSopr.*
, SoprHoz.*
, KatMC.Name
, KatMC.BarKod
, KatOtpEd.*
, KatParty.Name
, KatPodr.Name
, KatMol.Name
, Katpayment.Name
, ToPodr.Name
, ToMol.Name
, BaseDoc.NoDoc
, KlVal.Simvolv
, KatNazna.Name
, Persons.FIO
, KatOrgF.Name
, KatOrgF.UNN
, KatOrgF.OKPO
, KatOrgF.Addr
, KatBankF.Name
, KatBankF.MFO1
, KatBankF.Schet1
, KatOrgT.Name
, KatOrgT.UNN
, KatOrgT.OKPO
, KatOrgT.Addr
, KatBankT.Name
, KatBankT.MFO1
, KatBankT.Schet1
, KatOrgMy.Name
, KatOrgMy.UNN
, KatOrgMy.OKPO
, KatOrgMy.Addr
, KatBankMy.Name
, KatBankMy.MFO1
, KatBankMy.Schet1
, MoveCellUzbek.Name
, TTNMoveCell.Name

, KatOrgPlat.Name
, OrgVzr.Name
//********************************************************************************
From
  KlPrice KlPrice2
, SpSopr (SpSopr11)
, KatOrg
, synonym KatOrg KatOrgPlat
, synonym KatOrg OrgVzr
#ifdef _MOVENAKL_
, SpDocNal
, TempNo,
, KatOrg NalOrg
, KlVal NalValut
#end
, KatOrg KatOrgMy
, KatOrg KatOrgF
, KatOrg KatOrgT
, KatBank KatBankMy
, KatBank KatBankF
, KatBank KatBankT
, Vagon VagonSP
, Katos
, OsMc
, Katos KatosLink
, KatPodr ToPodr(readonly)
, KatMOL ToMOL(Readonly)
, KatSopr KSopr(ReadOnly)
, KatPayment
, SpOrder SpOrder2
, ProbTr
, KatMBP
, MBPIn
, SpSopr SSopr(ReadOnly)
, CursVal
, TTNDoc
, KlVal KlVal2(ReadOnly)
, KatSopr  KatSopr2(ReadOnly)
, CellVal  TTNCellVal
, MoveCell TTNMoveCell
, MoveCell MoveCellUzbek
, KatPodr  KatPodrTo
, KatPodr  KatPodrFrom
, KatSopr KatSopr3
, KatOtpEd KatOtpEdGrM
, KatStroy
, KatStroy KatStroyUsl
, SpecZatr
, AddSumTune
, SpecZatr SpecZatrUsl
, AddSumTune AddSumTuneUsl
, InBoxP
, KatPodr PodrSrc  (readonly)
, KatPodr PodrDest (readonly)
, KatMOL  MOLSrc   (readonly)
, KatMOL  MOLDest  (readonly)
, Pick    TempProgram
, Pick    TempProgram2
, ExClassName (readonly)
, ExClassVal
, ExClassSeg (readonly)
, ExClassName ExClassName2 (readonly)
, ExClassVal  ExClassVal2  (readonly)
, ExClassSeg  ExClassSeg2  (readonly)
, KatNotes
, KatNotes KatNotes2
, SpSopr   SpSopUsl(SpSopr11)
, SpDocNal SpDocNalSopUsl
, KatOrg   NalOrgSpSopUsl
, KlVal    NalValutSpSopUsl
, KatNalog KatNalogSpSopUsl
, GrNal    GrNalSpSopUsl
, FPCO OtvPodr (ReadOnly)
, KatSopr
, KlVal
, KatEd
, KatOtpEd
, KatMC
, KatParty
, KatPodr
, KatMOL
, BaseDoc
, KatNazna
, Persons
, Pick
, SpKatOS
, SpStep
, SpDocs
, SpOrder
, SklOrder
, Filial
, KlPrice
, KatZak
, maravt
, SysTran
, GruzAk
, SpZakaz
, AttrNam
, AttrVal
, CellVal
, DoRes
, GroupMC
, KauReff
, KlResHr
, Kontras
, ListPar
, MarPunkt
, Marrel
, MoveCell
, NalDrag
, NoNalMC
, PickPric
, Prices
, PutLst
, RzKutPrih
, RzKutRash
, SaldoMC
, SaldoObj
, SklOst
, SoprOrdB
, SpDocNal
, SpSophoz
, StepDoc
, TekMC
, TekSaldo
, TipTex
, TmpSaldo1
, Transp
, WayItem
, SoprHoz
, TmpSaldo3
, Oborot
, Pick PickSpSopr
, KatNazna KatNazna2
, frSpav
, SpecMTR
, SaldTune
, SaldTune   SaldTune1
, SpecMTR  SpecMTRSop
, SaldTune SaldTuneSop
, SpDopEd    SpDopEd1
, SpDopEd    SpDopEd2
, KatDopEd   KatDopEd1
, KatDopEd   KatDopEd2
, SpSopr     SpSoprDEI
, SpDopEd    SpDopEdCalc
, SaldoRaz
, FrHead
, FrData
, KatKod
, KatKod     KatKodIns

Where
((
       SpSopr.cPriceList   == KlPrice2.NRec
  AND  KatSopr.cGruzFrom   == KatOrgF.NRec
  AND  KatSopr.cGruzFrom   == KatBankF.cORG
  AND  KatSopr.cGruzTo     == KatOrgT.NRec
  AND  KatSopr.cGruzTo     == KatBankT.cORG
  AND  coGetTune('MyOrg')  == KatOrgMy.NRec
  AND  coGetTune('MyBank') == KatBankMy.NRec
  AND  TypeSopr            == KatSopr.VidSopr
  AND  KatSopr.NRec        == SpSopr.cSopr
  AND  word(1)             == SpSopr.PrMC
  AND  KatSopr.VidSopr     == SoprHoz.TipDoc
  AND  KatSopr.NRec        == SoprHoz.cSoprDoc
  AND  KatSopr.cValut      == KlVal.NRec
  AND  KatSopr.cVal        == KlVal2.NRec
  AND  KatSopr.cPodrFrom   == KatPodr.NRec
  AND  KatSopr.cMolFrom    == KatMOL.NRec
  AND  KatSopr.cPodrTo     == ToPodr.NRec
  AND  KatSopr.cMolTo      == ToMOL.NRec
  AND  KatSopr.cNazna      == KatNazna.Nrec
  AND  KatSopr.cPerson     == Persons.NRec
  AND  KatSopr.cNote       == KatNotes.nRec
  AND  NRecKatNotes2       == KatNotes2.nRec
  AND  coKatSopr           == TTNDoc.wTable
  AND  KatSopr.NRec        == TTNDoc.cDoc
  AND  KatSopr.cKatSopr    == KatSopr2.NRec   //для привязки к транзитной накладной N прих.накл.
  AND  KatSopr.cOrgBase    == KatOrg.NRec
  AND  KatSopr.cCellVal    == MoveCellUzbek.NRec
  AND  SpSopr.cCellVal     == TTNMoveCell.NRec
  AND  word(0)             == TTNCellVal.PrMC
  AND  SpSopr.cMCUSL       == TTNCellVal.cMC
  AND  TTNMoveCell.NRec    == TTNCellVal.cMoveCell
  AND  NRecFromParam       == KatPodrFrom.NRec
  AND  NRecToParam         == KatPodrTo.NRec
  AND  NRecNaklParam       == KatSopr3.Nrec
  AND  SpSopr.cUKS          == KatStroy.nRec
  AND  SpSopr.nRec          == SpecZatr.cSpec
  AND  coSpSopr             == SpecZatr.coTable
  AND  SpecZatr.cAddSumTune == AddSumTune.nRec
#ifdef _MOVENAKL_
  AND  SpSopr.NRec       == SpDocNal.cSpDoc
  AND  TypeSopr          == SpDocNal.TipDoc
  AND  SpDocNal.cNalog   == KatNalog.NRec
  AND  SpDocNal.cOrg     == NalOrg.NRec
  AND  SpDocNal.cVal     == NalValut.NRec
  AND  SpdocNal.cGrNal   == GrNal.NRec
#end
  AND  SpSopr.cOtpEd     == KatOtpEd.NRec
  AND  SpSopr.cMCUSL     == KatMC.NRec
  AND  SpSopr.cParty     == KatParty.NRec
  AND  KatMC.cEd         == KatEd.NRec
  AND  SpSopr.cOtpEdGRM  == KatOtpEdGrM.NRec
  AND  KatSopr.cNMoveCell ==  Vagon.nRec
  AND  SpSopr.cNMoveCell  ==  VagonSP.nRec
  AND  _cPodrSrc              ==  PodrSrc.nRec
  AND  _cPodrDest             ==  PodrDest.nRec
  AND  _cMolSrc               ==  MOLSrc.nRec
  AND  _cMolDest              ==  MOLDest.nRec
  AND  word(31020)            ==  TempProgram.wList
  AND  word(coKatMC)          ==  ExClassName.wTable
  AND  _wTuneSeason           == ExClassName.ClassCode
  AND  ExClassName.ClassCode  == ExClassVal.ClassCode
  AND  word(coKatMC)          == ExClassVal.wTable
  AND  _cMC_class             == ExClassVal.cRec
  AND  ExClassVal.cClassSeg   == ExClassSeg.NRec // Value будет содержать признак сезонности
  AND  word(coKatMC)          == ExClassName2.wTable
  AND  _wTuneProgram          == ExClassName2.ClassCode
  AND  ExClassName2.ClassCode == ExClassVal2.ClassCode
  AND  word(coKatMC)          == ExClassVal2.wTable
  AND  _cMC_class             == ExClassVal2.cRec
  AND  word(31020)            == TempProgram2.wList
  AND  ExClassVal2.cClassSeg  == TempProgram2.cRec
  AND  KatSopr.NRec            == SpSopUsl.cSopr
  AND  word(3)                <<= SpSopUsl.PrMC
  AND  SpSopUsl.cMCUsl         == KatUsl.NRec
  AND  TypeSopr                == SpDocNalSopUsl.TipDoc
  AND  SpSopUsl.NRec           == SpDocNalSopUsl.cSpDoc
  AND  SpdocNalSopUsl.cNalog   == KatNalogSpsopUsl.NRec
  AND  SpDocNalSopUsl.cOrg     == NalOrgSpSopUsl.NRec
  AND  SpDocNalSopUsl.cVal     == NalValutSpsopUsl.NRec
  AND  SpDocNalSopUsl.cGrNal   == GrNalSpSopUsl.NRec
  AND  SpSopUsl.cUKS           == KatStroyUsl.nRec
  AND  SpSopUsl.nRec           == SpecZatrUsl.cSpec
  AND  coSpSopr                == SpecZatrUsl.coTable
  AND  SpecZatrUsl.cAddSumTune == AddSumTuneUsl.nRec
  AND  KatSopr.cOtvPodr        == OtvPodr.NRec
  AND  KatSopr.cOrg            == OrgVzr.NRec // Контрагент взаиморасчетов
  AND  KatSopr.cOrgPlat        == KatOrgPlat.NRec // Контрагент заказчик(плательщик) грузоперевозки
  AND  cNazna                  == KatNazna2.nRec

  and  coSpSopr                == SpecMTR.coTable
  and  SpSopr.nRec             == SpecMTR.cSpec
  and  SpecMTR.cSaldTune       == SaldTune.nRec
  and  coSpSopr                == SpecMTRSop.coTable
  and  SpSopUsl.nRec           == SpecMTRSop.cSpec
  and  SpecMTRSop.cSaldTune    == SaldTuneSop.nRec

  and coSpSopr                 == SpDopEd1.wTable
  and SpSopr.nRec              == SpDopEd1.cRec
  and 1                        == SpDopEd1.wTipKol
  and 1                        == SpDopEd1.Npp
  and SpDopEd1.cDopEd          == KatDopEd1.nRec

  and coSpSopr                 == SpDopEd2.wTable
  and SpSopr.nRec              == SpDopEd2.cRec
  and 1                        == SpDopEd2.wTipKol
  and 2                        == SpDopEd2.Npp
  and SpDopEd2.cDopEd          == KatDopEd2.nRec

  and SaldTune1.nRec           == SaldoRaz.cSaldTune
  and word(0)                  == SaldoRaz.wMode
  and TmpSaldo1.cPodr          == SaldoRaz.cPodr
  and TmpSaldo1.cMOL           == SaldoRaz.cMol
  and TmpSaldo1.cMC            == SaldoRaz.cMC
  and TmpSaldo1.cParty         == SaldoRaz.cParty
  and FrHead.nRec              == FrData.DataRec // Печать накладных в ФастРепорт
  and cgKatKod_FurnNakl        == KatKod.wType
  and SpSopr.nRec              == KatKod.cGroup  //фурнитура в комплекте
))

#include soprdes1.vpp

//для фильтров по Alt+F
bounds Filtr11      =  NRecFromParam     == KatSopr.cPodrFrom (noindex)
bounds Filtr12      =  NRecToParam       == KatSopr.cPodrTo   (noindex)
bounds Filtr13      =  _dOpr             == KatSopr.dOpr      (noindex)
bounds Filtr13_606  =  NRecNaklParam     == KatSopr.cKatSopr  (noindex)
bounds FiltrStatus  =  KatNotes2.Status  == KatSopr.Status    (noindex)
bounds PickSpSoprBnd = constPickSpSopr   == PickSpSopr.wList AND
                             SpSopr.nRec == PickSpSopr.cRec
bounds FiltrNazna   =  cNazna            == KatSopr.cNazna    (noindex)

condition cFiltrStatus   = (KatNotes2.nRec  = KatSopr.cNote)
condition cFiltrDescr    = (Upcase(_sDescr) = Upcase(KatSopr.Descr))
condition cFiltrDesGR    = (Upcase(_sDesGR) = Upcase(KatSopr.DesGr))
;

Parameters
  TypeSopr,
  pNRec;

ToolBar tbSklFilter {
  btBFlt = {
    Command   = cmFilterSave;
    BitMap    = F_Common::bmpBuhFilter;
    Help      = 'Фильтр на документы (Alt-B)';
    BroadCast = False;
    HotKey    = kbAltB;
  };
};
//------------------------------------------------------------------------------
ToolBar

    L_Sklad::tbSklFilter
  , F_Common::tbPrintDoc
  , F_Common::tbSaveRestoreDoc
  , F_Common::tbAttrClass
;
//------------------------------------------------------------------------------
var pAutoPlan: tBoxAutoPlanObjInterface;

#include KontrBal.var

form frm1wed('err2wed.OUT', 'ERRR') with novisual;
form sprForm('sprsoprm.OUT', 'sprsopr') with novisual;
form prmovnak('inmovnak.OUT', 'printinmovnak') with novisual;
form frmMBPProt('MC2MBPPt.OUT', 'MC2MBPProt') with novisual; // протокол передачи в МБП
form SpravkaUzbek('spravka.OUT', 'ERRR') with novisual;
form frmDiffPrice('DiffPrice.OUT', 'DiffPrice') with novisual;


//********************************************************************************

var UseDEI: boolean;       // признак использования ДЕИ
var AutoDEI: boolean;

DATASTREAM dsSopInMov
(
  [CFH] CommonFormHeader;

  Table frSpav
  (
    [MCName]   frSpav.MCName;
    [MCBarKod] frSpav.MCBarKod;
    [Kol]      frSpav.Kol;
    [edIzm]    frSpav.edIzm;
    [Massa]    frSpav.Massa;
    [Vol]      frSpav.Vol;
    [Stoim]    frSpav.Stoim;
    [Val]      frSpav.Val;
  );
)
end;

//********************************************************************************
#include rzTriggers.vpp
#include SoprAll.vpp  // общие функции сопроводительных документов
#include MSfunc.vpp
#include maymod.vpp
#include checkope.vpp
#include sopconst.inc // Константы для сопроводительных документов
#include soprgen.vpp  // Функции общей обработки сопроводительных документов
#include pickzatr.vpp  // выбор затраты
#include saldomcs.vpp // Удаление сальдо при модификации позиции складского ордера
#include soprval.vpp  // Функции валютной обработки накладных
#include naklgen.vpp  // Функции общей обработки накладных
#include rcsum.vpp    // Пересчет сумм по накладной
#include nneword.vpp  // Автоинкремент номеров складского ордера
#include delord.vpp   // Удаление складских ордеров по накладной
#include getmolsk.vpp // ф-ия получения МОЛ по умолчанию для склада
#include uksSpis.vpp
#include CheckDEISumm.vpp
#include TekOstMC.vpp  // текущий остаток в оперконтуре
//********************************************************************************

Procedure CheckNalich;
{
  if (SpSopr.cMCUsl = 0)
    Exit;

  var kolAct: double;   kolAct := 0;
  var koe: double;

#include ukschsum.vpp

  if ( KatSopr.Reserved = 1 )
    {
      Message('Для изменения количества необходимо снять резерв по данной накладной', Information);
      set SpSopr.KolFact := double(OldFieldValue);
      Exit;
    }

  if not boGetTune('Sklad.NVP.CheckNalich')
    Exit;

  var methRes: word;    methRes := wGetTune('Reserv.PrSchSklad');
  var noOst: boolean;   noOst := FALSE;
  var mskKol: string;   mskKol := '666666666666.8889999999';

  if ( (methRes = 0) AND (KatSopr.cPodrFrom <> KatSopr.cPodrTo) )
    if ( GetFirst TekMC where ((SpSopr.cMCUsl == TekMC.cMC)) <> tsOk )
      Message('Отсутствует остаток "'+KatMC.Name+'" на предприятии', Warning);
    else
      {
        kolAct := TekOstMC(TekMC.cMC) /*TekMC.kolAkt*/ - TekMC.reserve;
        koe := if(KatOtpEd.koef <> 0, KatOtpEd.koef, 1);
        noOst := ( ((kolAct - SpSopr.kolFact*koe) < 0)  OR  (kolAct < 0) );
        if noOst
          Message('Вы пытаетесь сделать внутреннее перемещение МЦ "'+KatMC.Name+'" на большее '
                + 'количество, чем имеется в свободном текущем остатке по предприятию.'#13
                + 'Свободный остаток  = '+doubleToStr(kolAct, mskKol)+' '+KatEd.abbr+'.', Warning);
      }

  if ( ( methRes = 1 ) AND ( KatSopr.cPodrFrom <> KatSopr.cPodrTo ) )
   if (oMSview.GetMethodSpisPodr(KatSopr.cPodrFrom) <> 3) OR
      (oMSview.GetMethodSpisPodr(KatSopr.cPodrFrom)=3 AND SpSopr.cParty<>0)
    if ( GetFirst SklOst where ((SpSopr.cMCUsl     == SklOst.cMC AND
                                 KatSopr.cPodrFrom == SklOst.cPodr)) <> tsOk )
      Message('Отсутствует остаток "'+KatMC.Name+'" на складе "'+KatPodr.Name+'"', Warning);
    else
      {
        kolAct := SklOst.kol - SklOst.res;
        koe := if(KatOtpEd.koef <> 0, KatOtpEd.koef, 1);
        noOst := ((kolAct - SpSopr.kolFact*koe) < 0)  OR  (kolAct < 0);
        if noOst
          Message('Вы пытаетесь сделать внутреннее перемещение МЦ "'+KatMC.Name+'" на большее '
                + 'количество, чем имеется в свободном текущем остатке по складу "'
                + KatPodr.Name + '".'#13
                + 'Свободный остаток = '+doubleToStr(kolAct, mskKol)+' '+KatEd.abbr+'.', Warning);
      }

  if ( not noOst ) AND ( methRes <> 0 ) AND ( methRes <> 1 )  //if ( methRes = 2) - для это методики здесь и проверится
    if ( GetFirst TekSaldo where ((SpSopr.cMCUsl     == TekSaldo.cMC   AND
                                   KatSopr.cPodrFrom == TekSaldo.cPodr AND
                                   KatSopr.cMOLFrom  == TekSaldo.cMOL  AND
                                   SpSopr.cParty     == TekSaldo.cParty )) <> tsOk )
     Message('Отсутствует остаток "'+KatMC.Name+'" в разрезе списания', Warning);
   else
     {
       kolAct := TekSaldo.kol - TekSaldo.res;
       koe := if ( KatOtpEd.koef <> 0, KatOtpEd.koef, 1);
       noOst := ((kolAct - SpSopr.kolFact*koe) < 0)  OR  (kolAct < 0);
       if noOst
         Message('Вы пытаетесь сделать внутреннее перемещение МЦ "'+KatMC.Name+'" на большее '
                +'количество, чем имеется в свободном текущем остатке по указанному разрезу хранения.'#13
                +'Свободный остаток = '+doubleToStr(kolAct, mskKol)+' '+KatEd.abbr+'.', Warning);
     }

  // Контроль достаточности наличия в разрезе объектов строительства (uksSpis.vpp)
  if UKS_Used AND not noOst
    {

      Set CKS.vfKoef := if(KatOtpEd.koef <> 0, KatOtpEd.koef, 1);
      UksCheckKolSpis(true, KatSopr.dSopr, methRes, oMTRFun.GetKitKau(coSpSopr, SpSopr.nRec),
                      SpSopr.cMcUsl, KatSopr.cPodrFrom, KatSopr.cMolFrom,
                      SpSopr.cParty, SpSopr.KolFact);
    }
}

//********************************************************************************

Function OtkatToOldState(mess: boolean;TW: word): boolean;
{
  OtkatToOldState := true;

  if curcommand = cmDeleteRecord
    mess := true
  else
  If Curwindow = -1 OR Curwindow = -2
    exit;

  OtkatToOldState := FALSE;

  if (tRecOtkat = KatSopr.NRec)
    if (Sub_Time(Cur_Time, tTimeOtkat) <= Time(0, 0, 1, 0))
    {
      tTimeOtkat := Cur_Time;
      OtkatToOldState := bResOtkat;
      tRecOtkat := KatSopr.NRec;
      Exit;
    }

  tTimeOtkat := Cur_Time;
  bResOtkat  := FALSE;
  tRecOtkat  := KatSopr.NRec;

  if noCheckOtkat
    {
      OtkatToOldState := TRUE;
      bResOtkat       := TRUE;
      Exit;
    }

  if curfield <> #KatSopr.NSopr
  if not CheckCloseBuhPeriodOper(KatSopr.dSopr, KatSopr.nRec)
    Exit;

  if CurCommand <> cmValue20 //удаление ордеров
    if ( wGetTune('Oper.EditSopInMovWithOrders') = 1 ) //запрет редактирования при наличии скл.ордеров
      if KatSopr.dOpr<>date(0, 0, 0) AND CurField<>#KatSopr.dOpr //поле KatSopr.dOpr можно редактировать
        {
          if ( mess )
            Message('Нельзя редактировать документ при включенной настройке '+
                    GetTuneName('Oper.EditSopInMovWithOrders'));
          Exit;
        }

  if mess
    {
  if not CanEditDocument
    Exit;
    }
  else
    if not CanEditDocumentNotMessage
      Exit;

  if not CheckTXO
    {
      if ( mess )
       if (wGetTune('Fin.User.ModHaveProvod') = 2) // запрещать
         Message('Нельзя редактировать документ при наличии проводок '+
                  GetTuneName('Fin.User.ModHaveProvod'));

      Exit;
    }

  if ((TypeSopr = 600) OR (TypeSopr = 606))
    if (
        (CurField <> #KatNotes.Name)  AND
         (CurField <> #KatNotes2.Name) AND
          (CurCommand <> cmMakeOrder)   AND
           (CurCommand <> cmValue20)
       )
      if NotEditPosStatus( mess )
        Exit;

  OtkatToOldState := TRUE;
  bResOtkat       := TRUE;
}

//********************************************************************************

Function CheckCapacity: boolean;
{
  var result: boolean;
  RunInterface('iCheckKodOil', SpSopr.nRec, result);
  CheckCapacity := result;
}

//********************************************************************************

#doc
Установка фильтра по статусу
#end
Window winFiltrStatus 'Установка фильтра по статусу' (, , sci1Esc) EscClose, DoAccept, Gray;
  Show at (27, 7, 78, 12);

Screen scrFiltrStatus;
  Table KatNotes2;

Fields
  KatNotes2.Name ('Статус документа. Выбирается по <F3>', , sci13Esc): protect;

Buttons
  cmOk, , , 'Ввод - принять выбор', , sci1Esc;
  cmValueCancel, , , 'Отмена', , sci1Esc;
<<

    `Статус` .@@@@@@@@@@@@@@@@@@@@@@@@@@@

   <.~У~становить фильтр.> <.~С~нять фильтр.>

>>
End; // Screen

HandleEvent
cmPick:
  {
    var pSysNum: word; pSysNum := 0;
    var pStatus: word; pStatus := 0;
    NRecKatNotes2 := 0;
    RunInterface('GetSomKatNotes', TypeSopr, pSysNum, pStatus, FALSE, NRecKatNotes2);
    if ( GetFirst KatNotes2 = tsOk)
      { }

    if ( KatNotes2.IsLeaf = 0)
      PopCondition(tccFiltrStatus)
    else
      PushCondition(tccFiltrStatus);

    RereadRecord(#KatNotes2);
  }

cmValueCancel:
  {
    if BoundActive(tbFiltrStatus)
      SubBounds(tbFiltrStatus);

    PopCondition(tccFiltrStatus);
    NRecKatNotes2 := 0;
    RereadRecord(#KatNotes2);
    RereadRecord(#KatSopr);
    PutCommand(cmCancel);
 }

cmOk: PutCommand(cmDefault);

cmDefault:
  {
    if IsValid(#KatNotes2)
      {
        if not BoundActive(tbFiltrStatus)
          AddBounds(tbFiltrStatus);

        if ( KatNotes2.IsLeaf = 0)
          PopCondition(tccFiltrStatus)
        else
          PushCondition(tccFiltrStatus);
      }
    else
      {
        if BoundActive(tbFiltrStatus)
          SubBounds(tbFiltrStatus);

        PopCondition(tccFiltrStatus);
      }


    if ( GetFirst KatSopr <> tsOk)
      {
        Message('Не найдено документов с выбранным статусом.', Information);

        if BoundActive(tbFiltrStatus)
          SubBounds(tbFiltrStatus);

        PopCondition(tccFiltrStatus);
      }

    RereadRecord(#KatNotes2);
    RereadRecord(#KatSopr);
  }

end;
end;

//********************************************************************************

#doc
Установка фильтров
#end
Window winFiltr2 'Установка фильтров' (, hcSklFiltrTranzNakl, sci1Esc) EscClose, DoAccept, Gray;
  Show at (, , 75, 14);

Panel pnSNFilter;
//********************************************************************************

Screen scrFiltr2 ('', , sci13Esc);
//  Table KatSopr;
Fields
  begDate             : noProtect;
  endDate             : noProtect;
  FilterParam  (, , sci1Esc) : NoProtect;
  KatPodrFrom.Name    : protect;
  KatPodrTo.Name      : protect;
  _sDescr             : protect;
  _sDesGR             : protect;
  KatNotes2.Name      : protect;
  _dOpr (, , sci1Esc) : noprotect;
  NaklParam           : protect;
  KatNazna2.name      : protect;

Buttons
  cmOK, , , 'Применить фильтр', , sci1Esc;
  cmValueCancel,,, 'Снять фильтр',, sci1Esc;
  cmCancel,,, 'Отмена',, sci1Esc;

<<
   Временной интервал:  `с` .@@@@@@@@@@   `по` .@@@@@@@@@@

   [.] Склад-отправитель:      `  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] Склад-получатель:       `  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] Дескриптор пользователя `                             .@@@@@@@@@@
   [.] Код группы пользователей`                             .@@@@@@@@@@
   [.] Статус:                 `  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] Дата перемещения:       `                             .@@@@@@@@@@
   [.] Приходная накладная:    `  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] Назначение              `  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   <.Установить фильтр.>   <.  Снять фильтр   .>   <.     Отмена      .>

>>
end; // Screen

//********************************************************************************

Function CanLinkDogovor(Msg: boolean): boolean;
{
  Result := FALSE;
}

//******************************************************************************

HandleEvent

#include SOPRC13.VPP

cmPick:
{
  var s: string[4];
  case CurField of
   //--------------
   #KatPodrFrom.Name  :
     if (RunInterface(GetAnyPodr, NrecFromParam, 0) <> cmCancel)
       set FilterParam := FilterParam OR 1;
   //--------------
   #KatPodrTo.Name  :
     if (RunInterface(GetAnyPodr, NrecToParam, 0) <> cmCancel)
       set FilterParam := FilterParam OR 2;
   //--------------
   #_sDescr :
     if (RunInterface('GetDescr', _sDescr, s, word(12345)) <> cmCancel)
       set FilterParam := FilterParam OR 4;
   //--------------
   #_sDesGR :
     if (RunInterface('GetGrDescr', _sDesGR, FALSE, FALSE, comp(0)) <> cmCancel)
       set FilterParam := FilterParam OR 8;
   //--------------
   #NaklParam:
     if (RunInterface(Spis_PrihNakl, comp(0), NrecNaklParam, longint(0), false) <> cmCancel)
       set FilterParam := FilterParam OR 64;
   //--------------

   #KatNotes2.Name:
     {
       var pSysNum: word; pSysNum := 0;
       var pStatus: word; pStatus := 0;

       NRecKatNotes2 := 0;
       if (RunInterface('GetSomKatNotes', TypeSopr, pSysNum, pStatus, false, NRecKatNotes2) <> cmCancel)
         set FilterParam := FilterParam OR 16;

       if GetFirst KatNotes2 = tsOK
         {};
     }

   #_dOpr:
      {
        set _dOpr := Cur_Date ;
        set FilterParam := FilterParam OR 32;
      }

   #KatNazna2.Name:
      {
        if RunInterface(GetSomKatNazna, False, cNazna) <> cmCancel
          set FilterParam := FilterParam OR 128;
      }
  end;
  FilterParam_Old := FilterParam;
}
//------------------------------------------------------------------------------
cmCheckField:
  {
    Var w1: word;

    case CurField of

       #FilterParam:
       {
          w1 := FilterParam xor word(FilterParam_Old);

          case w1 of

            1 :
                if ( (FilterParam and 1) > 0 )
                {
                  SetFieldOption(#KatPodrFrom.Name,ofSelectable);
                  SelectField(#KatPodrFrom.Name);
                  PutCommand(cmPick);
                }
                else
                  ClearFieldOption(#KatPodrFrom.Name,ofSelectable);
            2 :
                if ( (FilterParam and 2) > 0 )
                {
                  SetFieldOption(#KatPodrTo.Name,ofSelectable);
                  SelectField(#KatPodrTo.Name);
                  PutCommand(cmPick);
                }
                else
                  ClearFieldOption(#KatPodrTo.Name,ofSelectable);
            4 :
                if ( (FilterParam and 4) > 0 )
                {
                  SetFieldOption(#_sDescr,ofSelectable);
                  SelectField(#_sDescr);
                  PutCommand(cmPick);
                }
                else
                  ClearFieldOption(#_sDescr,ofSelectable);
            8 :
                if ( (FilterParam and 8) > 0 )
                {
                  SetFieldOption(#_sDesGR,ofSelectable);
                  SelectField(#_sDesGR);
                  PutCommand(cmPick);
                }
                else
                  ClearFieldOption(#_sDesGR,ofSelectable);
            16 :
                if ( (FilterParam and 16) > 0 )
                {
                  SetFieldOption(#KatNotes2.Name,ofSelectable);
                  SelectField(#KatNotes2.Name);
                  PutCommand(cmPick);
                }
                else
                  ClearFieldOption(#KatNotes2.Name ,ofSelectable);

            32 :
                if ( (FilterParam and 32) > 0 )
                {
                  SetFieldOption(#_dOpr,ofSelectable);
                  SelectField(#_dOpr);
                }
                else
                  ClearFieldOption(#_dOpr,ofSelectable);

            64 :
                if ( (FilterParam and 64) > 0 )
                {
                  SetFieldOption(#NaklParam,ofSelectable);
                  SelectField(#NaklParam);
                  PutCommand(cmPick);
                }
                else
                  ClearFieldOption(#NaklParam,ofSelectable);
            128 :
                if ( (FilterParam and 128) > 0 )
                {
                  SetFieldOption(#KatNazna2.Name,ofSelectable);
                  SelectField(#KatNazna2.Name);
                  PutCommand(cmPick);
                }
                else
                  ClearFieldOption(#KatNazna2.Name,ofSelectable);

          end;
          FilterParam_Old := FilterParam;
        }

    end;
  }

end;
end;  // panel
//------------------------------------------------------------------------------
HandleEvent // window

cmInit:
  {
     isfilter := false; // [101.37792] Дата создания

     if ( (FilterParam and 1) > 0 )
     {
       SetFieldOption(#KatPodrFrom.Name,ofSelectable);
     }
     else
       ClearFieldOption(#KatPodrFrom.Name,ofSelectable);

     if ( (FilterParam and 2) > 0 )
     {
       SetFieldOption(#KatPodrTo.Name,ofSelectable);
     }
     else
       ClearFieldOption(#KatPodrTo.Name,ofSelectable);

     if ( (FilterParam and 4) > 0 )
     {
       SetFieldOption(#_sDescr,ofSelectable);
     }
     else
       ClearFieldOption(#_sDescr,ofSelectable);

     if ( (FilterParam and 8) > 0 )
     {
       SetFieldOption(#_sDesGR,ofSelectable);
     }
     else
       ClearFieldOption(#_sDesGR,ofSelectable);

     if ( (FilterParam and 16) > 0 )
     {
       SetFieldOption(#KatNotes2.Name,ofSelectable);
     }
     else
       ClearFieldOption(#KatNotes2.Name ,ofSelectable);

     if ( (FilterParam and 32) > 0 )
     {
       SetFieldOption(#_dOpr,ofSelectable);
     }
     else
       ClearFieldOption(#_dOpr,ofSelectable);

     if ( (FilterParam and 64) > 0 )
     {
       SetFieldOption(#NaklParam,ofSelectable);
     }
     else
       ClearFieldOption(#NaklParam,ofSelectable);

     if ( (FilterParam and 128) > 0 )
     {
       SetFieldOption(#KatNazna2.Name,ofSelectable);
     }
     else
       ClearFieldOption(#KatNazna2.Name,ofSelectable);
    noCheckOtkat := TRUE;

    ReadMyDsk(begDate, 'aBEGdate_'+string(KatSopr.VidSopr), FALSE);
    ReadMyDsk(endDate, 'aENDdate_'+string(KatSopr.VidSopr), FALSE);

    case TypeSopr of
      600:
        {
          //ClusterDisabledField(#FilterParam, word(0));
          //SetFieldOption(#KatNotes2.Name, ofSelectable);
          ClusterDisabledField(#FilterParam, word(64));
          ClearFieldOption(#NaklParam, ofSelectable);
        }
      601, 602, 603, 605 :
        {
          ClusterDisabledField(#FilterParam, word(16+64));
          ClearFieldOption(#KatNotes2.Name, ofSelectable);
          //ClusterDisabledField(#FilterParam, word(64));
          ClearFieldOption(#NaklParam, ofSelectable);
        }
      606:
        {
          ClusterDisabledField(#FilterParam, word(16));
          ClearFieldOption(#KatNotes2.Name, ofSelectable);
        }
    end;
  }

cmValueCancel:
  {
    ResetBounds(#KatSopr);
    PushBounds(tbMainBound);

    if ( ConditionActive(tccFiltrDescr )) PopCondition(tccFiltrDescr );
    if ( ConditionActive(tccFiltrDesGR )) PopCondition(tccFiltrDesGR );
    if ( ConditionActive(tccFiltrStatus)) PopCondition(tccFiltrStatus);

    FilterParam := 0;
    FilterParam_Old := 0;
    KatPodrFrom.Name := '';
    KatPodrTo.Name   := '';
    _sDescr          := '';
    _sDesGR          := '';
    KatNotes2.Name   := '';
    _dOpr := date(0,0,0);
    NaklParam        := '';
    KatNazna2.name   := '';



    RereadRecord;
    ReScanPanel(#KatSopr);
    PutCommand(cmCancel);
  }

cmOk:
  PutCommand(cmDefault);

cmDefault:
  {
    aBegDate := BegDate;
    aEndDate := EndDate;

    ResetBounds(#KatSopr);
    PushBounds(tbdMainBound);

    if ( FilterParam AND 1)  <> 0
      AddBounds(tbFiltr11);

    if ( FilterParam AND 2)  <> 0
      AddBounds(tbFiltr12);

    if ( FilterParam AND 32) <> 0
      AddBounds(tbFiltr13);

    if ( FilterParam AND 64) <> 0
      if TypeSopr = 606
        AddBounds(tbFiltr13_606);

    if ( FilterParam AND 4) <> 0
      {
        if ( not ConditionActive(tccFiltrDescr))    // если не установлен
          PushCondition(tccFiltrDescr);             // установить
      }
    else
      if ( ConditionActive(tccFiltrDescr))        // если установлен
        PopCondition(tccFiltrDescr);              // снять кондишн

    if ( FilterParam AND 8) <> 0
      {
        if ( not ConditionActive(tccFiltrDesGR))
          PushCondition(tccFiltrDesGR);
      }
    else
      if ( ConditionActive(tccFiltrDesGR))
        PopCondition(tccFiltrDesGR);

    if ( FilterParam AND 16) <> 0 //статус
      {
        if IsValid(#KatNotes2)
          {
            AddBounds(tbFiltrStatus);
            if ( KatNotes2.IsLeaf = 0 )
              PopCondition(tccFiltrStatus)
            else
              PushCondition(tccFiltrStatus);
          }
      }
    else
      {
        if ConditionActive(tccFiltrStatus)
          PopCondition(tccFiltrStatus);

        if BoundActive(tbFiltrStatus)
          SubBounds(tbFiltrStatus);
      }

    if ( FilterParam and 128) <> 0
      {
        AddBounds(tbFiltrNazna);
      }

    //-------------------------------------------------
    if ( GetFirst KatSopr <> tsOk)
      {
        ResetBounds(#KatSopr);
        PushBounds(tbMainBound);

        if ( ConditionActive(tccFiltrDescr )) PopCondition(tccFiltrDescr );
        if ( ConditionActive(tccFiltrDesGR )) PopCondition(tccFiltrDesGR );
        if ( ConditionActive(tccFiltrStatus)) PopCondition(tccFiltrStatus);

        FilterParam := 0;
        FilterParam_Old := 0;
        KatPodrFrom.Name := '';
        KatPodrTo.Name   := '';
        _sDescr          := '';
        _sDesGR          := '';
        KatNotes2.Name   := '';
        _dOpr := date(0,0,0);
        NaklParam        := '';
        KatNazna2.name   := '';



        RereadRecord;
        ReScanPanel(#KatSopr);
        PutCommand(cmCancel);

        if(BegDate > EndDate )
        {
          message('Начальная дата диапазона больше конечной.'#13+
             'Фильтр снят!', Information);
          BegDate := aBegDate;
          EndDate := aEndDate;
        }
        else
          message('Нет записей, удовлетворяющих условиям фильтра.'#13+
             'Фильтр снят!', Information);
      }
    else
      isfilter := true; // [101.37792] Дата создания


    RereadRecord;
    ReScanPanel(#KatSopr);

    SaveMyDsk(begDate, 'aBEGdate_'+string(KatSopr.VidSopr));
    SaveMyDsk(endDate, 'aENDdate_'+string(KatSopr.VidSopr));
  }

cmDone:
{
  ReScanPanel(#KatSopr);
  noCheckOtkat := false;
}

end;// HandleEvent;
end // Window winFiltr2

//********************************************************************************

Procedure DelDoRes;  // По внутренним перемещениям нет счетов
{
}

//********************************************************************************

Procedure DoDeleteCurrentSpSopr;
{
  if not IsValid(tnSpSopr)  Exit;

  if ( boGetTune('Oper.Netto&Tara_AutoCalc') AND (SpSopr.PrMC = 1))
  {
    var pGetDocSpecInfo: GetDocSpecInfo;
    var MassaTov,
        MassaTara: double;

    pGetDocSpecInfo.GetOneSpecInfo(coKatSopr, SpSopr.nRec, MassaTov, MassaTara);

    set KatSopr.Netto := KatSopr.Netto - MassaTov;
    set KatSopr.mTara := KatSopr.mTara - MassaTara;
  }

  Set KatSopr.Summa := KatSopr.Summa - SpSopr.Price * SpSopr.KolOpl;
  Set KatSopr.SumVal := KatSopr.SumVal - SpSopr.VPrice * SpSopr.KolOpl;

  Update_Current_KatSopr;

  //поиск следующей записи
  var pNextRec: comp;

  PushPos(#SpSopr);
  if ( GetNext SpSopr <> tsOk)
    if ( GetPrev SpSopr = tsOk)
      { }

  pNextRec := SpSopr.NRec;
  PopPos(#SpSopr);
  //удаление записи
  oSDfuns.SpSopr_Delete (SpSopr.nRec);
  //установка позиции на сл. запись
  if pNextRec <> SpSopr.NRec
    if GetLast SpSopr where ((pNextRec == SpSopr.NRec)) <> tsOk
      { }
} // Procedure DoDeleteCurrentSpSopr

//********************************************************************************

Procedure OnAfterInsertSpSopr;
{
}

//********************************************************************************

Procedure OnAfterInsertSpSoprFromPrice;
{
}

//********************************************************************************

#include srpsopr.vpp  // Пересчет средних цен по накладной
#include makerash.vpp  // Функции формирования расходных ордеров
#include makemove.vpp // Осуществление операции внутреннего перемещения
#include gmckat.vpp   // Выбор МЦ по F3
#include NCopNal.vpp    // без налогов
#include NCopOrdB.vpp   // без распределения

#define __NOT_VERIFY_NEED119__ //не искать прайс, привязанный к группе к/а
#define __NOT_VERIFY_VHODNAL__ //не фильтровать прайсы по входимости налогов
#include gmcprl.vpp   // Выбор МЦ по Ctrl-F3
#undef __NOT_VERIFY_VHODNAL__
#undef __NOT_VERIFY_NEED119__
#include makemvoc.vpp // Формирование карточки ОС
#include copySopr.vpp  // Копирование документа
#include E:\!StroyTehNorm\!project\F_MBP\vip\Make_mbp.vpp  // Создание карточки МБП для МЦ
#include rzskmove.vpp  // Перемещение в розницу
#include WrInPut.vpp  // формирование заказа в Автотранспорте

//********************************************************************************

Function OtkatOrders(doDelMove, isWarnings: boolean): boolean;
{
  OtkatOrders := FALSE;

  if ( KatSopr.NRec = 0)
    Exit;

  if not OtkatToOldState(true, 0)
    Exit;

  make_prih := TRUE;
  make_rash := TRUE;

  case KatSopr.VidSopr of
    600, 606:
      if ( not doDelMove)
        OtkatOrders := TRUE
      else
        OtkatOrders := DeleteOrders(isWarnings);
    601:
      if OtkatKatOs(0)
        OtkatOrders := DeleteOrders(false);
    602:
      if ( CheckDeleteMBPOperation)
        if DeleteOrders(isWarnings)
          {
            DeleteMBPOperation
            OtkatOrders := TRUE;
          }
    603: OtkatOrders := RDeleteOrders(isWarnings);
    605: if OtkatKatNma(0) OtkatOrders := DeleteOrders(false);
  end; // case
}

//********************************************************************************

Function BeforeDeleteKatSopr(pNRec: comp; isWarnings, isVisual: boolean): boolean;
var Res: boolean;
{
  BeforeDeleteKatSopr := FALSE;
  if GetFirst KatSopr where ((pNRec == KatSopr.Nrec)) <> tsOk
    Exit;

  if ( KatSopr.Reserved <> 1)
    {
      if (wGetTune('Sklad.Akt_Move.IsDelOrder') = 1)
        if (GetFirst SklOrder where ((KatSopr.nRec == SklOrder.cSopr)) = tsOk)
        {
          Message('Удаление ордеров запрещено настройкой:'#13 +
                  GetTuneName('Sklad.Akt_Move.IsDelOrder'));
          Exit;
        }

      if ( isVisual) StartNewVisual(vtRotateVisual, vfTimer, 'Удаление ордеров', 1);
        Res := OtkatOrders(true, isWarnings);
      if ( isVisual) StopVisual('', 0);
        BeforeDeleteKatSopr := Res;
      if ( not Res) Exit;
    }
  else
    {
      if ( isWarnings)
        Message('Перед удалением накладной необходимо снять с резерва матценности...', CancelButton);
      BeforeDeleteKatSopr := FALSE;
    }
}

//********************************************************************************

#include prninmov.vpp // печать накладной на вн. перемещение

// Производит резервирование или снятие с резерва МЦ по накладной
// в соответствии в параметром Destanse:
//   - TRUE - прозивести резервирование
//   - FALSE - произвести снятие с резерва
Procedure DocBas_Process;
{
  var i: word;

  if not OtkatToOldState(true, word(0)) Exit;

  if GetMarkerCount(MarkerNZ) = 0
  {
    CalcSrPrice;

    Update_Current_KatSopr;

    Exit;
  }

  var cNRec: comp;

  PushPos(#KatSopr);

  For (i := 0; i < GetMarkerCount(MarkerNZ); inc(i))
    if GetMarker(MarkerNZ, i, cNRec)
      if ( GetFirst KatSopr where ((cNRec == KatSopr.NRec)) = tsOk)
        {
          CalcSrPrice;
          Update_Current_KatSopr;
        }

  PopPos(#KatSopr);

  ClearMarker(MarkerNZ)
  RereadRecord(#KatSopr);
}

//********************************************************************************

Procedure MessageMCreserved;
{
  Message('Выполнение невозможно, т.к. имеются зарезервированные по накладной МЦ', Warning + CancelButton);
}

//********************************************************************************
// Добавить все МЦ из остатков по разрезу на дату документа
procedure pasteMCFromNal(checkMTR : boolean);
{
  if ( GetFirst TmpSaldo1 <> tsOK)
  {
    message('Нет остатков МЦ в данном разрезе на дату документа.', Information);
    exit;
  }

  NeedRound := wGetTune('Round.OrderPriceSum') = 1;
  min_kol   := doGetTune('Oper.MinKolMC');

  StartNewVisual(vtNumericVisual, vfTimer, 'Пополнение спецификации:'#13#3, 1);

  _LOOP TmpSaldo1 ordered by index TMPSaldo103
    {
      if checkMTR
        if getFirst SpSopr where (( KatSopr.NRec     == SpSopr.cSopr  and
                                    TMCUSL           == SpSopr.PrMC   and
                                    TmpSaldo1.cMC    == SpSopr.cMcUsl and
                                    TmpSaldo1.cParty == SpSopr.cParty )) = tsOk
           continue;

      NextVisual;
      ClearBuffer(#SpSopr);
      SpSoprDefault;

      SpSopr.Kol   := TmpSaldo1.Kol;

      d := Trunc(SpSopr.Kol);
      if ( Abs(SpSopr.Kol - d) < min_kol) SpSopr.Kol := d;

      SpSopr.KolFact := SpSopr.Kol;
      SpSopr.dOprttn := KatSopr.dOpr;
      SpSopr.KolOpl  := SpSopr.Kol;
      SpSopr.cMcUsl  := TmpSaldo1.cMC;
      SpSopr.cParty  := TmpSaldo1.cParty;
      SpSopr.Price   := TmpSaldo1.Price;
      SpSopr.VPrice  := TmpSaldo1.VPrice;

      if (oMSView.GetTuneMSForPodr(KatSopr.cPodrFrom) = 1) AND oMSView.CheckVidSopr(KatSopr.VidSopr) // по цене приобретения
        SpSopr.cSpOrder := TmpSaldo1.cGroupMC;

      SpSopr.rPrice  := SpSopr.Price;
      SpSopr.rVPrice := SpSopr.vPrice;
      SpSopr.Price   := FRoundRubOrd(1, SpSopr.rPrice * SpSopr.kolFact)/SpSopr.kolFact;
      SpSopr.VPrice  := FRoundValOrd(1, SpSopr.rVPrice * SpSopr.kolFact)/SpSopr.kolFact;

      if NeedRound
      {
        SpSopr.rPrice  := FRoundRubOrd(1, SpSopr.rPrice);
        SpSopr.rVPrice := FRoundValOrd(1, SpSopr.rVPrice);
        SpSopr.price   := SpSopr.rPrice;
        SpSopr.vPrice  := SpSopr.rVPrice;
      }

      if ( SpSopr.PrMC = 1)
        if ( GetFirst KatMC where ((SpSopr.cMcUsl == KatMC.NRec)) = tsOk)
        {
          SpSopr.Netto := KatMC.Massa;
          SpSopr.mTara := KatMC.mTara;
        }

      ReCalcGrM; // расчет грузовых мест

      if ( Insert current SpSopr = tsOK)
        if not checkMTR
          {
            _LOOP SaldTune1
              if getfirst SaldoRaz = tsOK
                 if (GetLast SaldoObj where (( SaldoRaz.NRec == SaldoObj.cSaldoRaz
                                              and SpSopr.Kol == SaldoObj.Kol (NoIndex)))= tsOk)
                   {
                     oMTRFun.SaveKitKauForKit(SaldoObj.cKitKau);
                     oMTRFun.InsSpecMTR(coSpSopr, SpSopr.nRec);
                   }
          }

      KatSopr.Summa  := KatSopr.Summa + SpSopr.Price * SpSopr.KolOpl;
      KatSopr.SumVal := KatSopr.SumVal + SpSopr.VPrice * SpSopr.KolOpl;
    } // _LOOP

  StopVisual('', 0);

  set KatSopr.Summa  := FSRoundRub(KatSopr.Summa);
  set KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);

  update_current_KatSopr;

  RereadRecord(#SpSopr);
}
//******************************************************************************

procedure AddAllMCFromNal;
{
  if (oMSView.GetTuneMSForPodr(KatSopr.cPodrFrom) = 0) OR (not oMSView.CheckVidSopr(KatSopr.VidSopr))// обычная методика списания
    {
      if UKS_Used
        {
      oSaldo.UksStore_Run(true, KatSopr.dSopr, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                , 0
                , if( KatSopr.cPodrFrom = 0, 0, KatSopr.cPodrFrom)
                , if( KatSopr.cMolFrom  = 0, 0, KatSopr.cMolFrom)
                , 0
                , TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE,  TRUE,  TRUE);
      pasteMCFromNal(false);
        }

      Store_Init;
      Store_ReInit;
      Store_Run(KatSopr.dSopr, 0,
                if ( KatSopr.cPodrFrom=0, comp(-1), KatSopr.cPodrFrom),
                if ( KatSopr.cMolFrom =0, comp(-1), KatSopr.cMolFrom),
                0, true, true, true);
      Store_Done;
      pasteMCFromNal(true);
    }
  else // по цене приобретения
    {
      StartNewVisual(vtIndicatorVisual, vfTimer, 'Поиск свободных приходов', 1);
      NextVisual;

      delete all TmpSaldo1;
      _LOOP SklOrder where ((  0  == SklOrder.SP       and
                               0  == SklOrder.vidOrder and
              KatSopr.cPodrFrom   == SklOrder.cPodr    and
                  KatSopr.dSopr  >>= SklOrder.dOrd     and
                ( KatSopr.cMolFrom = SklOrder.cMOL )
                           ))
       {
         if not NextVisual
           {
             StopVisual('',0);
             Exit;
           }

         _LOOP SpOrder where (( SklOrder.nRec == SpOrder.cSklOrder and
                                          (  1 = SpOrder.empty  and //полон
                          GetPresision_forKol <= SpOrder.kol    and
                          GetPresision_forKol <= SpOrder.ostatok )
                             ))
          {
            if not NextVisual
              {
                StopVisual('',0);
                Exit;
              }

            TmpSaldo1.cMC      := SpOrder.cMC;
            TmpSaldo1.cPodr    := SpOrder.ccPodr;
            TmpSaldo1.cMOL     := SpOrder.ccMOL;
            TmpSaldo1.cParty   := SpOrder.cParty;
            TmpSaldo1.cGroupMC := SpOrder.nRec;  // для присвоения в SpSopr
            TmpSaldo1.kol    := SpOrder.ostatok;
            _LOOP SpSopr where (( SpOrder.nRec   == SpSopr.cSpOrder and // по подготовленным документам к списаниям
                                      (word(206) <> SpSopr.vidSopr) ))
                TmpSaldo1.kol:= TmpSaldo1.kol - SpSopr.kolFact*if(SpSopr.cOtpEd<>0, KatOtpEd.koef, 1);

            TmpSaldo1.price  := SpOrder.srPrice;
            TmpSaldo1.vPrice := oValFunc.GetAnyCurrency(SpOrder.cVal, if(SpOrder.cVal<>0, SpOrder.vPrice, SpOrder.srPrice), KatSopr.dSopr, KatSopr.cValut);
            TmpSaldo1.cVal   := SpOrder.cVal;
            insert current TmpSaldo1;
          } //_L SpOrder

       } //_L SklOrder
      StopVisual('',0);

      pasteMCFromNal(false);
      }
        }

//********************************************************************************
#include soprnal.vpp
//******************************************************************************

Function GetDefUslGrNal: comp;
begin
  GetDefUslGrNal := 0;
  ResetBounds(#KatUsl);
  if ( GetFirst KatUsl where ((SpSopUsl.cMCUsl == KatUsl.NRec)) = tsOk)
    GetDefUslGrNal := KatUsl.cGrNal;
  SetBounds(#KatUsl);
end;

//********************************************************************************

Procedure RecalcSpSopUslNalogs(aGrNal: comp;chGrNal: comp); // Пересчет налогов по соп. услугам
begin
end;

//********************************************************************************

Procedure CalcSumNalogsSopUsl;
begin
end;

//********************************************************************************

Procedure SumSopUslChanged(aNRec: comp);
begin
end;

#include soprc00b.vpp //ckecksumma
#include sopruzb.vpp  //процедуры повагонное формирование накладных
#include sopruzb1.vpp // транзитные накладные
#include sopruzb2.vpp // транзитные накладные

#ifdef _MOVENAKL_
#include soprnald.vpp  // Функции обработки налогов
#include wspdocna.vpp // Окно с редактированием налогов

#ifndef _SOPINMOV_VPP
#define _SOPINMOV_VPP

Create View _sopinmov
Var
   _varParty : comp;
From
  SpOrder,
  SpSopr,
  SpDocNal,
  KatSopr,
  synonym KatOrg NalOrg,
  synonym KlVal NalValut

 Where
  ((
           _varParty            == SpOrder.cParty
    and  SpOrder.cSpSopr        == SpSopr.NRec
    and  SpOrder.ccPodr         == KatPodr.NRec  //KatPodr.UchPrc 0 - настр 1- c нал,2- без нал
  ))                                             //SystDate.FormUch
;
//------------------------------------------------------------------------------
Procedure sop_mov(var _Podr : comp; var _Mol : comp; var _Party : comp);
{
var sf : comp;
 _sopinmov._varParty := _Party;

  if (_sopinmov.GetFirst  SpOrder = tsOk)
   do
   {
    if ((_sopinmov.SpOrder.ccPodr = _Podr) and (_sopinmov.SpOrder.ccMol = _Mol) and (_sopinmov.SpOrder.VidOrder = word(0)))
    {
      if (KatPodr.UchPrc <> 0)
      {
       if (KatPodr.UchPrc = 1)
       KatSopr.VhodNal := KatPodr.UchPrc
       else KatSopr.VhodNal := 0;
      }
      else
        KatSopr.VhodNal := wGetTune('Oper.FormUch');

      KatSopr.cOrgBase := 0;
      update current KatSopr;
      SpSopr.ManualTax := _sopinmov.SpSopr.ManualTax;
      update current SpSopr;

      delete safe SpDocNal;
      if (SpSopr.ManualTax <> 0)
       if (_sopinmov.GetFirst SpDocNal where ((_sopinmov.SpSopr.NRec == SpDocNal.cSpDoc and
          _sopinmov.SpSopr.VidSopr == SpDocNal.TipDoc)) = tsOk)
        do
        {
        sf := _sopinmov.SpDocNal.NRec;
        _sopinmov.SpDocNal.NRec := 0;
        _sopinmov.SpDocNal.cSpDoc := SpSopr.NRec;
        _sopinmov.SpDocNal.TipDoc := word(600);
        _sopinmov.SpDocNal.cOrg := 0;
        _sopinmov.SpDocNal.SumNal  := _sopinmov.SpDocNal.SumNal;
        _sopinmov.SpDocNal.SumVal  := _sopinmov.SpDocNal.SumVal;
        _sopinmov.SpDocNal.Summa := _sopinmov.SpDocNal.Summa;
        _sopinmov.insert current SpDocNal;

        _sopinmov.GetFirst SpDocNal where ((sf == SpDocNal.NRec));
        }
        while (_sopinmov.GetNext SpDocNal where ((_sopinmov.SpSopr.NRec == SpDocNal.cSpDoc and
         _sopinmov.SpSopr.VidSopr == SpDocNal.TipDoc)) = tsOk);
       }
   }
   while (_sopinmov.GetNext SpOrder = tsOk)
}
#end
#end

//********************************************************************************

#include ShowKau.vpp

Function GetKAUField(pNum : integer) : string;
{
  GetKAUField := #ShowKau(if(pNum = 1, SaldTune.wObj, SaldTune.wKau[pNum - 1]), if(pNum = 1, SpecMTR.cObj, SpecMTR.cKau[pNum - 1]));
}

Function GetKAUFieldS(pNum : integer) : string;
{
  GetKAUFieldS := #ShowKau(if(pNum = 1, SaldTuneSop.wObj, SaldTuneSop.wKau[pNum - 1]), if(pNum = 1, SpecMTRSop.cObj, SpecMTRSop.cKau[pNum - 1]));
}

//******************************************************************************
#include lm2sautopick.vpp
//******************************************************************************

#doc
Спецификация документа
#end
Window SpecifInfo 'Спецификация документа' EscClose;
  Show at (, , 104, 30);


//******************************************************************************

Panel pnSpecifInfo
  Table SpSopr;

Screen scrSpecifInfo (, hcSkladNaklWExtInf, sci178Esc);
  Show at (, , , 16);

Fields
  KatMC_Name      (, , sci1378Esc);
  BarKod          (, , sci1378Esc);
  KolFact         ('Поступившее/списанное количество МЦ', , sci178Esc)
             : [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], noprotect;
  OtpEd           ('Наименование отпускной единицы', , sci1378Esc)
             : protect;
  StrCurse   : skip;
  SpSopr.rPrice   ('Цена в национальной валюте', , sci178Esc)
             : [brForSopr_Price, '\2p[|-]36`666`666`666`666.88'];
  SpSopr.rVPrice  ('Цена в валюте', , sci178Esc)
             : [brForSopr_VPrice, '\2p[|-]36`666`666`666`666.88'];
  Simvolv         ('Символ валюты.', , sci1378Esc)
             : protect;
  KatParty_Name   ('Ссылка на партию полученной МЦ', , sci1378Esc);
#ifdef _MOVENAKL_
  AutoNalogs      ('Налоги рассчитываются автоматически или вручную', , sci1378Esc)
             : protect;
  StrSumNal       ('Сумма налогов по позиции в НДЕ', , sci1378Esc)
             : skip;
#end
  SpSopr.Netto    ('Вес нетто', , sci178Esc)
             : [prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
  KlPrice2.Name   ('Прайс-лист', , )
             : skip;
  SpSopr.mTara    ('Вес тары', , sci178Esc)
             : [prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
  TTN_massa_all   ('Вес брутто', , sci178Esc)
             : [prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
  SpSopr.nKvit    ('Дополнительная информация',, sci1378Esc)
             : noprotect;

Buttons
  cmValue3, , , 'Окно для редактирования товарно-транспортной информации по позиции', , sci178Esc;
  #ifdef _MOVENAKL_
  cmAttrib, , , '<Ctrl><Enter> - Просмотр/редактирование налогов к позиции документа', hcSpSoprEditNalogs, sci178Esc;
  #end
<<

    Наименование МЦ                                 Номенклатурный номер
    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@
   `Количество по накладной`.@@@@@@@@@@@@@@@@ .@@@@@@
                                             .@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   `Цена`  .@@@@@@@@@@@@@@@@  `Цена в валюте`.@@@@@@@@@@@@@@@@@@@@@.@@@@@@
   `Партия`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#ifdef _MOVENAKL_
   `Налоги`.@@@@@@@@@@@@@@@@@@@@@@@@ `на сумму`.@@@@@@@@@@@@@@@@@@@@@@@@@@
#end
    Нетто .@@@@@@@@@@@@@@@     `Прайс-лист`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    Тара  .@@@@@@@@@@@@@@@
    Брутто.@@@@@@@@@@@@@@@     `Доп. информация`.@@@@@@@@@@@@@@@@@@@@@@@@@

                       <.~Т~оварно-транспортная информация.>
#ifdef _MOVENAKL_
                       <.~Н~алоги к позиции               .>
#end
>>
end; // Screen

//********************************************************************************

Screen scrSpecifInfoGrM (, hcSkladNaklWExtInf,);
  Show at (, , , 16);

Fields
  KatMC_Name       (, , sci1378Esc);
  BarKod           (, , sci1378Esc);
  KolFact          ('Поступившее/списанное количество МЦ', , sci178Esc)
              : [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], noprotect;
  OtpEd            ('Наименование отпускной единицы', , sci1378Esc)
              : protect;
  StrCurse    : skip;
  SpSopr.rPrice    ('Цена в национальной валюте', , sci178Esc)
              : [brForSopr_Price, '\2p[|-]36`666`666`666`666.88'];
  SpSopr.rVPrice   ('Цена в валюте', , sci178Esc)
              : [brForSopr_VPrice, '\2p[|-]36`666`666`666`666.88'];
  Simvolv          ('Символ валюты.', , sci1378Esc)
              : protect;
  KatParty_Name    ('Ссылка на партию полученной МЦ', , sci1378Esc);
  TTNMoveCell.Name ('Единица подвижного состава', , sci1378Esc)
              : protect;
  SpSopr.NVagon    ('Номер единицы подвижного состава', , sci1378Esc);
  SpSopr.KolGrM    ('Количество грузовых мест', , sci178Esc)
              : [prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
  KatOtpEdGrM.Name ('Единица измерения грузовых мест', , sci1378Esc)
              :  protect;
  SpSopr.Netto     ('Вес нетто', , sci178Esc)
              : [prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
  SpSopr.mTara     ('Вес тары', , sci178Esc)
              : [prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
  KlPrice2.Name    ('Прайс-лист', , )
              : skip;
  TTN_massa_all    ('Вес брутто', , sci178Esc)
              : [prSignsInKol, '\3p[|-]36`666`666`666`666.888'];

Buttons
cmValue3, , , 'Окно для редактирования товарно-транспортной информации по позиции', , sci178Esc;
 <<

    Наименование МЦ                                Номенклатурный номер
    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@
   `Количество по накладной`.@@@@@@@@@@@@@@@@ .@@@@@@
                                             .@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   `Цена`  .@@@@@@@@@@@@@@@@  `Цена в валюте`.@@@@@@@@@@@@@@@@@@@@.@@@@@@@
   `Партия`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    Единица подв.состава    .@@@@@@@@@@@@@@@@@@ №вагона.@@@@@@@@@@@@@@@@@
    Количество грузовых мест.@@@@@@@@@@@@@@@@@@ Ед.изм. .@@@@@@@@@@@@@@@@@
    Нетто .@@@@@@@@@@@@@@@
    Тара  .@@@@@@@@@@@@@@@      `Прайс-лист`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    Брутто.@@@@@@@@@@@@@@@

                        <.~Т~оварно-транспортная информация.>

 >>
end; // Screen

Tabbedsheet bottom Kau_i_Furn;
  Show at (, 17, , );
Embedded scKauEdit 'Целевой учет' Interface oLinkMtr2Spec;
end;

Embedded scFurnInSet 'Фурнитура' interface iFurnInSet;
end;
end; //tabbedsheet

HandleEvent

cmPositionChanged:
{
  if (CurTable = #SpSopr and IsValid(#SpSopr))
    oLinkMTR2Spec.SetObjParam(word(coSpSopr), SpSopr.nRec, if(not OtkatToOldState(false, word(0)), 1, 0));
  iFurnInSet.SetFurnInSetRec(if (isValid(#SpSopr), SpSopr.Nrec, 0), false);
}

cmChangeTabbedSheetFormat:
{
  if Target = scFurnInSet
    iFurnInSet.SetFurnInSetRec(if (isValid(#SpSopr), SpSopr.Nrec, 0), false);
}
end;
end; // Panel;
//------------------------------------------------------------------------------
HandleEvent

#include SOPRC13.VPP

cmInit:
  {
    SetFOSpecifinfo; // методика списания по фактической цене прихода
    SelectField(If (katsopr.cval = 0, #SpSopr.rPrice, #SpSopr.rVPrice));
    iFurnInSet.SetFurnInSetRec(if (isValid(#SpSopr), SpSopr.Nrec, 0), false);
  }

cmIerarchy :
{
  if ( (CurTable = #SpSopr) and (IsValid(#SpSopr)) )
    {
      SaveLinkMTRAutoPick(CurField);
      RunInterface('LinkMtr2Spec', word(coSpSopr), SpSopr.nRec, if(not OtkatToOldState(false, word(0)), 1, 0));

      SetModified(true);
      UpdateTable;
    }
}

#ifdef _MOVENAKL_
cmAttrib:
  {
    RunWindowModal(EditNalogs);

    CalcSumNalogs;

    if ( KatSopr.VidSopr <> 606)
      RecalcSumm(false);
    else
      {
        CheckSumma(false);
        KatSopr.Summa := FSRoundRub(KatSopr.Summa);
        KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);
        if ( update current KatSopr = tsOk)
          { }
      }
  }
#end

cmRestoreDoc:
  {
    if not OtkatToOldState(true, word(0))
      Exit;

    if ( KatSopr.reserved = 1)
      {
        MessageMCreserved;
        Abort;
        Exit;
      }

    GetMCUSLPrl;

    if ( TypeSopr = 600 OR TypeSopr = 606)
      if ( KatSopr.cCellVal<>0 OR trim(KatSopr.nVagon)<>'')
        EditSpSoprUzbek(2);
  }

cmOpenSearch:
  case CurField of
  //--------------
    #SpSopr.rPrice
  , #SpSopr.rVPrice:
      {
        if( oMSview.getTuneMSForPodr(KatSopr.cPodrFrom) = 1 )
          {
            SetFaktCenaPrih;
            Abort;
          }
      }
  //--------------
    else
  //--------------
      PutCommand(cmPick);
  //--------------
  end;

cmValue3:
  { //-- интерфейс с товарно-транспортной информацией по позиции
    Update_Current_KatSopr;

    SaveMyDsk(OtkatToOldState(false, word(0)), '_CanEditTTNDoc_');

    RunInterface(SpTTNDoc, word(coSpSopr), SpSopr.NRec);
  }

cmPositionChanged:
  SetFOSpecifinfo;

cmPick:
{
  if (TypeSopr = 602)
    if (CurField = #SpSopr.nKvit)
      RunInterface('SizeByGrSFO', Word(20), KatMC.cGroupMC, SpSopr.nKvit);
}

end;
end; // Window specifinfo

//********************************************************************************

#doc
Расширенная информация
#end
Window ExtendetInfo 'Расширенная информация' (, hcSklOknoRasInf, sci1Esc) EscClose;
  Show at (, 5, 80, 20);


//******************************************************************************

Panel pnExtendetInfo
  Table KatSopr;

Screen scrExtendetInfo (, hcSklOknoRasInf, sci1Esc)
  Show at(, , ,);

Fields
  Persons.FIO   ('Лицо, ответственное за проведение операции', hcSoprInMovFPerson, sci1378Esc)
           : protect;
  ifRes    : skip;
  KatSopr.srokRes : noprotect;
//////////////////////////
  KatOrgF.Name  ('Грузоотправитель', , sci1378Esc)
           : protect;
  KatOrgT.Name  ('Грузополучатель', , sci1378Esc)
           : protect;
  trp           (' Проводить учет  транспорта  в данной операции', , sci1378Esc)
           : protect;
  OtvPodr.Name  ('Центр ответственности, ответственный за выполнение.', , sci1378Esc)
           : PickButton, protect;
buttons
  cmDoRes, , , 'Резервирование матценностей по накладной', hcSoprInMovBMakeReserve, sci178Esc;
  cmSkipRes, , , 'Снятие с резерва зарезервированных матценностей', hcSoprInMovBReserveBack, sci178Esc;
  cmValue2, , , 'Вызов окна с транспортной информацией ', hcKouDocBTTI, sci178Esc;
<<

    `Операцию провел` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                 `Матценности по накладной`.@@@@@@@@@@@@@@@@@.@@@@@@@@@@
                    <.Резервирование.> <.Снятие с резерва.>

    `Грузоотправитель`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `Грузополучатель `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                          `Учет транспорта `.@@@@@

                    <.~Т~оварно-транспортная информация.>

    `Центр ответственности`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // screen
HandleEvent
cmCheckField:
 {
   if CurField <> #KatSopr.srokRes
     Exit;

   if KatSopr.srokRes < KatSopr.dSopr
     {
       message('Дата окончания резервирования не должна быть меньше даты оформления накладной', error);
       set KatSopr.srokRes := KatSopr.dSopr;
       abort;
     }
 }
end;
end; // panel

HandleEvent
#include SOPRC13.VPP

cmDoRes:
  if OtkatToOldState(True, word(0)) = TRUE
    if ( Message('Произвести резервирование матценностей по накладной?', YesNo+Confirmation) = cmYes)
      MakeReserve(true);

cmSkipRes:
  if OtkatToOldState(True, word(0)) = TRUE
    if ( Message('Снять матценности с резерва?', YesNo+Confirmation) = cmYes)
      MakeReserve(false);

cmValue2:
  { //-- интерфейс с товарно-транспортной информацией
    SaveMyDsk(OtkatToOldState(false, word(0)), '_CanEditTTNDoc_');
    SetModified(true);
    Update_Record_KatSopr;
    RunInterface(TTNDoc, word(coKatSopr), KatSopr.NRec);
    RereadRecord(#KatSopr);//часть информации в KatSopr попадает из окна ТТИ
  }

cmOpenSearch:
  PutCommand(cmPick);

cmHotKeys:
  if katsopr.transp > 0
    PutHotCommand(RunMenu('mnuSoprMovSpSoprPutLst'));

cmSeePutLst:
  RunInterface(See_Put, KatSopr.NRec);

cmPick:
  {
    case CurField of
      #OrgVzr.name:     RunInterface(GetKatOr, KatSopr.cOrg,     comp(0), false, comp(0), comp(0));
      #KatOrgPlat.name: RunInterface(GetKatOr, KatSopr.cOrgPlat, comp(0), false, comp(0), comp(0));
    //--------------
      #KatOrgF.Name: RunInterface(GetKatOr, KatSopr.cGruzFrom, comp(0), FALSE, comp(0), comp(0));
    //--------------
      #KatOrgT.Name: RunInterface(GetKatOr, KatSopr.cGruzTo, comp(0), FALSE, comp(0), comp(0));
    //--------------
      #OtvPodr.Name:
        {
          var tmp_OtvPodr_2: comp;

          tmp_OtvPodr_2 := KatSopr.cOtvPodr;
          if RunInterface('GetCO', word(cgiPick), comp(0), comp(0), tmp_OtvPodr_2) <> cmCancel
            set KatSopr.cOtvPodr := tmp_OtvPodr_2;
        }
    //--------------
    end;

    Update_Current_KatSopr;
  }

end; // HandleEvent
end; // Window


//********************************************************************************

Procedure SetEditOption;
{
  case SpSopUsl.PrMC of
  //-------------------
    3:
      {
        SetFieldOption(#SpSopUsl.Kol, ofSelectable);
        if ( (CurField = #SpSopUsl.Price) OR (CurField = #SpSopUsl.VPrice))
          SelectField(#spSopUsl.Kol);

        ClearFieldOption(#spSopUsl.Price, ofSelectable);
        ClearFieldOption(#spSopUsl.VPrice, ofSelectable);
      }
  //-------------------
    4
  , 5
  , 6:
      {
        SetFieldOption(#spSopUsl.Price, ofSelectable);
        SetFieldOption(#spSopUsl.VPrice, ofSelectable);
        if ( CurField = #SpSopUsl.Kol)
          SelectField(if ( katSopr.cVal = 0, #SpSopUsl.Price, #spSopUsl.VPrice));

        ClearFieldOption(#SpSopUsl.Kol, ofSelectable);
      }
  //-------------------
  end;

  if boGetTune('Doc.NoEditCena')
    {
      ClearFieldOption(#KlVal.Simvolv, ofSelectable);
      ClearFieldOption(#SpSopUsl.Price, ofSelectable);
      ClearFieldOption(#SpSopUsl.VPrice, ofSelectable);
    }
}

//********************************************************************************

#doc
Редактирование сопутствующих услуг
#end
Window wSopUsl 'Редактирование сопутствующих услуг' EscClose;
  Show at (, 18, , 22);


//******************************************************************************

Panel pnSopUsl
  Table SpSopUsl;

Browse brSopUsl (, hcSklFTransNaklUsl, sci178Esc)

Fields
//------------------------------------------------------------------------------
  prSopusl           #3'П' ('Признак сопутствующей услуги', , sci1378Esc)
                    : [1], protect, NoPickButton, NoAutoSize;
//------------------------------------------------------------------------------
  KatUsl.Name        #3'Название услуги' ('Название сопутствующей услуги', , sci1378Esc)
                    : [26], protect;
//------------------------------------------------------------------------------
  KatUsl.Kod         #3'Код услуги' ('Код сопутствующей услуги', , sci1378Esc)
                    : [10], protect, NoAutoSize;
//------------------------------------------------------------------------------
  SpSopUsl.Kol       #3'Процент' ('Процент сопутствующей услуги')
                    : [12], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], NoAutoSize;
//------------------------------------------------------------------------------
  SpSopUsl.Price     #3'Сумма' ('Сумма сопутствующей услуги в НДЕ')
                    : [17], [brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], NoAutoSize;
//------------------------------------------------------------------------------
  SpSopUsl.VPrice    #3'Сумма в валюте' ('Сумма сопутствующей услуги в валюте')
                    : [17], [brForSopr_VPrice, '\2p[|-]36`666`666`666`666.88'], NoAutoSize;
//------------------------------------------------------------------------------
  KlVal.SimvolV      #3'Вал.'
                    : [4], skip, NoAutoSize;
//------------------------------------------------------------------------------
end;

//********************************************************************************

HandleEvent

cmSetDefault:
  PutCommand(cmPick);

cmSetCurField:
  {
    if not boGetTune('Pick.AutoPickinInterface')
      Exit;

    if ( (CurField = #KatUsl.Name) OR (CurField = #KatUsl.Kod))
      if ( SpSopUsl.cMCUsl = 0)
        PutCommand(cmPick);
  }

cmPositionChanged:
  SetEditOption;

cmPick:
  case CurField of
  //--------------
    #prSopUsl:
      {
        case RunMenu('TrSopUsl') of
        //-------------------------
          cmCancel:
            Exit;
        //-------------------------
          cmAllVo:
            set SpSopUsl.PrMC := 3;
        //-------------------------
          cmAllVos:
            set SpSopUsl.PrMC := 4;
        //-------------------------
          cmAllVosM:
            set SpSopUsl.PrMC := 5;
        //-------------------------
          cmAllVosV:
            set SpSopUsl.PrMC := 6;
        //-------------------------
        end;

        SetEditOption;
      }
  //--------------
    #KatUsl.Name
  , #KatUsl.Kod:
      {
        Delete Pick where ((word(12) == Pick.wlist));

        var PrNom: comp;  PrNom := SpSopUsl.PrMC;
        var mu: comp;     mu := if ( PrNom = 2, SpSopUsl.cMCUsl, -12345);

        if ( RunInterface(GetSomeUsl, mu) = cmCancel)
          Exit;

        if ( GetFirst Pick where ((word(12) == Pick.wList)) ordered by index Pick02 = tsOk)
          {
            if ( Not IsNew )
              oSDfuns.SpSopr_Delete (SpSopUsl.nRec);

            _LOOP Pick where ((word(12) == Pick.wList)) ordered by index pick02
              {
                ClearBuffer(#SpSopUsl);
                SpSopUsl.PrMC := PrNom;
                SpSopUsl.cSopr := KatSopr.NRec;
                if ( PrNom = 2)
                  {
                    SpSopUsl.Kol := Pick.PickKol;
                    SpSopUsl.KolFact := Pick.PickKol;
                    SpSopUsl.kolOpl := Pick.PickKol;
                  }

                SpSopUsl.VidSopr := KatSopr.VidSopr;
                SpSopUsl.dSopr := KatSopr.dSopr;
                SpSopUsl.dOprTTN := KatSopr.dOpr;
                SpSopUsl.cVal := KatSopr.cValut;
                SpSopUsl.cMCUsl := Pick.cRec;
                SpSopUsl.Npp := 0;//oSpNext.GetSpNppNext(KatSopr.NRec, coSpSopr);
                Insert current SpSopUsl;

                oLinkMTR2Spec.SetObjParam(word(coSpSopr), SpSopUsl.nRec, if(not OtkatToOldState(false, word(0)), 1, 0));
                oLinkMTR2Spec.SelFormat(true);

                //-- РАСЧЕТНАЯ УСЛУГА
                if ( KatUsl.TYPEUSL = 1) AND (SpSopUsl.PrMC <> 1)
                  {
                    if ( KatSopr.cVal = 0)
                      RunInterface('GETPAR2', 1, SpSopUsl.Nrec, KatUsl.Nrec, SpSopUsl.Price, SpSopUsl.Kol, word(coSpSopr))
                    else
                      RunInterface('GETPAR2', 1, SpSopUsl.Nrec, KatUsl.Nrec, SpSopUsl.VPrice, SpSopUsl.Kol, word(coSpSopr))

                    if ( update current spsopusl<>tsOK)
                      { }

                    SetNew(false); // для UpdateTable в CheckSumma
                  }

                CheckSumma(false);
              }

            if (SpSopUsl.PrMc = 3)
              SelectField(#SpSopUsl.Kol)
            else
              SelectField(if(KatSopr.cVal <> 0, #SpSopUsl.VPrice, #spSopUsl.Price));

            SetEditOption;
          }

        KatSopr.Summa := FSRoundRub(KatSopr.Summa);
        KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);
        if ( update current KatSopr = tsOk)
          { }

        RereadRecord(#SpSopUsl);
      }
  //--------------
  end;

cmCheckField:
  {
    case CurField of
    //--------------
      #SpSopusl.VPrice:
        {
          case wGetTune('Sklad.ValRubCalc') of
          //--------------------------------
           0:
              if ( spsopusl.Price <> 0)
                Exit;
          //--------------------------------
           2:
             if ( spsopusl.Price <> 0)
               if ( Message('Пересчитать цену в НДЕ по курсу на '
                           + string(KatSopr.dPrice)+'?', YesNo) <> cmYes)
                 Exit;
          //--------------------------------
          end;

          set SpSopusl.Price := SpSopusl.VPrice * GetCursPrice;
        }
    //--------------
      #SpSopusl.Price:
        if ( KatSopr.cValut <> 0)
          {
            case wGetTune('Sklad.ValRubCalc') of
            //--------------------------------
              0:
                if ( spsopusl.VPrice <> 0)
                  Exit;
            //--------------------------------
              2:
                if ( spsopusl.VPrice <> 0)
                  if ( Message('Пересчитать цену в валюте по курсу на '+
                              string(KatSopr.dPrice)+ '?', YesNo) <> cmYes)
                    Exit;
            //--------------------------------
            end;

            set SpSopusl.VPrice := (SpSopusl.Price / GetCursPrice);
          }
    //--------------
    end;

    CheckSumma(false);
    SpSopUsl.rPrice := SpSopUsl.price;
    SpSopUsl.rVPrice := SpSopUsl.vPrice;

    update current SpSopUsl;

    KatSopr.Summa := FSRoundRub(KatSopr.Summa);
    KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);

    if ( update current KatSopr = tsOk)
      { }
  }

cmSetDefault:
  {
    if not OtkatToOldState(true, word(0))
      {
        RereadRecord(CurTable);
        Stop;
        Exit;
      }

    ClearBuffer(#SpSopUsl);
    SpSopUsl.VidSopr := KatSopr.VidSopr;
    SpSopUsl.cSopr   := KatSopr.NRec;
    SpSopUsl.dSopr   := KatSopr.dSopr;
    SpSopUsl.dOprTTN := KatSopr.dOpr;
    SpSopUsl.cVal    := KatSopr.cValut;
    SpSopUsl.PrMC    := 3;
    SpSopUsl.nRec    := GetNextNRec(#SpSopUsl, 0);

    SetEditOption;
  }

cmInsertRecord:
  {
    SpSopUsl.Npp := 0;//oSpNext.GetSpNppNext(KatSopr.NRec, coSpSopr);
    Insert current SpSopUsl;
  }

cmUpdateRecord:
  Update current SpSopUsl;

cmDeleteRecord:
  {
    if not OtkatToOldState(true, word(0))
      Exit;

    if ( Message('Удалить сопутствующую услугу?', YesNo) <> cmYes)
      exit;

    Delete NoVisual SpDocNalSopUsl
                          where ((SpSopUsl.NRec == SpDocNalSopUsl.cSpDoc AND
                                  TypeSopr == SpDocNalSopUsl.Tipdoc));

    oSDfuns.SpSopr_Delete(SpSopUsl.nRec);

    CheckSumma(false);

    KatSopr.Summa := FSRoundRub(KatSopr.Summa);
    KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);

    if ( update current KatSopr = tsOk)
      { }

    SetEditOption;
  }

end;
end;//Panel

//********************************************************************************

HandleEvent
cmHotKeys:
  case CurField of
  //--------------
   #prSopUsl:
     {
       case RunMenu('TrSopUsl') of
       //-------------------------
         cmCancel:
           Exit;
       //-------------------------
         cmAllVo:
           set SpSopUsl.PrMC := 3;
       //-------------------------
         cmAllVos:
           set SpSopUsl.PrMC := 4;
       //-------------------------
         cmAllVosM:
           set SpSopUsl.PrMC := 5;
       //-------------------------
         cmAllVosV:
           set SpSopUsl.PrMC := 6;
       //-------------------------
       end;

       SetEditOption;
     }
  //--------------
   else
     PutHotCommand(RunMenu('mnuSoprUslMov'));
  //--------------
  end;

cmValue17:
  {
    if not OtkatToOldState(true, word(0))
      Exit;

    if ( KatUsl.TYPEUSL <> 1) OR (SpSopUsl.PrMC = 1)
      Message('Текущая услуга не является расчетной.', Information);
    else
      {
        if ( KatSopr.cVal = 0)
          RunInterface('GETPAR2', 1, SpSopUsl.Nrec, KatUsl.Nrec, SpSopUsl.Price, SpSopUsl.Kol, word(coSpSopr))
        else
          RunInterface('GETPAR2', 1, SpSopUsl.Nrec, KatUsl.Nrec, SpSopUsl.VPrice, SpSopUsl.Kol, word(coSpSopr));

        CheckSumma(false);

        KatSopr.Summa := FSRoundRub(KatSopr.Summa);
        KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);

        if ( update current KatSopr = tsOk)
          { }
      }
  }

cmValue20:
  if ( KatUsl.TYPEUSL <> 1) OR (SpSopUsl.PrMC = 1)
    Message('Текущая услуга не является расчетной.', Information);
  else
    oCalcFuns.RunCostUslRep(SpSopUsl.NRec, coSpSopr, 0)

end;
end; //Window

//********************************************************************************

#doc
Накладная на внутреннее перемещение /режим редактирования/
#end
Window EditSopr 'Накладная на внутреннее перемещение /режим редактирования/' EscClose;
  Show at (, , 110, 31);


//******************************************************************************

Panel pnHeader
  Show at (, , , 12)
  Table KatSopr;

//********************************************************************************

Screen scrHeaderUZBEK (, hcSklRedNaklOb, sci1Esc)
  Show at(, , , ) Fixed_Y;

Fields
//------------------------------------------------------------------------------
  KatSopr.DesGr       ('Код группы пользователей', , sci1378Esc)
                 : protect;
//------------------------------------------------------------------------------
  KatSopr.Descr       ('Дескриптор(идентификатор) пользователя', , sci1378Esc)
                 : protect;
//------------------------------------------------------------------------------
  KatSopr.NSopr       ('Номер накладной. Вводится путем набора', , sci178Esc);
//------------------------------------------------------------------------------
  KatSopr.dSopr       ('Дата выписки накладной. Вводится путем набора', , sci178Esc)
                 : [10, 'DD/MM/YYYY'];
//------------------------------------------------------------------------------
  KatSopr.dOpr        ('Дата проведения перемещения по накладной', , sci178Esc)
                 : [, 'DD/MM/YYYY'], Protect;
//------------------------------------------------------------------------------
  KatSopr.Name        ('Наименование накладной. Вводится путем набора.', , sci1378Esc);
//------------------------------------------------------------------------------
  TranzNakl           ('Номер накладной.Выбирается по <F3>', , sci1378Esc)
                 : protect;
//------------------------------------------------------------------------------
  KatOrg.Name         ('Организация-контрагент. Выбирается по <F3>', , sci1378Esc);
//------------------------------------------------------------------------------
  KatPodr.Name        ('Склад расхода. Выбирается по <F3>', , sci1378Esc)
                      {Font = {BackColor = if ( KatSopr.cPodrFrom = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  KatMol.Name         ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  ToPodr.Name         ('Склад прихода. Выбирается по <F3>', , sci1378Esc);
//------------------------------------------------------------------------------
  ToMol.Name          ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  KatSopr.TypeDoc     ('Тип документа', , sci1378Esc)
                 : [LIST ' На маршрут ', ' Повагонная '], protect;
//------------------------------------------------------------------------------
  MoveCellUzbek.Name  ('Единица подвижного состава', , sci1378Esc)
                 : protect;
//------------------------------------------------------------------------------
  KatSopr.NVagon      ('Номер единицы подвижного состава', , sci1378Esc)
                 : noprotect;
//------------------------------------------------------------------------------
  KatNazna_Name ('Назначение', , sci1378Esc)
                 : protect;
//------------------------------------------------------------------------------
  _StrStatus     : skip;
//------------------------------------------------------------------------------
  KatNotes.Name       ('Статус документа', , sci1378EnEsc)
                 : protect;
//------------------------------------------------------------------------------
  Sum                 ('Сумма', ,sci178Esc)
                 : [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'],  skip;
//------------------------------------------------------------------------------
  Valut               ('Валюта, в которой производилась оплата. Выбирается из классификатора.', , sci1378Esc)
                 : protect;
//------------------------------------------------------------------------------
  myField1       : skip;
//------------------------------------------------------------------------------
  HozOperViewName ('Типовая хозяйственная операция.', , sci1378Esc)
                 : protect;
//------------------------------------------------------------------------------
  sDEISumLabel   ('') : Skip;
  fOsnKol        (''): [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect;
  sDEI1Name      ('') : Skip;
  fDEI1Kol       (''): [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect;
  sDEI2Name      ('') : Skip;
  fDEI2Kol       (''): [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect;

Buttons
  cmSopUslEdit, , , 'Редактирование сопутствующих услуг', hcSklFTransNaklUsl, sci178Esc;
  cmMakeOrder , , , 'Формирование ордеров', hcSoprInMovBMakeOrd, sci178Esc;
  cmAttrib    , , , 'Вызов окна с расширенной информацией', hcSoprInMovBExtInfo, sci178Esc;
<<
 Группа & Дескр. &Номер      &Выписана   &Проведена  & Примечание                   & Накладная №
 .@@@@@ &.@@@@@@ &.@@@@@@@@@ &.@@@@@@@@@ &.@@@@@@@@@ &.@@@@@@@@@@@@@@@@@@@@@@@@@@@@ &.@@@@@@@@@@@@
 Поставщик:   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Откуда `Склад`.@@@@@@@@@@@@@@@@@@@@@@@@@@`МОЛ`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.         Услуги       .>
 Куда   `Склад`.@@@@@@@@@@@@@@@@@@@@@@@@@@`МОЛ`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Тип документа`.@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <. Формирование ордеров .>
`Назначение`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@
`На сумму`     .@@@@@@@@@@@@@.@@@@@                                            <.Расширенная информация.>
 .@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@  .@@@@@@@@@@ .@@@@@@.@@@@@@@@@@ .@@@@@@.@@@@@@@@@@
>>
end; // Screen

//********************************************************************************

Screen scrHeader (, hcSklRedNaklOb, sci1Esc)
  Show at(, , , ) Fixed_Y;
  bevel bb {1, 2, 82, 6, bsLowered, bsFrame};

Fields
//------------------------------------------------------------------------------
  _StrStatus    : skip;
//------------------------------------------------------------------------------
  KatSopr.DesGr      ('Код группы пользователей', , sci1378Esc): protect;
//------------------------------------------------------------------------------
  KatSopr.Descr      ('Дескриптор(идентификатор) пользователя', , sci1378Esc): protect;
//------------------------------------------------------------------------------
  KatSopr.NSopr      ('Номер накладной. Вводится путем набора', , sci178Esc);
//------------------------------------------------------------------------------
  KatSopr.dSopr      ('Дата выписки накладной. Вводится путем набора', , sci178Esc): ['DD/MM/YYYY'];
//------------------------------------------------------------------------------
  KatSopr.Name       ('Примечание к накладной. Вводится путем набора.', , sci1378Esc);
//------------------------------------------------------------------------------
  KatNotes.Name      ('Статус документа', , sci1378EnEsc): protect;
//------------------------------------------------------------------------------
  'Дата ордеров: ' + if( longint(KatSopr.dOpr) <> 0 , DateToStr(KatSopr.dOpr, 'DD/MM/YYYY'), 'Нет')  : , skip, Protect, Centered;
//------------------------------------------------------------------------------
  'ОТКУДА: '     : skip, {font = {bold = TRUE; color = ColorSysGREEN}};
//------------------------------------------------------------------------------
  KatPodr.Name       ('Склад расхода. Выбирается по <F3>', , sci1378Esc) {Font = {BackColor = if ( KatSopr.cPodrFrom = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  KatMol.Name        ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  'КУДА: '       : skip, {font = {bold = TRUE; color = ColorSysBLUE}};
//------------------------------------------------------------------------------
  ToPodr.Name        ('Склад прихода. Выбирается по <F3>', , sci1378Esc);
//------------------------------------------------------------------------------
  ToMol.Name         ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  'На сумму'    : skip, {font = {color = ColorSysBlack}};
//------------------------------------------------------------------------------
  Sum                 ('Сумма', ,sci178Esc)
                : [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], protect; // , [brForSopr_RVPrice]
//------------------------------------------------------------------------------
  Valut              ('Валюта оплаты', , sci1378Esc): protect;
//------------------------------------------------------------------------------
  KatNazna_Name ('Назначение', , sci1378Esc)
                : protect;
//------------------------------------------------------------------------------
#ifdef _MOVENAKL_
  'Налоги'      : skip, {font = {color = ColorSysBlack}};
//------------------------------------------------------------------------------
 KatSopr.sNalogs: [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], protect; // , [brForSopr_RVPrice]
//------------------------------------------------------------------------------
  ''+Valut      : skip;
//------------------------------------------------------------------------------
  VhNal              ('Входимость налогов в цену позиций', , sci1378Esc): protect;
#else
  '': skip;  '': skip;  '': skip;  '': skip; // чтобы не двигалось окно, выводим пустые skip-поля
#end
//------------------------------------------------------------------------------
  KatSopr.TypeDoc    ('Тип транспортировки по документу', , sci1378Esc): [LIST 'На маршрут', 'Повагонная'], protect;
//------------------------------------------------------------------------------
  MoveCellUzbek.Name ('Единица подвижного состава', , sci1378Esc): protect;
//------------------------------------------------------------------------------
  KatSopr.NVagon     ('Номер единицы подвижного состава', , sci1378Esc): noprotect;
//------------------------------------------------------------------------------
  myField1      : skip;
//------------------------------------------------------------------------------
  HozOperViewName ('Типовая хозяйственная операция.', , sci1378Esc): protect;
//------------------------------------------------------------------------------
  sDEISumLabel   ('') : Skip;
  fOsnKol        (''): [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect;
  sDEI1Name      ('') : Skip;
  fDEI1Kol       (''): [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect;
  sDEI2Name      ('') : Skip;
  fDEI2Kol       (''): [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect;

Buttons
  cmMakeOrder, , , 'Формирование ордеров', hcSoprInMovBMakeOrd, sci178Esc;
  cmValue20, , , , , sci178Esc;
  cmAttrib   , , , 'Вызов окна с расширенной информацией', hcSoprInMovBExtInfo, sci178Esc;
<<
  `Группа`&`Дескр.`& `Номер`   &`Выписана`  &`Примечание`                          .@@@@@@@
   .@@@@@@&.@@@@@@ &.@@@@@@@@@ &.@@@@@@@@@@ &.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  .@@@@@@@@@@@@@
                                                                                  .@@@@@@@@@@@@@@@@@@@@@@@@@
  .@@@@@@@ `Склад`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `МОЛ`.@@@@@@@@@@@@@@@@@@@@@@@ <. Формирование ордеров .>
  .@@@@@@@ `Склад`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `МОЛ`.@@@@@@@@@@@@@@@@@@@@@@@
                                                                                  <.  Отмена формирования .>
  .@@@@@@@@@      .@@@@@@@@@@@@@ .@@@@@ `Назначение`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  .@@@@@@@@@      .@@@@@@@@@@@@@ .@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  <.Расширенная информация.>
 `Транспортировка`.@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@     .@@@@@@@@@@ .@@@@@@.@@@@@@@@@@ .@@@@@@.@@@@@@@@@@
>>
end; // Screen

//********************************************************************************

Screen scrHeaderOsn (, hcSklRedNaklOb, sci1Esc)
  Show at(, , , ) Fixed_Y;

Fields
//******************************************************************************
  KatSopr.DesGr ('Код группы пользователей', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  KatSopr.Descr ('Дескриптор(идентификатор) пользователя', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  KatSopr.NSopr ('Номер накладной. Вводится путем набора', , sci178Esc);
//------------------------------------------------------------------------------
  KatSopr.dSopr ('Дата выписки накладной. Вводится путем набора', , sci178Esc)
           : [10, 'DD/MM/YYYY'];
//------------------------------------------------------------------------------
  KatSopr.Name  ('Наименование накладной. Вводится путем набора.', , sci1378Esc);
//------------------------------------------------------------------------------
  if( longint(KatSopr.dOpr) <> 0 , DateToStr(KatSopr.dOpr, 'DD/MM/YYYY'), 'Нет')  : , skip, Protect, Centered;
//------------------------------------------------------------------------------
  KatPodr.Name  ('Подразделение расхода. Выбирается по <F3>', , sci1378Esc)
                {Font = {BackColor = if ( KatSopr.cPodrFrom = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  KatMol.Name   ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  ToPodr.Name   ('Подразделение прихода ОС. Выбирается по <F3>', , sci1378Esc);
//------------------------------------------------------------------------------
  ToMol.Name    ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  KatNazna_Name ('Назначение', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
    Sum           ('Сумма', ,sci178Esc)
           : [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'],  skip;
//------------------------------------------------------------------------------
  Valut         ('Валюта, в которой производилась оплата. Выбирается из классификатора.', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  myField1: skip;
//------------------------------------------------------------------------------
  HozOperViewName ('Типовая хозяйственная операция.', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------

Buttons
  cmMakeOrder, , , 'Формирование расходного ордера и карточки ОС', hcSoprInMovBToOS, sci178Esc;
  cmValue20  , , , 'Отмена перевода', , sci178Esc;
  cmAttrib   , , , 'Вызов окна с расширенной информацией', hcSoprInMovBExtInfo, sci178Esc;
<<
  Группа Дескр.  Номер      Выписан     Примечание                                    Дата проведения
 .@@@@@ .@@@@@@ .@@@@@@@@@ .@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         .@@@@@@@@@@
 Откуда `Склад`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.Перевод в основные средства.>
        `МОЛ`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Куда   `Подр.`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.      Отмена перевода      .>
        `МОЛ`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Назначение`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.   Расширенная информация  .>
`На сумму`     .@@@@@@@@@@@@@@.@@@@@
 .@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

//********************************************************************************

Screen scrHeaderNMA (, hcSklRedNaklOb, sci1Esc)
  Show at(, , , ) Fixed_Y;

Fields
//------------------------------------------------------------------------------
  KatSopr.DesGr ('Код группы пользователей', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  KatSopr.Descr ('Дескриптор(идентификатор) пользователя', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  KatSopr.NSopr ('Номер накладной. Вводится путем набора', , sci178Esc);
//------------------------------------------------------------------------------
  KatSopr.dSopr ('Дата выписки накладной. Вводится путем набора', , sci178Esc)
           : [10, 'DD/MM/YYYY'];
//------------------------------------------------------------------------------
  KatSopr.Name  ('Наименование накладной. Вводится путем набора.', , sci1378Esc);
//------------------------------------------------------------------------------
  if( longint(KatSopr.dOpr) <> 0 , DateToStr(KatSopr.dOpr, 'DD/MM/YYYY'), 'Нет')  : , skip, Protect, Centered;
//------------------------------------------------------------------------------
  KatPodr.Name  ('Подразделение расхода. Выбирается по <F3>', , sci1378Esc)
                {Font = {BackColor = if ( KatSopr.cPodrFrom = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  KatMol.Name   ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  ToPodr.Name   ('Подразделение прихода ОС. Выбирается по <F3>', , sci1378Esc);
//------------------------------------------------------------------------------
  ToMol.Name    ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  KatNazna_Name ('Назначение', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  Sum           ('Сумма', ,sci178Esc)
           : [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'],  skip;
//------------------------------------------------------------------------------
  Valut         ('Валюта, в которой производилась оплата. Выбирается из классификатора.', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  myField1: skip;
//------------------------------------------------------------------------------
  HozOperViewName ('Типовая хозяйственная операция.', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------

Buttons
cmMakeOrder, , , 'Формирование расходного ордера и карточки НМА', hcSoprInMovBToNMA, sci178Esc;
 //cmPrintDoc, , , 'Печать накладной на внутреннее перемещение', hcSoprInMovBPrintDoc, sci178Esc;
cmValue20, , , 'Отмена перевода', , sci178Esc;
cmAttrib, , , 'Вызов окна с расширенной информацией', hcSoprInMovBExtInfo, sci178Esc;
<<
  Группа Дескр.  Номер      Выписан      Примечание                                    Дата проведения
 .@@@@@ .@@@@@@ .@@@@@@@@@ .@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          .@@@@@@@@@@
 Откуда `Склад`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   <.    Перевод в НМА     .>
        `МОЛ`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Куда   `Подр.`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   <.    Отмена перевода   .>
        `МОЛ`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Назначение`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   <.Расширенная информация.>
`На сумму`     .@@@@@@@@@@@@@@.@@@@@
 .@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

//********************************************************************************

Screen scrHeaderMBP (, hcSklRedNaklOb, sci1Esc)
  Show at(, , , ) Fixed_Y;

Fields
//------------------------------------------------------------------------------
  KatSopr.DesGr ('Код группы пользователей', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  KatSopr.Descr ('Дескриптор(идентификатор) пользователя', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  Katsopr.NSopr ('Номер накладной. Вводится путем набора', , sci178Esc);
//------------------------------------------------------------------------------
  KatSopr.dSopr ('Дата выписки накладной. Вводится путем набора', , sci178Esc)
           : [10, 'DD/MM/YYYY'];
//------------------------------------------------------------------------------
  KatSopr.Name  ('Наименование накладной. Вводится путем набора.', , sci1378Esc);
//------------------------------------------------------------------------------
  if( longint(KatSopr.dOpr) <> 0 , DateToStr(KatSopr.dOpr, 'DD/MM/YYYY'), 'Нет')  : , skip, Protect, Centered;
//------------------------------------------------------------------------------
  KatPodr.Name  ('Склад расхода. Выбирается по <F3>', , sci1378Esc)
                {Font = {BackColor = if ( KatSopr.cPodrFrom = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  KatMol.Name   ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  ToPodr.Name   ('Подразделение прихода МБП. Выбирается по <F3>', , sci1378Esc);
//------------------------------------------------------------------------------
  ToMol.Name    ('Фамилия И.О. материально-ответственного лица.', , sci1378Esc);
//------------------------------------------------------------------------------
  KatNazna_Name ('Назначение', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
   Sum           ('Сумма', ,sci178Esc)
           : [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], skip;
//------------------------------------------------------------------------------
  Valut         ('Валюта, в которой производилась оплата. Выбирается из классификатора.', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------
  myField1: skip;
//------------------------------------------------------------------------------
  HozOperViewName ('Типовая хозяйственная операция.', , sci1378Esc)
           : protect;
//------------------------------------------------------------------------------

Buttons
  cmMakeOrder, , , 'Формирование расходного ордера и карточки МБП', hcSkladBInMovToMBP, sci178Esc;
 //cmPrintDoc, , , 'Печать накладной на внутреннее перемещение', hcSoprInMovBPrintDoc, sci178Esc;
  cmValue20, , , 'Отмена перевода', , sci178Esc;
  cmAttrib, , , 'Вызов окна с расширенной информацией', hcSoprInMovBExtInfo, sci178Esc;
<<
  Группа Дескр.  Номер       Выписан     Примечание                                     Дата проведения
 .@@@@@ .@@@@@@ .@@@@@@@@@@ .@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           .@@@@@@@@@@
 Откуда `Склад`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    <.Перевод МЦ в малоценку.>
        `МОЛ`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Куда   `Подр.`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    <.    Отмена перевода   .>
        `МОЛ`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Назначение`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    <.Расширенная информация.>
`На сумму`     .@@@@@@@@@@@@@@.@@@@@
 .@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
end; // Screen

//********************************************************************************

HandleEvent

#include SOPRC13.VPP
#include inpsopr.vpp

cmDeleteRecord: //102.60738 Уберите лишнее предупреждение - при cmDeleteRecord
  stop;

cmCheckRecord:
  {
    if ( KatSopr.VidSopr <> 606) OR (KatSopr.nRec = 0)
      RecalcSumm(true);
    else
      {
        if ( update current KatSopr = tsOk)
          { }

        CheckSumma(false);
        KatSopr.Summa := FSRoundRub(KatSopr.Summa);
        KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);
        if ( update current KatSopr = tsOk)
          { }
      }

    oSDfuns.UpdateSoprHoz(KatSopr.Buffer);
    if ( RazrezChanged)
      {
        RazrezChanged := FALSE;
        if IsValid(tnSpSopr)
        Message('Разрез списания был изменен, '#13+
                'необходимо пересчитать цены <Alt><D>', CancelButton+Information);
      }
  }

cmPick:
  {
    if (CurWindow = -1)
      Exit;

    case CurField of
    //--------------
      #KatNotes.Name:
        {
          var tmpStatus, oldStatus_: word;
          var tmpNote: comp;
          var tmpTypeSopr: word;

          oldStatus_ := KatSopr.Status;
          tmpStatus := KatSopr.Status;
          tmpNote := KatSopr.cNote;
          tmpTypeSopr := TypeSopr;

          RunInterface('StatLog',
                       word(1024+1),
                       KatSopr.NRec,
                       tmpTypeSopr,
                       tmpStatus,
                       KatSopr.cNote,
                       0);
          set KatSopr.Status := tmpStatus;
          set KatSopr.cNote := KatSopr.cNote;

          Update_Current_KatSopr;
          if KatSopr.Status = 1 AND oldStatus_ = 0
          {
            if KatSopr.reserved = 0 AND KatSopr.dOpr = Date(0, 0, 0)
              if Message('Произвести резервирование матценностей по накладной?', YesNo) = cmYes
                MakeReserve(true);
          }
        }
    //--------------
      #KatSopr.TypeDoc:
        if not CanModifyLstSortNakl
          Abort;
    //--------------
      #KatSopr.Name:
        {
          RunInterface('GetBDName', TypeSopr, KatSopr.Name);
          SetModified(true);
          Update_Record_KatSopr;
        }
    //--------------
      #KatOrg.Name:
        if ( TypeSopr = 606)
          if (RunInterface(GetKatOr, KatSopr.cOrgBase, comp(0), FALSE, comp(0), comp(0)) <> cmCancel )
           if (wGetTune('Doc.AvtoCEC') = 1)
             cEC.CopyExClass4Table(coKatOrg, KatOrg.NRec, coKatSopr, KatSopr.NRec);
    //--------------
      #TranzNakl:
        if ( TypeSopr = 606)
        {
          if update current KatSopr = tsOk
            { }

          SaveMyDsk('scrfiltr2', 'UZBEKwinFiltr'); //чтобы включить доп.возможности фильтра
          if ( RunInterface(Spis_PrihNakl, KatSopr.cOrgBase, KatSopr.cKatSopr, longint(0), FALSE) = cmCancel)
            {
              SaveMyDsk('', 'UZBEKwinFiltr');//чтобы выключить
              Exit;
            }

          SaveMyDsk('', 'UZBEKwinFiltr');

          if ( GetFirst  KatSopr2  where ((KatSopr.cKatSopr == KatSopr2.Nrec )) = tsOk)
            if KatSopr2.dOpr = Date(0, 0, 0)
              {
                Message('В выбранной накладной МЦ не оприходованы');
                RereadRecord(#KatSopr);
                Exit;
              }

          if ( IsValid(#SpSopr))
            if ( Message('Заменить МЦ в документе?', YesNo+Confirmation) <> cmYes)
              Exit;

          KatSopr.cVal := KatSopr2.cVal;
          if update current katsopr = tsOk
            { }

          if longint(KatSopr.dOpr) <> 0
            DeleteOrders(true);

          DeleteAllSpSopr;

          //перенос информации о грузоотправителе и грузополучателе
          KatSopr.cGruzFrom :=  KatSopr2.cGruzFrom;
          KatSopr.cGruzTO :=  KatSopr2.cGruzTO;

          ADDSPNakl;//заполнение спецификации

          KatSopr.Summa := FSRoundRub(KatSopr.Summa);
          KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);
          if ( update current KatSopr = tsOk)
            { }

          RereadRecord(#SpSopr);
          RereadRecord(#KatSopr);//надо перерисовать экран

          if GetFirst SpSopr where (( KatSopr.NRec == SpSopr.cSopr ))<>tsOk
            case CheckNastr of
              0: ShowSpravka(SpravkaUzbek);
              1: ShowSpravka(SpravkaUzbekDiffParty);
            end;

          ON_OFF_TYPE(true);

          RereadRecord(#KatSopr);
          RereadRecord(#spsopr);
        }
    //--------------
      #MoveCellUzbek.Name:
        if RunInterface('GetMoveCellMC', KatSopr.cCellVal) <> cmCancel
          {
            set KatSopr.cCellVal := KatSopr.cCellVal;

            if Vagon.cMoveCell <> KatSopr.cCellVal
              {
                set KatSopr.cNMoveCell := 0;
                set KatSopr.nVagon := '';
                set KatSopr.cTransp := 0;
              }

            EditSpSoprUzbek(word(2))
          }
    //--------------
      #KatSopr.nVagon:
        if ( TypeSopr = 600) OR (TypeSopr = 606)
          {
            var cEdRec: comp;

            if IsValid(#MoveCellUzbek)
              cEdRec := MoveCellUzbek.nRec
            else
              cEdRec := 0;

            if RunInterface('GetVagon', 3, KatSopr.cNMoveCell, comp(0), cEdRec,
                            comp(0)) <> cmCancel
            {
              set KatSopr.cNMoveCell := KatSopr.cNMoveCell;
              set KatSopr.nVagon := Vagon.Num;
              set KatSopr.cCellVal := Vagon.cMoveCell;
              set KatSopr.cTransp := Vagon.cTransp;
              EditSpSoprUzbek(word(2))
            }
          }
    //--------------
      #KatSopr.Descr:
        RunInterface(GetDescr, KatSopr.Descr, KatSopr.DesGr, word(0));
    //--------------
      #KatSopr.DesGr:
        RunInterface(GetGrDescr, KatSopr.DesGr, FALSE, FALSE, comp(0));
    //--------------
      #KatPodr.Name:
        if ( KatSopr.Reserved = 1)
          {
            MessageMCreserved;
            Abort;
            Exit;
          }
        else
          {
            PushPos(#SpSopr);

            _LOOP SpSopr where ((KatSopr.nRec == SpSopr.cSopr))
              if ( GetFirst InBoxP where ((SpSopr.nRec == InBoxP.cSpSopr)) = tsOk)
                {
                  Message('Выполнение невозможно.'#13 +
                          'Сначала удалите план перемещения МЦ.', CancelButton);
                  PopPos(#SpSopr);
                  Abort;
                  Exit;
                }

            PopPos(#SpSopr);
            pNrec := KatSopr.cPodrFrom;
            if (RunInterface(GetAnyPodr, KatSopr.cPodrFrom, 0) = cmCancel)
              exit;

          #ifdef _MOVENAKL_
            if ( KatPodr.UchPrc <> 0)
              KatSopr.VhodNal := KatPodr.UchPrc
            else
              KatSopr.VhodNal := wGetTune('Oper.FormUch');
          #end

            if boGetTune('Pick.SkladWithMol')
              {
                var Lmol: comp;
                Lmol := getMOL2Sklad(KatSopr.cPodrFrom);
                set KatSopr.cMolFrom := Lmol;
              }
            else
              if ( KatSopr.cMolFrom = 0)
                set KatSopr.cMolFrom := getMOL2Sklad(KatSopr.cPodrFrom);

            if ( (pNrec <> KatSopr.cPodrFrom) AND
                  ((wGetTune('Oper.Razrez') = 1) OR ((wGetTune('Oper.Razrez') AND 2)<>0)))
              {
                if boGetTune('Doc.AvtoCalcSrCena')
                  {
                     RazrezChanged := FALSE;
                     CalcSrPrice;

                     Update_Current_KatSopr;
                  }
                else
                  RazrezChanged := TRUE;
              }

            if ( KatSopr.cMolFrom = 0) AND boGetTune('Pick.AvtoMol')
              {
                SelectField(#KatMol.Name);
                PutCommand(cmPick);
              }
          }
    //--------------
      #ToPodr.Name:
        {
          PushPos(#SpSopr);

          _LOOP SpSopr where ((KatSopr.nRec == SpSopr.cSopr))
            if ( GetFirst InBoxP where ((SpSopr.nRec == InBoxP.cSpSopr)) = tsOk)
              {
                Message('Выполнение невозможно.'#13'Сначала удалите план перемещения МЦ.', CancelButton);
                PopPos(#SpSopr);
                Abort;
                Exit;
              }

          PopPos(#SpSopr);

          case TypeSopr of
          //----
            600,
            606: if (RunInterface(GetAnyPodr, KatSopr.cPodrTo, 0) = cmCancel)
                   exit ;
          //----
            603: {if (RunInterface(GetAnyPodr, KatSopr.cPodrTo, 2) = cmCancel)
                   exit;}
          //----
            else
                 if (RunInterface(GetAnyPodr, KatSopr.cPodrTo, 0) = cmCancel)
                   exit;
          //----
          end;

          set KatSopr.cPodrTo := KatSopr.cPodrTo;

          KatSopr.cOrg := ToPodr.cOrg;

          if boGetTune('Pick.SkladWithMol')
            {
              var Lmol: comp;
              Lmol := getMOL2Sklad(KatSopr.cPodrTo);
              set KatSopr.cMolTo := Lmol;
            }
          else
            if ( KatSopr.cMolTo = 0)
              set KatSopr.cMolTo := getMOL2Sklad(KatSopr.cPodrTo);

          if ( KatSopr.cMolTo = 0) AND boGetTune('Pick.AvtoMol')
            {
              SelectField(#ToMol.Name);
              PutCommand(cmPick);
            }
        }
    //--------------
      #KatMol.Name:
        {
          if ( KatSopr.Reserved = 1)
            {
              MessageMCreserved;
              Abort;
              Exit;
            }

          pNrec := KatSopr.cMolFrom;

          if RunInterface(GetMol, KatSopr.cMolFrom, KatSopr.cPodrFrom) = cmCancel
            exit;

          // ПИР 102.68316
          if KatSopr.cPodrFrom <> 0 AND KatSopr.cPodrFrom <> KatMOL.cSkl
            {
              case wGetTune('SKLAD.RESKLMOL') of
                0 : {} // не заменять значение
                1 : {
                      set KatSopr.cPodrFrom := KatMOL.cSkl;
                      Update_Current_KatSopr;
                    }
                2 : // выдать предупреждение
                    if ( Message('Склад расхода не равен складу МОЛ. Заменить значение?', YesNo+Confirmation) = cmYes)
                      {
                        set KatSopr.cPodrFrom := KatMOL.cSkl;
                  Update_Current_KatSopr;
                      }
              end;
            }
          else
            {
              set KatSopr.cPodrFrom := KatMOL.cSkl;
              Update_Current_KatSopr;
            }

          if ( (pNRec <> KatSopr.cMolFrom) AND
              ((wGetTune('Oper.Razrez') = 1) OR ((wGetTune('Oper.Razrez') AND 4)<>0)))
            if boGetTune('Doc.AvtoCalcSrCena')
              {
                RazrezChanged := FALSE;
                CalcSrPrice;

                Update_Current_KatSopr;
              }
            else
              RazrezChanged := TRUE;
        }
    //--------------
      #ToMol.Name:
        {
        if RunInterface(GetMol, KatSopr.cMolTo, KatSopr.cPodrTo) = cmCancel
          exit;
          // ПИР 102.68316
          if KatSopr.cPodrTo <> 0 AND KatSopr.cPodrTo <> ToMOL.cSkl
            {
              case wGetTune('SKLAD.RESKLMOL') of
                0 : {} // не заменять значение
                1 : {
                      set KatSopr.cPodrTo := ToMOL.cSkl;
                      Update_Current_KatSopr;
                    }
                2 : // выдать предупреждение
                  if ( Message('Склад прихода не равен складу МОЛ. Заменить значение?', YesNo+Confirmation) = cmYes)
                    {
                      set KatSopr.cPodrTo := ToMOL.cSkl;
                  Update_Current_KatSopr;
                    }
              end;
            }
          else
            {
              set KatSopr.cPodrTo := ToMOL.cSkl;
              Update_Current_KatSopr;
            }
        }
    //--------------
      #Persons.FIO:
        RunInterface(GetPers, KatSopr.cPerson);
    //--------------
      #Trp:
        {
          set KatSopr.Transp := if ( KatSopr.Transp = 0, 1, 0);
          WrInPut(word(0))
        }
    //--------------
    end; // case
  }

cmSetCurField:
{
  if not boGetTune('Pick.AutoPickinInterface')
    exit;

  if ( CurWindow = EditSopr)
    case Target of
    //------------
      #KatPodr.Name:
        if ( KatSopr.cPodrFrom = 0)
          PutCommand(cmPick);
    //------------
      #ToPodr.Name:
        if ( KatSopr.cPodrTo = 0)
          PutCommand(cmPick);
    //------------
    end;
}

cmDelOnProtect:
  if ( CurWindow = EditSopr)
  case CurField of
    //------------
      #KatPodr.Name:
        set KatSopr.cPodrFrom:= 0;
    //------------
      #ToPodr.Name:
        set KatSopr.cPodrTo:= 0;
    //------------
      #ToMOL.Name:
        set KatSopr.cMOLTo:= 0;
    //------------
      #KatMol.Name:
      if ( KatSopr.cMolFrom <> 0)
        {
          if ( KatSopr.Reserved = 1)
            {
              MessageMCreserved;
              Abort;
              Exit;
            }

          set KatSopr.cMolFrom := 0;
          if ( (wGetTune('Oper.Razrez') = 1) OR ((wGetTune('Oper.Razrez') AND 4)<>0) )
            {
              if boGetTune('Doc.AvtoCalcSrCena')
                {
                  RazrezChanged := FALSE;
                  CalcSrPrice;

                  Update_Current_KatSopr;
                }
              else
                RazrezChanged := TRUE;
            }
        }
    //------------
    #KatSopr.dOpr:
      if OtkatOrders(true, TRUE)
        {
          if (wGetTune('Sklad.Akt_Move.IsDelOrder') <> 0)
            if (GetFirst SklOrder where ((KatSopr.nRec == SklOrder.cSopr)) = tsOk)
            {
              Message('Удаление ордеров запрещено настройкой:'#13 +
                      GetTuneName('Sklad.Akt_Move.IsDelOrder'));

              ReReadRecord(#KatSopr);

              Exit;
            }

          set KatSopr.dOpr := Date(0, 0, 0);

          Update_Current_KatSopr;

          RereadRecord;
        }
      else
        Abort;
    //------------
end; // case

cmCheckField:
{
  case CurField of
  //--------------
    #Katsopr.nVagon:
      if ( TypeSopr = 600 OR TypeSopr = 606)
        set Katsopr.cTransp := 0;
  //--------------
    #MoveCellUzbek:
      EditSpSoprUzbek(word(2));
  //--------------
    #KatSopr.TypeDoc:
     on_off_type(true);
  //--------------
    #KatSopr.dOpr:
      if ( Longint(KatSopr.dOpr) = 0)
      {
        if (wGetTune('Sklad.Akt_Move.IsDelOrder') <> 0)
          if (GetFirst SklOrder where ((KatSopr.nRec == SklOrder.cSopr)) = tsOk)
          {
            Message('Удаление ордеров запрещено настройкой:'#13 +
                    GetTuneName('Sklad.Akt_Move.IsDelOrder'));

            set KatSopr.dOpr := StrToDate(OldFieldValue, 'DD/MM/YYYY');

            Exit;
          }

        if ( not OtkatOrders(true, TRUE))
          set KatSopr.dOpr := StrToDate(OldFieldValue, 'DD/MM/YYYY');
      }
  //--------------
    #KatSopr.dSopr:
      CheckdSopr;
  //--------------
    #KatSopr.nSopr,
    #KatSopr.name:
      {
        SetModified(true);
        Update_Record_KatSopr;
      }
  //--------------
  end; // case CurField
}

cmPositionChanged:
  {
    if ( RazrezChanged)
      {
        RazrezChanged := FALSE;

        if GetFirst SpSopr = tsOk // если есть спецификация
          Message('Разрез списания был изменен, необходимо пересчитать цены <Alt><D>', CancelButton+Information);
      }

    if ( KatSopr.dOpr <> Date(0, 0, 0) )
      ClearFieldOption(#KatSopr.dOpr, ofProtected)
    else
      SetFieldOption(#KatSopr.dOpr, ofProtected);

    PosChange;
    ON_OFF_TYPE(false);
    SaveMyDsk(comp(0), '_KatSoprnRec_');
  }

cmSetDefault:
  SetFieldOption(#KatSopr.dOpr, ofProtected);

end; // HandleEvent
end; // Panel

//********************************************************************************

Panel pnSpecif
  Show at (, 13, , )
  Table SpSopr;

//********************************************************************************

Browse brSpecif1 ('<Ctrl><Enter> - расширенная информация', hcSklRedNaklOb, sci178Esc)

Fields
  {Font = {Color = if (pickSpSopr_regim and IsValid(#PickSpSopr), ColorMark, 0) }};
//------------------------------------------------------------------------------
  PickSpSoprMark #3'√'
                : [1], protect;
//------------------------------------------------------------------------------
  SpSopr.Npp     #3'№'
                : [3], skip, NoAutoSize;
//------------------------------------------------------------------------------
  KatMC.Name     #3'Наименование МЦ'    (, , sci1378Esc)
                : [27], protect;
//------------------------------------------------------------------------------
  BarKod         #3'Код'                (, , sci1378Esc)
                : [12], protect, NoAutoSize;
//------------------------------------------------------------------------------
  if(SpSopr.vPriceN<>0, '+', '')  #3'P' ('+ - позиция зарезервирована')
                : [1], protect, NoAutoSize;
//------------------------------------------------------------------------------
  Furn          #3'Ф'
                : [1], protect, NoAutoSize;
//------------------------------------------------------------------------------
  OtpEd          #3'ЕдИзм'              (, , sci1378Esc)
                : [5], protect, NoAutoSize;
//------------------------------------------------------------------------------
  SpSopr.KolFact #3'Количество'         ('Фактическое количество', )
                : [12], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], noprotect, NoAutoSize;
//------------------------------------------------------------------------------
  KatDopEd1.ShortName  #3'ДЕИ 1' ('', , sci178Esc) : [5], protect, NoAutoSize, NoPickButton;
  SpDopEd1.Kol         #3'Количество' ('')         : [12], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect, NoAutoSize, NoPickButton;
  KatDopEd2.ShortName  #3'ДЕИ 2' ('', , sci178Esc) : [5], protect, NoAutoSize, NoPickButton;
  SpDopEd2.Kol         #3'Количество' ('')         : [12], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect, NoAutoSize, NoPickButton;
//------------------------------------------------------------------------------
  Capacity       #3'Объем'              (, , sci1378Esc)
                : [12], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], noprotect, NoAutoSize;
//------------------------------------------------------------------------------
  CapacityPrice  #3'Цена для'#13#3'объемн.ЕдИзм' ('Цена для объемных единиц измерения')
                : [17], [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], noprotect, NoAutoSize;
//------------------------------------------------------------------------------
  PrV            #3'Цена'               (, )
                : [17], [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], NoAutoSize;
//------------------------------------------------------------------------------
  SumPrice       #3'Стоимость'          (, )
                : [17], [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], protect, NoAutoSize;
//------------------------------------------------------------------------------
  KatParty.Name  #3'Партия'             (, , sci1378Esc)
                : [15], protect, NoAutoSize;
//------------------------------------------------------------------------------
  SaldTune.Name   #3'Объект ЦУ' (,, sci1378Esc): [10], Protect, NoAutoSize, PickButton;
  vsKau1          #3'КАУ 1' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau2          #3'КАУ 2' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau3          #3'КАУ 3' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau4          #3'КАУ 4' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau5          #3'КАУ 5' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau6          #3'КАУ 6' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau7          #3'КАУ 7' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau8          #3'КАУ 8' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau9          #3'КАУ 9' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau10         #3'КАУ 10' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
//------------------------------------------------------------------------------
end; // Browse

//********************************************************************************

Browse brSpecif1UZBEK ('<Ctrl><Enter> - расширенная информация', hcSklRedNaklOb, sci178Esc);

Fields
//------------------------------------------------------------------------------
  SpSopr.Npp     #3'№'
                : [3], skip, NoAutoSize;
//------------------------------------------------------------------------------
  KatMC.Name     #3'Наименование МЦ'    (, , sci1378Esc)
                : [27], protect;
//------------------------------------------------------------------------------
  BarKod         #3'Код'                (, , sci1378Esc)
                : [12], protect, NoAutoSize;
//------------------------------------------------------------------------------
  if(SpSopr.vPriceN<>0, '+', '')  #3'P' ('+ - позиция зарезервирована')
                : [1], protect, NoAutoSize;
//------------------------------------------------------------------------------
  OtpEd          #3'ЕдИзм'              (, , sci1378Esc)
                : [5], protect, NoAutoSize;
//------------------------------------------------------------------------------
  SpSopr.KolFact #3'Количество'         ('Фактическое количество', )
                : [12], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], noprotect, NoAutoSize;
//------------------------------------------------------------------------------
  KatDopEd1.ShortName  #3'ДЕИ 1' ('', , sci178Esc) : [5], protect, NoAutoSize, NoPickButton;
  SpDopEd1.Kol         #3'Количество' ('')         : [12], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect, NoAutoSize, NoPickButton;
  KatDopEd2.ShortName  #3'ДЕИ 2' ('', , sci178Esc) : [5], protect, NoAutoSize, NoPickButton;
  SpDopEd2.Kol         #3'Количество' ('')         : [12], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], Protect, NoAutoSize, NoPickButton;
//------------------------------------------------------------------------------
  Capacity       #3'Объем'              (, , sci1378Esc)
                : [12], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], noprotect, NoAutoSize;
//------------------------------------------------------------------------------
  CapacityPrice  #3'Цена для'#13#3'объемн.ЕдИзм' ('Цена для объемных единиц измерения')
                : [17], [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], noprotect, NoAutoSize;
//------------------------------------------------------------------------------
  PrV            #3'Цена'               (, )
                : [17], [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], NoAutoSize;
//------------------------------------------------------------------------------
  SumPrice       #3'Стоимость'          (, )
                : [17], [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], protect, NoAutoSize;
//------------------------------------------------------------------------------
  KatParty.Name  #3'Партия'             (, , sci1378Esc)
                : [15], protect, NoAutoSize;
//------------------------------------------------------------------------------
  SaldTune.Name   #3'Объект ЦУ' (,, sci1378Esc): [10], Protect, NoAutoSize, PickButton;
  vsKau1          #3'КАУ 1' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau2          #3'КАУ 2' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau3          #3'КАУ 3' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau4          #3'КАУ 4' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau5          #3'КАУ 5' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau6          #3'КАУ 6' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau7          #3'КАУ 7' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau8          #3'КАУ 8' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau9          #3'КАУ 9' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau10         #3'КАУ 10' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
//------------------------------------------------------------------------------
end; // Browse

//********************************************************************************

#include uksModObj.vpp

//********************************************************************************

HandleEvent
#include SOPRC13.VPP
cmCheckSumma:
{
  CheckSumma(FALSE);
  Stop;
}

cmPick:
{
  if ( KatSopr.Reserved <> 1)
    case CurField of
    #SaldTune.Name
  , #vsKau1
  , #vsKau2
  , #vsKau3
  , #vsKau4
  , #vsKau5
  , #vsKau6
  , #vsKau7
  , #vsKau8
  , #vsKau9
  , #vsKau10 :
      {
        PutCommand(cmIerarchy);
      }
    end;
}

cmDelOnProtect:
  if ( KatSopr.Reserved <> 1)
    case CurField of
      #SaldTune.Name
    , #vsKau1
    , #vsKau2
    , #vsKau3
    , #vsKau4
    , #vsKau5
    , #vsKau6
    , #vsKau7
    , #vsKau8
    , #vsKau9
    , #vsKau10 :
        {
          PutCommand(cmIerarchy);
        }
    end;

cmExprFieldChanged:
  case CurField of
  //--------------
    #capacity:
      {
        if not CheckCapacity Exit;
        if  SpSopr.OilPlot<>0
        {
          set SpSopr.KolFact := (double(ExprFieldValue)*SpSopr.OilPlot)/KatOtpEd.Koef;

          // расчет грузовых мест
          ReCalcGrM;

          CheckSumma(false);
          Exit;
        }

        if KatSopr.cPodrFrom = 0
          if ( RunInterface(GetAnyPodr, KatSopr.cPodrFrom, 0) = cmCancel)
            Exit;

        RunInterface('GetCapacity',
                      word(0), word(0), KatSopr.cPodrFrom, SpSopr.cMcUsl, SpSopr.LastDate,
                      SpSopr.LastTime, SpSopr.OilTemper, SpSopr.OilPlot, FALSE,
                      word(coSpSopr), SpSopr.nRec );

        set SpSopr.KolFact := (double(ExprFieldValue)*SpSopr.OilPlot)/KatOtpEd.Koef;
        // расчет грузовых мест
        ReCalcGrM;

        CheckSumma(false);
      }
  //--------------
    #CapacityPrice:
      {
        if not CheckCapacity
          Exit;

        var d: double; d := double(ExprFieldValue)*(SpSopr.KolFact/SpSopr.OilPlot*KatOtpEd.Koef)/SpSopr.KolFact;

        if KatSopr.cVal = 0
          set SpSopr.rPrice  := d;
        else
          set Spsopr.rVPrice := d;

        if KatSopr.cVal = 0
          set SpSopr.Price   := d;
        else
          set Spsopr.VPrice  := d;
      }
  //--------------
  end;

//******************************************************************************
#include spsopr_e.vpp
//******************************************************************************

cmPick:
  case CurField of
  //--------------
    #SpSopr.nVagon:
      if ( TypeSopr = 600 OR TypeSopr = 606)
        if KatSopr.TypeDoc = 1  //повагонная накладная
          {
            Message('Номер вагона должен быть как в шапке документа: '+KatSopr.nVagon, CancelButton);
            set SpSopr.cTransp := KatSopr.cTransp;
            set SpSopr.nVagon := KatSopr.nVagon;
            update current SpSopr;
          }
        else
          if RunInterface('Get_AllTC', SpSopr.cCellVal, SpSopr.ctransp) <> cmCancel
            if GetFirst Transp where ((SpSopr.ctransp == Transp.nrec)) = tsOk
              {
                set  SpSopr.NVagon := Transp.Nomer;
                update current SpSopr;
              }
  //--------------
  end;

cmCheckField:
  if ( CurField = #SpSopr.KolFact)
    CheckNalich;

//***********************************************************
// Пересчет полей НЕТТО-ТАРА-БРУТТО в зависимости от настроек
#include soprttn2.vpp
//************************************************************

cmCheckField:
{
  case CurField of
  //--------------
    #SpSopr.rPrice
  , #SpSopr.rVPrice:
      rCheckPrice(CurField);
  //--------------
    #SpSopr.Kol
  , #SpSopr.ProcUb
  , #SpSopr.KolFact
  , #SpSopr.KolOpl:
      {
        if ( CurField = #SpSopr.KolFact) OR (CurField = #SpSopr.Kol)
          if ( GetFirst InBoxP where ((SpSopr.nRec == InBoxP.cSpSopr)) = tsOk)
            {
              Message('Выполнение невозможно.'#13'Сначала удалите план перемещения МЦ.', CancelButton);
              if ( CurField = #SpSopr.KolFact)
                set SpSopr.KolFact := double(OldFieldValue)
              else
                if ( CurField = #SpSopr.Kol)
                  set SpSopr.Kol := double(OldFieldValue);

              Exit;
            }

        CheckandMakeKOL;

        if (SpSopr.KolFact <> comp(0))
        {
          set SpSopr.Price := FRoundRubOrd(1, SpSopr.rPrice * SpSopr.KolFact) / SpSopr.KolFact;
          set SpSopr.VPrice := FRoundValOrd(1, SpSopr.rVPrice * SpSopr.KolFact) / SpSopr.KolFact;

        if wGetTune('Round.OrderPriceSum') = 1
          {
            set SpSopr.rPrice := FRoundRubOrd(1, SpSopr.rPrice);
            set SpSopr.rVPrice := FRoundValOrd(1, SpSopr.rVPrice);
            set SpSopr.price := SpSopr.rPrice;
            set SpSopr.vPrice := SpSopr.rVPrice;
          }
        }

        set SpSopr.Kol := SpSopr.KolFact;

        // расчет грузовых мест
        ReCalcGrM;

        if (GetFirst SpOtpEd where ((SpSopr.cOtpEd == SpOtpEd.cOtpEd)) = tsOk)
        {
          oSoprTara.UpdateSpSoprKolTara (SpSopr.cSopr, SpSopr.cOtpEd, SpSopr.NRec, SpSopr.KolFact, double(OldFieldValue));
          SetModified(TRUE);
          CheckSumma(TRUE);
        }
      }
  //--------------
    #SpSopr.nVagon:
      if ( TypeSopr = 600 OR TypeSopr = 606)
        {
          set SpSopr.cTransp := 0;
          if KatSopr.TypeDoc = 1  //повагонная накладная
            {
              Message('Номер вагона должен быть как в шапке документа: '+KatSopr.nVagon, CancelButton);
              set SpSopr.cTransp := KatSopr.cTransp;
              set SpSopr.nVagon := KatSopr.nVagon;
              update current SpSopr;
            }
        }
  //--------------
  end;

  ProcessCommand(cmCheckSumma);
}

//------------------------------------------------------------------------------

cmSetKol:
  if ( (wGetTune('Oper.Razrez') = 1) OR ((wGetTune('Oper.Razrez') AND 8)<>0) )
    if boGetTune('Doc.AvtoCalcSrCena')
      {
        RazrezChanged := FALSE;
        CalcSrPricePos;
        ProcessCommand(cmCheckSumma);
        Update_Current_KatSopr;
      }
    else
      RazrezChanged := TRUE;

//------------------------------------------------------------------------------

cmPick:
  if ( KatSopr.Reserved = 1)
    MessageMCreserved;
  else
    case CurField of
      #KatMC.Name,
      #KatMC.BarKod:
        {
          if ( GetFirst InBoxP where ((SpSopr.nRec == InBoxP.cSpSopr)) = tsOk)
          {
            Message('Выполнение невозможно.'#13'Сначала удалите план перемещения МЦ.', CancelButton);
            Abort;
            Exit;
          }
          Pick_F3_CtrlF3(cmPick);

          oLinkMTR2Spec.SetObjParam(word(coSpSopr), SpSopr.nRec, if(not OtkatToOldState(false, word(0)), 1, 0));
          oLinkMTR2Spec.SelFormat(IsValid(#SpSopr));
#ifdef _MOVENAKL_
          PutCommand(cmSaveDoc);
#end
        }

      #TTNMoveCell.Name:
        {
          var flag_end: boolean;  flag_end := TRUE;

          if KatSopr.cCellVal <> 0
            do
              {
                RunInterface( GetCellVal, SpSopr.cMCUSL, SpSopr.cCellVal
                                 , word(0), word(0)
                                );
                if GetFirst CellVal where ((  SpSopr.cCellVal == CellVal.cMoveCell )) <> tsOk
                  {
                    MessageUzbek;
                    continue;
                  }

                if CellVal.cMoveCell = KatSopr.cCellVal
                  flag_end := FALSE
                else
                  MessageUzbek;
              }
            While flag_end
          else
            RunInterface( GetCellVal, SpSopr.cMCUSL, SpSopr.cCellVal
                         , word(0), word(0)
                      );

          if ( TypeSopr = 600 OR TypeSopr = 606)
            set Spsopr.cTransp := 0;
        }

      #OtpEd:
        {
          if not isValid (#SpSopr)
            Exit;

          if (SpSopr.PrVoz = 0)
          {
            var old_cotped: comp; old_cotped := SpSopr.cOtpEd;
            var old_kol: double;  old_kol := SpSopr.KolFact;
            var bUpdate: boolean; bUpdate := false;

            ChangeOtpEd;
            fEdIzm.CheckKolDiskret(SpSopr.KolFact, SpSopr.cOtpEd, TRUE, TRUE);
            CheckSpSoprKol2(#SpSopr.KolFact);

            set SpSopr.Kol := SpSopr.KolFact;

            // расчет грузовых мест
            ReCalcGrM;

            if (old_cotped <> SpSopr.cOtpEd)
            {
              if (GetFirst SpOtpEd where ((old_cotped == SpOtpEd.cOtpEd)) = tsOk)
              {
                // удаление позиций со старой тарой
                oSoprTara.DeleteSpSoprTara (SpSopr.cSopr, old_cotped, SpSopr.NRec, old_kol);
                bUpdate := true;
              }

              if (GetFirst SpOtpEd where ((SpSopr.cOtpEd == SpOtpEd.cOtpEd)) = tsOk)
              {
                // вставка новой тары
                oSoprTara.InsertTara (SpSopr.cOtpEd, SpSopr.NRec, SpSopr.cSopr, SpSopr.kol, comp(0));
                bUpdate := true;
              }

              if ( bUpdate )
              {
                // пересчет номеров
                Update Current SpSopr;
                oSoprTara.ChangeNppSopr (SpSopr.cSopr);
                ReReadRecord(#SpSopr);
                // пересчет массы нетто и брутто
                pGetDocSpecInfo.GetDocSpecInfo(coKatSopr, KatSopr.NRec, KatSopr.Netto, KatSopr.mTara);
                CheckSumma(TRUE);
              }
            }

            if (NOT bUpDate)
              CheckSumma(FALSE);
          }
        }

     #SpSopr.Kolfact,
     #SpSopr.Kol:
       {
         if SpSopr.cMCUSL = 0 Exit;//102.25810

         var w_TipKol: word;
         var sTitle: string;
         var nKol: double;

         case CurField of
           #SpSopr.Kolfact:
             {
               w_TipKol := 1;
               sTitle := 'Ввод фактического количества';
               nKol := SpSopr.Kolfact;
             }
           #SpSopr.Kol:
             {
               w_TipKol := 2;
               sTitle := 'Ввод количества по документу-основанию'
               nKol := SpSopr.Kol;
             }
         end;
         RunInterface('KolDopEd',
                       word(coSpSopr), // coTable,  код таблицы спецификации
                       SpSopr.NRec,    // cRec,     ссылка на спецификацию
                       w_TipKol,       // wTipKol,  тип количества
                       sTitle,         // sTitle,   заголовок интерфейса по шаблону: "Ввод количества ..."
                       SpSopr.cMCUSL,  // cMCUsl,   NRec МЦ/услуги
                       SpSopr.PrMC,    // PrMC,     1- МЦ, 2 - услуга, 3 - группа МЦ, 4 - группа услуг
                       SpSopr.Price,   // Price,    цена за 1-у отпускную единицу
                       Cena_Pr,        // forPrice, кол-во знаков после запятой в цене
                       Cena_Pr,        // forSumma, кол-во знаков после запятой в стоимости
                       KatSopr.cValut,  // comp(0),        // cVal,     валюта переданной цены
                       SpSopr.cOtpEd,  // cOtpEd,   ссылка на отпускную единицу измерения
                       nKol,           // fKol      количество в отпускных единицах (возвращаемый параметр)
                       longint(0),
                       SpSopr.VidSopr
                     );
         case CurField of
           #SpSopr.Kolfact:
             {
               set SpSopr.Kolfact := nKol;
               wOldKolFactDEI := nKol;

             }
           #SpSopr.Kol:
             {
               set SpSopr.Kol := nKol;
               wOldKolDEI    := nKol;
             }
         end;
         ProcessCommand(cmCheckField);
       }

     #KatParty.Name:
       {
        if ( GetFirst InBoxP where ((SpSopr.nRec == InBoxP.cSpSopr)) = tsOk)
        {
          Message('Выполнение невозможно.'#13'Сначала удалите план перемещения МЦ.', CancelButton);
          Abort; Exit;
        }

        if oMSview.GetMethodSpisPodr(KatSopr.cPodrFrom) <> 3
          RunInterface(GetPar__,SpSopr.cParty,SpSopr.cMCUsl)
        else
          RunInterface(LF_GetParty, SpSopr.cParty, SpSopr.cMCUsl, KatSopr.cPodrFrom, KatSopr.cMOLFrom, KatSopr.dSopr);

        ProcessCommand(cmSetKol);
       }
     #KlVal.SimvolV:
       {
         ChangeSpSoprVal;
         if ( KatSopr.VidSopr = 606)
           {
             CheckSumma(false);
             KatSopr.Summa := FSRoundRub(KatSopr.Summa);
             KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);

             if ( update current KatSopr = tsOk)
               { }
           }
         else
           RecalcSumm(true);

         Update_Current_KatSopr;
       }

     #KatOtpEdGRM.Name:
      {
        var cRecOtpEdGrM: comp;
        cRecOtpEdGrM := if(SpSopr.cOtpEdGRM<>comp(0), SpSopr.cOtpEdGrM, -123456);
        if ( RunInterface(GetOtpEd, SpSopr.cMCUSL,
             cRecOtpEdGRM, SpSopr.prMC) <> cmCancel)
         {
          set SpSopr.cOtpEdGrM := cRecOtpEdGrM;
         }
      }

    #capacity:
     {
      if not CheckCapacity Exit;
      if KatSopr.cPodrFrom = 0
        if ( RunInterface(GetAnyPodr, KatSopr.cPodrFrom, 0) = cmCancel)
          Exit;

      RunInterface('GetCapacity',
                   word(0), word(0), KatSopr.cPodrFrom, SpSopr.cMcUsl, SpSopr.LastDate,
                   SpSopr.LastTime, SpSopr.OilTemper, SpSopr.OilPlot, FALSE
                  , word(coSpSopr), SpSopr.nRec
                  );
     };
   end; // case

//------------------------------------------------------------------------------

cmDelOnProtect:
  {
    if ( KatSopr.Reserved = 1)
       {
         MessageMCreserved;
         Abort;
         Exit;
       }

    if ( CurField = #KatParty.Name) OR(CurField = #KatMC.Name) OR(CurField = #KatMC.BarKod)
      if ( GetFirst InBoxP where ((SpSopr.nRec == InBoxP.cSpSopr)) = tsOk)
        {
          Message('Выполнение невозможно.'#13'Сначала удалите план перемещения МЦ.', CancelButton);
          Abort;
          Exit;
        }

    if (CurField = #KatParty.Name)
      {
        set SpSopr.cParty := 0;

        if ((wGetTune('Oper.Razrez') = 1) OR ((wGetTune('Oper.Razrez') AND 8)<>0))
          if not boGetTune('Doc.AvtoCalcSrCena')
            RazrezChanged := TRUE;
          else
            {
              RazrezChanged := FALSE;
              CalcSrPricePos;

              Update_Current_KatSopr;
            }
      }

    if(((CurField = #PrV) OR (CurField = #SpSopr.rPrice)) AND
       (oMSview.getTuneMSForPodr(KatSopr.cPodrFrom) = 1) )
    {
      set SpSopr.cSpOrder := 0;
      update current SpSopr;

      Update_Current_KatSopr;
    }

    if (CurField = #KatOtpEdGRM.Name)
      set SpSopr.cOtpEdGrM := comp(0);
  }

//------------------------------------------------------------------------------

cmDeleteRecord:
  if ( KatSopr.Reserved = 1)
    {
      Abort;
      MessageMCreserved;
    }
  else
    if ( Message('Удалить текущую позицию накладной?', YesNo+Confirmation) <> cmYes)
      Abort;
    else
      {
       //проверка возможности удаления позиции спецификации
       if TypeSopr = 603  //Склад -> Розница
        if GetFirst rzKutPrih where ((word(902)    == rzKutPrih.TypePrih AND
                                      KatSopr.nRec == rzKutPrih.cSopr    AND
                                      SpSopr.nRec  == rzKutPrih.cSpDoc)) = tsOk
         if GetFirst rzKutRash where ((rzKutPrih.nRec == rzKutRash.cRzPrih)) = tsOk
          {
           Message('Нельзя удалить текущую позицию, т.к. в модуле Розничная торговля'#13
                 + 'уже были сформированы расходы по КУТ.', Information);

           Abort;
           Exit;
          }
         else
          {
            // удаление инф. о движении серийных номеров
            if ( not oSerialMove.RemoveSpSoprLink(SpSopr.nRec) )
              {
                Message('В накладной введены серийные номера. Удалить позицию невозможно.');
                Abort;
                Exit;
              }

            // удаление входящего налога прихода
            if Delete NoVisual SpDocNal where ((rzKutPrih.NRec == SpDocNal.cSpDoc AND
                                                word(900) == SpDocNal.Tipdoc)) <> tsOk
              Message('Ошибка удаления записи из таблицы SpDocNal (900).', Error);

            // удаление исходящего налога прихода
            if Delete NoVisual SpDocNal where ((rzKutPrih.NRec == SpDocNal.cSpDoc AND
                                                word(920) == SpDocNal.Tipdoc)) <> tsOk
              Message('Ошибка  удаления записи из таблицы SpDocNal (920).', Error);

            if Delete_Prih <> tsOk
              Message('Ошибка при попытке удаления КУТ №'+ rzKutPrih.Nomer +
                      ' от ' + DateToStr(rzKutPrih.dDoc, 'DD/MM/YYYY'), Error);
          }

        var newspsopr: comp newspsopr := 0;

        PushPos(#SpSopr);

        if ( GetNext SpSopr = tsOk)
          newspsopr := SpSopr.nRec;
        else
          if ( GetPrev SpSopr = tsOk)
            newspsopr := SpSopr.nRec;

        PopPos(#SpSopr);

        var bRecaclSumm: boolean; // при удалении нескольних позиций запустить полный пересчет суммм
        bRecaclSumm := FALSE;

        // удаление позиции с тарой
        if (GetFirst SpOtpEd where ((SpSopr.cOtpEd == SpOtpEd.cOtpEd)) = tsOk)
        {
          oSoprTara.DeleteSpSoprTara (SpSopr.cSopr, SpSopr.cOtpEd, SpSopr.NRec, SpSopr.KolFact);
          bRecaclSumm := TRUE;
        }
        //удаляем фурнитуру в комплекте данной накладной
        if (GetFirst KatKod Where ((cgKatKod_FurnNakl == KatKod.wType
                                     and SpSopr.NRec  == KatKod.cGroup)) = tsOk)
          {
            iFurnInSet.DeleteFurnInSet(SpSopr.NRec, cgKatKod_FurnNakl);
          }
        // удаление позиции
        DoDeleteCurrentSpSopr;

        if ( newspsopr <> 0)
          if ( GetFirst SpSopr where ((newspsopr == SpSopr.nRec)) = tsOk)
            { }

        set KatSopr.Summa := KatSopr.Summa;
        RedrawPanel(#KatSopr);

        if (bRecaclSumm)
        {
          // пересчет номеров
          oSoprTara.ChangeNppSopr (KatSopr.NRec);
          SetModified(FALSE);
          CheckSumma(TRUE);
        }

        oSpNext.UpDateSpDocsNpp(KatSopr.NRec,coSpSopr);
      }
//------------------------------------------------------------------------------
cmSetCurField:
{
  if not boGetTune('Pick.AutoPickinInterface')
    exit;

  case Target of
  //------------
    #KatMC.Name
  , #KatMC.BarKod:
      if ( SpSopr.cMCUsl = 0)
        PutCommand(cmPick);
  //------------
 end; // case
}

cmSetDefault:
  if ( not IsProtected(#KatSopr))
    {
      SpSoprDefault;
      SelectField(#KatMC.Name);
    }
  else
    Abort;

end; // HandleEvent
end; // Panel

//********************************************************************************

HandleEvent

cmInit:
{
  Var bViewSumm: boolean;
  bViewSumm := boGetTune('Doc.DEI.ViewSumm');

  sDEISumLabel := 'Количество';
  sDEI1Name    := 'в ДЕИ 1:';
  sDEI2Name    := 'в ДЕИ 2:';

  if ( (not ExistTune('Doc.DEI.ViewDoc')) or ((TypeSopr <> 600) and (TypeSopr <> 606)) or (not DopEd_Used2(TypeSopr)) )
    {
      SetFieldVisible(#KatDopEd1.ShortName, false);
      SetFieldVisible(#KatDopEd2.ShortName, false);
      SetFieldVisible(#SpDopEd1.Kol, false);
      SetFieldVisible(#SpDopEd2.Kol, false);

      SetFieldVisible(#sDEISumLabel, bViewSumm);
      SetFieldVisible(#fOsnKol, bViewSumm);
      SetFieldVisible(#fDEI1Kol, false);
      SetFieldVisible(#sDEI1Name, false);
      SetFieldVisible(#fDEI2Kol, false);
      SetFieldVisible(#sDEI2Name, false);
    }
  else
    case wGetTune('Doc.DEI.ViewDoc') of

      0:
        {
          SetFieldVisible(#KatDopEd1.ShortName, false);
          SetFieldVisible(#KatDopEd2.ShortName, false);
          SetFieldVisible(#SpDopEd1.Kol, false);
          SetFieldVisible(#SpDopEd2.Kol, false);

          SetFieldVisible(#sDEISumLabel, bViewSumm);
          SetFieldVisible(#fOsnKol, bViewSumm);
          SetFieldVisible(#fDEI1Kol, false);
          SetFieldVisible(#sDEI1Name, false);
          SetFieldVisible(#fDEI2Kol, false);
          SetFieldVisible(#sDEI2Name, false);
        }

      1:
        {
          SetFieldVisible(#KatDopEd1.ShortName, true);
          SetFieldVisible(#KatDopEd2.ShortName, false);
          SetFieldVisible(#SpDopEd1.Kol, true);
          SetFieldVisible(#SpDopEd2.Kol, false);

          SetFieldVisible(#sDEISumLabel, bViewSumm);
          SetFieldVisible(#fOsnKol, bViewSumm);
          SetFieldVisible(#fDEI1Kol, bViewSumm);
          SetFieldVisible(#sDEI1Name, bViewSumm);
          SetFieldVisible(#fDEI2Kol, false);
          SetFieldVisible(#sDEI2Name, false);
        }

      2:
        {
          SetFieldVisible(#KatDopEd1.ShortName, true);
          SetFieldVisible(#KatDopEd2.ShortName, true);
          SetFieldVisible(#SpDopEd1.Kol, true);
          SetFieldVisible(#SpDopEd2.Kol, true);

          SetFieldVisible(#sDEISumLabel, bViewSumm);
          SetFieldVisible(#fOsnKol, bViewSumm);
          SetFieldVisible(#fDEI1Kol, bViewSumm);
          SetFieldVisible(#sDEI1Name, bViewSumm);
          SetFieldVisible(#fDEI2Kol, bViewSumm);
          SetFieldVisible(#sDEI2Name, bViewSumm);
        }

    end;

   if coGetTune('SKLAD.AKT_MOVE.DOPFUNC01') = 0 disablecommand(cmValue21);
   if coGetTune('SKLAD.AKT_MOVE.DOPFUNC02') = 0 disablecommand(cmValue22);
   if coGetTune('SKLAD.AKT_MOVE.DOPFUNC03') = 0 disablecommand(cmValue23);
   if coGetTune('SKLAD.AKT_MOVE.DOPFUNC04') = 0 disablecommand(cmValue24);
}

cmDefault:
 if pickSpSopr_regim
   {
     wasPickSpSopr := TRUE;

     if GetFirst PickSpSopr where ((constPickSpSopr == PickSpSopr.wList)) <> tsOk
       {
         PickSpSopr.wList := constPickSpSopr;
         PickSpSopr.cRec  := SpSopr.nRec;
         PickSpSopr.nRec  := 0;
         insert current PickSpSopr;
       }

     CloseWindow(EditSopr);
   }

cmMarkUnMark:
  {
    if IsValid(#PickSpSopr)
      delete current PickSpSopr;
    else
     {
       PickSpSopr.wList := constPickSpSopr;
       PickSpSopr.cRec  := SpSopr.nRec;
       PickSpSopr.nRec  := 0;
       insert current PickSpSopr;
     }

    if GetNext SpSopr = tsOk
      CallToNeighbours(cmPosDown, #SpSopr);

    RescanPanel(#SpSopr);
    RedrawPanel(#SpSopr);
  }

cmSelectall:  //[+]Все
  {
    delete PickSpSopr where ((constPickSpSopr == PickSpSopr.wList));
    PushPos(#SpSopr);
    StartNewVisual(vtRotateVisual, vfTimer, 'Помечаю записи', 1);

    _LOOP SpSopr
      {
        NextVisual;

        PickSpSopr.wList := constPickSpSopr;
        PickSpSopr.cRec  := SpSopr.nRec;
        PickSpSopr.nRec  := 0;
        insert current PickSpSopr;
      }

    StopVisual('', 0);
    PopPos(#SpSopr);
    RescanPanel(#SpSopr);
    RedrawPanel(#SpSopr);
    RereadRecord(#SpSopr);
  }

cmUnSelectall:  //[-]Снять
  {
    if (delete PickSpSopr where ((constPickSpSopr == PickSpSopr.wList)) = tsOk)
      { }

    RescanPanel(#SpSopr);
    RedrawPanel(#SpSopr);
  }
cmCancel:
  {
    wasPickSpSopr:= false;
  }

#ifdef Kachestvo2
  #define _Qual_ES_HE_600_
  #include QualSopr.vpp
#end // #ifdef Kachestvo2

cmAlt1:
  if ( (TypeSopr = 600) OR (TypeSopr = 0))
    {
      var PhoneCard: iPhoneCard;

      if PhoneCard.CheckAttrPhoneCardOfNakl(frm1wed.Handle, KatSopr.nRec)
        Message('Проверка закончена.'#13'Атрибуты корректны.', Information)
      else
        frm1wed.ShowFile('Протокол проверки накладной')
    }

#include SOPRC13.VPP

cmIerarchy :
{
  if ( (CurTable = #SpSopr) and (IsValid(#SpSopr)) )
    {
      SaveLinkMTRAutoPick(CurField);
      RunInterface('LinkMtr2Spec', word(coSpSopr), SpSopr.nRec, if(not OtkatToOldState(false, word(0)), 1, 0));

      SetModified(true);
      UpdateTable;
    }
}

cmHotKeys:
  case CurTable of
    #KatSopr:
      {
        if ( TypeSopr = 600)
        {
          if ( boGetTune('Oper.CalcKol'))
            PutHotCommand(RunDynMenu(
             #AddComp('L_SKLAD')'SoprMovKatSopr600_HotKeys'
           + ';'
           + #AddComp('C_COMMON')'CalcKol_HotKeys'
           + ';SEPARATOR;'
           + #AddComp('L_SKLAD')'Akt_MoveLoc'))//lf_
          else
            PutHotCommand(RunDynMenu(
              #AddComp('L_SKLAD')'SoprMovKatSopr600_HotKeys'
            + ';SEPARATOR;'
            + #AddComp('L_SKLAD')'Akt_MoveLoc')); //lf_
        }
        else
          case TypeSopr of
            601:  //в ОС
              PutHotCommand(RunMenu('SoprMovKatSopr601_HotKeys'));
            605:  //в НМА
              PutHotCommand(RunMenu('SoprMovKatSopr605_HotKeys'));
            else PutHotCommand(RunMenu('SoprMovKatSopr_HotKeys'));
          end; //case
      }
    #SpSopr:
      {
        if ( TypeSopr = 600)
        {
          PushPos(#KatStroy);
          ResetBounds(#KatStroy);
          if ( GetFirst KatStroy where ((SpSopr.cMCUsl == KatStroy.cMC(NoIndex))) = tsOk)
          {
            DisableCommand(cmValue9);
            DisableCommand(cmVal4);
          }

          SetBounds(#KatStroy);
          PopPos(#KatStroy);
          PutHotCommand(RunMenu('SoprMovSpSopr600_HotKeys'));
          EnableCommand(cmValue9);
        }
        else
          PutHotCommand(RunMenu('SoprMovSpSopr_HotKeys'));
      }
  end;

cmXchangeMCSetup:
  {
    oSerialMove.SetSerialForSopr(SpSopr.nRec, true);
  }

cmCalcKol:
  {
    var CK: CalcKol;
    if ( not GetVipInterface(CK))
      {
        Message('Ошибка при загрузке интерфейса с функциями подсчета общего количества.', Error);
        Exit;
      }

    Message('Итого количество по документу: ' + Trim(String(CK.GetKolForKatSopr(KatSopr.NRec), 15+prSignsInKol, prSignsInKol)));
    FreeVipInterface(CK);
  }

cmRestoreDoc:
  {
    if not OtkatToOldState(true, word(0))
      Exit;

    if ( KatSopr.reserved = 1)
      {
        MessageMCreserved;
        Abort;
        Exit;
      }

    if (CurTable = #SpSopr)
      if (SpSopr.PrMC = 1)
        Pick_F3_CtrlF3(cmRestoreDoc);

    Abort;

    if ( (TypeSopr = 600) OR (TypeSopr = 606))
      if ( (KatSopr.cCellVal <> 0) OR (trim(KatSopr.nVagon)<>''))
        EditSpSoprUzbek(2);
  }

cmValue6:
  {
    if not OtkatToOldState(true, word(0))
      Exit;

    PickcBuilding;
    RereadRecord(#SpSopUsl);
  }

cmVal7:
  {
    if not OtkatToOldState(true, word(0))
      Exit;

    PickcZatr;
    RereadRecord(#SpSopUsl);
  }

cmVal8:
  {
    if not OtkatToOldState(true, word(0))
      Exit;

    if ( not UpdateTable)
      {
        Abort;
        Exit;
      }

    if ( CurTable <> #KatSopr)
      SelectPanel(#KatSopr);

    RunInterface('GetSpDocsMTR', word(coKatSopr), KatSopr.NRec);
    RereadRecord(#SpSopr);
    RereadRecord(#SpSopUsl);
  }

cmValue60:
  RunInterface('ShowSpesHowSmeta', KatSopr.nRec, word(coKatSopr));

cmValue61:
  if isValid (#SpSopr)
    {
      if Message('Удалить текущую спецификацию?', YesNo) = cmYes
        {
          delete all SpSopr where (( KatSopr.NRec == SpSopr.cSopr ));

          if ( IsNew )
            insert current KatSopr;
          RunInterface('CopySpecFromDO', KatSopr.nRec);
          ReReadRecord;
        }
    }
  else
    {
      if ( IsNew )
        insert current KatSopr;
      RunInterface('CopySpecFromDO', KatSopr.nRec);
      ReReadRecord;
    }

cmSetFlag:
  {
    if not OtkatToOldState(true, word(0))
      Exit;

    AssingPrlPrices;
  }

cmSaveDoc:
   if ( KatSopr.Reserved = 1)
     {
       MessageMCreserved;
       Abort;
       Exit;
     }

cmValue1:
  if KatSopr.nRec<>0
    RunInterface(LinkToGrPl, KatSopr.vidSopr, //тип документа системный
                             KatSopr.nRec //ссылка на документ
                );


//Открытие сформированной операции ОС/НМА на редактирование
cmValue4:
  if GetFirst SpOrder where ((SpSopr.nRec == SpOrder.cSpSopr)) = tsOk
   RunMoveOs(SpOrder.nRec);

cmOpenSearch:
  if( oMSview.getTuneMSForPodr(KatSopr.cPodrFrom) = 1 )
    case CurField of
    //--------------
    #PrV:
      {
        SetFaktCenaPrih;
        Abort;
      }
    //--------------
      #SumPrice:
        Abort;
    //--------------
    end;

cmValue21: //lf_
  {
    Update_Current_KatSopr;

    if RunInterface('SimpleWayToRunAlgorithm', coGetTune('Sklad.Akt_Move.DopFunc01'),
                     word(2000+KatSopr.vidSopr), KatSopr.nRec, comp(0)) <>cmCancel
      {};

    ReReadRecord(#KatSopr);
  }

cmValue22:
  {
    Update_Current_KatSopr;

    if RunInterface('SimpleWayToRunAlgorithm', coGetTune('Sklad.Akt_Move.DopFunc02'),
                     word(2000+KatSopr.vidSopr), KatSopr.nRec, comp(0)) <>cmCancel
      {};

    ReReadRecord(#KatSopr);
  }

cmValue23:
  {
    Update_Current_KatSopr;

    if RunInterface('SimpleWayToRunAlgorithm', coGetTune('Sklad.Akt_Move.DopFunc03'),
                     word(2000+KatSopr.vidSopr), KatSopr.nRec, comp(0)) <>cmCancel
      {};

    ReReadRecord(#KatSopr);
  }

cmValue24:
  {
    Update_Current_KatSopr;

    if RunInterface('SimpleWayToRunAlgorithm', coGetTune('Sklad.Akt_Move.DopFunc04'),
                    word(2000+KatSopr.vidSopr), KatSopr.nRec, comp(0)) <>cmCancel
      {};

    ReReadRecord(#KatSopr);
  }

#include stdweds.vpp   // Здесь описан cmPrintDoc

// Печать накладных в FastReport
//------------------------------------------------------------------------------

cmValue35 :
  {
    UpDateTable;

    if (curTable = #SpSopr)
      SelectPanel(#KatSopr);

    PrintDocumentFr;
    RescanPanel(#SpSopr);
  }
//------------------------------------------------------------------------------

#ifdef _MOVENAKL_
//------------------------------------------------------------------------------

cmSaveDoc:
   sop_mov(KatSopr.cPodrFrom, KatSopr.cMolFrom, SpSopr.cParty);
#end

//------------------------------------------------------------------------------

cmRestoreDoc:
  if ( TypeSopr = 600 OR TypeSopr = 606)
    if ( KatSopr.cCellVal<>0 OR trim(KatSopr.nVagon)<>'')
      EditSpSoprUzbek (2);

//------------------------------------------------------------------------------

cmValue9:
  if ( CurTable = #SpSopr)
    {
      CopySpSopr;
      ProcessCommand(cmCheckSumma);
    }

//------------------------------------------------------------------------------
cmVal4:
{
  if (NOT UpDateTable)
    EXIT;

  if (NOT OtkatToOldState(FALSE, word(0)))
    EXIT;

  if (SpSopr.NRec <> 0)
    if (RunInterface(Svert, SpSopr.NRec) <> cmCancel)
    {
      RereadRecord(#SpSopr);
      ProcessCommand(cmCheckSumma);
    }
}

//------------------------------------------------------------------------------

#include SortMC.vpp

//------------------------------------------------------------------------------

cmExp:
  PutCommand(cmDublSopr);

//------------------------------------------------------------------------------

cmDublSopr:
  oSDfuns.DublSopr(KatSopr.NRec); //дублир. позиции

//------------------------------------------------------------------------------

cmExtendetInfo:
  RunWindow(ExtendetInfo);

//------------------------------------------------------------------------------

cmDocBas:
{
 if not OtkatToOldState(true, word(0))
   Exit;
 else
   {
     Update_Current_KatSopr;
     CalcSrPrice;
     Update_Current_KatSopr;
   }
}
//------------------------------------------------------------------------------

cmValue59:
{
  if not OtkatToOldState(true, word(0))
    Exit;

  if KatSopr.reserved <> 0
    {
      message('Сперва снимите резервы МЦ по данной накладной');
      Exit;
    }
  if KatSopr.dOpr <> date(0,0,0)
    {
      message('Операция невозможна - по данной накладной сформированы ордера');
      Exit;
    }

  if message('Произвести распределение спецификации накладной по партиям ?', YesNo) <> cmYes
    Exit;

  var kol_, kf_: double;
  var nRec_: comp;
  var was_insert, needProt_, was_update : boolean;
  var npp_: word;

  StartnewVisual(vtRotateVisual, vfBreak + vfConfirm + vfTimer,'Распределение спецификации по партиям',1);
  npp_:= 0;
  needProt_:= false;
  frm1wed.AbortForm;

  var newSopr_ : comp;
  var first_: boolean;
  first_:= true;

  external _LOOP SpSopr where (( KatSopr. nRec == SpSopr.cSopr and
                                             1 == SpSopr.PrMC ))
    {
      if not NextVisual
        break;

      if SpSopr.cParty <>0
      {
        inc(npp_);
        Continue;
      }

      Store_Init;
      Store_ReInit;
      Store_Run(KatSopr.dSopr, SpSopr.cMCUsl,
                if ( KatSopr.cPodrFrom=0, comp(-1), KatSopr.cPodrFrom),
                if ( KatSopr.cMolFrom =0, comp(-1), KatSopr.cMolFrom),
                0, true, true, true);
      Store_Done;

      external _LOOP TmpSaldo1 // сортировка по номеру партии
        {
          if GetFirst KatParty where ((TmpSaldo1.cParty == KatParty.nRec)) <>tsOk
            {
              //delete current TmpSaldo1;
              //continue;
              TmpSaldo1.DateParty:= date(31,12,2100);
            }
          else
            TmpSaldo1.DateParty:= longint(KatParty.kod);

          update current TmpSaldo1;
        }

      if GetFirst TmpSaldo1 <> tsOk
        {
          SpSopr.kolNorma := SpSopr.kolFact;
          SpSopr.kolFact  := 0;
          SpSopr.kolOpl   := 0;
          SpSopr.kol      := 0;
          npp_:= npp_ +1;
          SpSopr.npp      := npp_;

          // расчет грузовых мест
          ReCalcGrM;

          update current SpSopr;

          frm1wed.write('Не разнесена по партиям позиция МЦ "'+KatMC.name+'" в количестве '+ string(kol_/kf_)+' '+OtpEd)

          Continue;
        }

      kf_ := if(isValid(#KatOtpEd) AND KatOtpEd.koef <> 0, KatOtpEd.koef, 1);
      kol_ := SpSopr.kolFact * kf_; // к учётным единицам
      nRec_:= SpSopr.nRec;
      was_insert:= false;
      was_update:= false;

      _LOOP TMPSaldo1 where ((date(0,0,0) <<= TmpSaldo1.dateParty))
        {

          if TmpSaldo1.kol <= GetPresision_forKol
            Continue;

          SpSopr.cParty  := TmpSaldo1.cParty;
          SpSopr.rPrice  := TmpSaldo1.price  * kf_;
          SpSopr.rVPrice := TmpSaldo1.vPrice * kf_;
          SpSopr.cVal    := TmpSaldo1.cVal;
          SpSopr.kolNorma:= 0;
          npp_:= npp_ +1;
          SpSopr.npp     := npp_ ;

          if kol_ > TmpSaldo1.kol
            {
              SpSopr.kolFact := TmpSaldo1.kol / kf_; //к отпускным единицам
              SpSopr.kolOpl  := TmpSaldo1.kol / kf_;
              SpSopr.kol     := TmpSaldo1.kol / kf_;

              kol_ := kol_ - TmpSaldo1.kol;
            }
          else
            {
              SpSopr.kolFact := kol_ / kf_;          //к отпускным единицам
              SpSopr.kolOpl  := kol_ / kf_;
              SpSopr.kol     := kol_ / kf_;

              kol_ := 0;
            }

          SpSopr.price   := RoundRubOrd(SpSopr.rPrice , SpSopr.kolFact);
          SpSopr.vPrice  := RoundValOrd(SpSopr.rVPrice, SpSopr.kolFact);

          // расчет грузовых мест
          ReCalcGrM;

          if was_update = false
            { update current SpSopr;
              was_update:= true;
            }
          else
            { SpSopr.nRec    := 0;
              insert current SpSopr;
              was_insert:= true;
            }

          if kol_ < GetPresision_forKol
            break;
        }//_L


      if kol_ >= GetPresision_forKol // не всё распределено
        {
          if first_
            {
              frm1wed.write(' СПо накладной № '+KatSopr.nSopr+' от '+DateToStr(KatSopr.dSopr, 'DD.MM.YYYY'));
                frm1wed.write('Подразделение: '+ KatPodr.name);
                frm1wed.write('');
                frm1wed.write('Не разнесены по партиям позиции: С');
              frm1wed.write(' Р────────────────────┬───────────────────────────────────────────────────────────────────────────┬────────────────────');
                frm1wed.write('       Баркод       │                             Наименование                                  │        Кол-во      ');
                frm1wed.write('────────────────────┼───────────────────────────────────────────────────────────────────────────┼────────────────────');

              PushPos(#KatSopr);

              KatSopr.nSopr := KatSopr.nSopr +'/Зак';
              KatSopr.descr := sGetTune('User.Descr');
              KatSopr.desGr := sGetTune('User.DesGr');
              KatSopr.summa := 0;
              KatSopr.sumVal:= 0;
              KatSopr.nRec:= 0;
              insert current KatSopr;

              newSopr_:= KatSopr.nRec;

              PopPos(#KatSopr);
            }
          first_:= false;

          SpSopr.kolNorma := kol_ / kf_; // не распределенное кол-во
          SpSopr.kol      := SpSopr.kolNorma;
          SpSopr.kolFact  := SpSopr.kolNorma;
          SpSopr.kolOpl   := SpSopr.kolNorma;
          SpSopr.price    := 0;  SpSopr.vPrice := 0;
          SpSopr.rPrice   := 0;  SpSopr.rVPrice:= 0;
          SpSopr.cSopr    := newSopr_;
          SpSopr.nRec:= 0;

          // расчет грузовых мест
          ReCalcGrM;

          insert current SpSopr;

          frm1wed.write(LPad(substr(KatMC.barKod,1,20),20)+'│'+Pad(substr(KatMC.name,1,75),75)+'│'+LPad(string(kol_/kf_)+' '+OtpEd,20));
          needProt_:= true;
        }

    }//external _L

  StopVisual('',0);
  if GetFirst SpSopr where (( 1 == SpSopr.PrMC )) <>tsOk
    {};

  if needProt_
  {
    frm1wed.write('────────────────────┴───────────────────────────────────────────────────────────────────────────┴──────────────────── Р');
    frm1wed.PutEvent(feBreak);
    frm1wed.showFile('Протокол не разнесенных позиций');
  }
  CalcSrPrice;
  Update_current_KatSopr;

}
//------------------------------------------------------------------------------

cmMakeOrder:
  {
    if not OtkatToOldState(true, word(0))
      Exit;

    if ( IsNew)
      {
        Message('Накладная не оформлена.', CancelButton);
        Exit;
      }

    if (wGetTune('Sklad.Akt_Move.IsDelOrder') = 1)
      if (GetFirst SklOrder where ((KatSopr.nRec == SklOrder.cSopr)) = tsOk)
      {
        Message('Переформирование ордеров запрещено настройкой:'#13 +
                GetTuneName('Sklad.Akt_Move.IsDelOrder'));
        Exit;
      }

    MakeReserve(false);

    var PrintDiff: boolean;
    var OldSum: double;
    PrintDiff := boGetTune('Sklad.PriceWithOrder');

    if ( OtkatOrders(false, TRUE))
      {
        if (PrintDiff)
          {
            OldSum := Sum;
            delete all TmpSaldo3;

            _LOOP SpSopr
              {
                ClearBuffer(#TmpSaldo3);
                TmpSaldo3.cMc   := SpSopr.cMCUSL;
                TmpSaldo3.Price := Prv;
                insert current TmpSaldo3;
              }
            CalcSrPrice;

            Update_Current_KatSopr;
          }

        case TypeSopr of
          600: MakeMove;
          601: MakeMoveOc(15);
          602: MakeMBPOperation;
          603: rzMakeMove;
          605: MakeMoveOc(16);
          606: MakeMove;
        end; // case
      }

    update current KatSopr;

    ClearFieldOption(#KatSopr.dOpr, ofProtected);

    RescanPanel(#SpSopr);
    RedrawPanel(#SpSopr);

    if (PrintDiff)
      {
        frmDiffPrice.Write(KatSopr.NSopr);
        frmDiffPrice.Write(KatSopr.dSopr);
        frmDiffPrice.Write(OldSum);
        frmDiffPrice.Write(Sum);

        var show_flag: boolean;  show_flag := FALSE;

        _LOOP TmpSaldo3
          {
            if (GetFirst SpSopr where ((KatSopr.nRec == SpSopr.cSopr AND TmpSaldo3.cMc == SpSopr.cMcUsl)) = tsOk)
              {
                if ( abs(abs(TmpSaldo3.Price) - abs(Prv)) > 0.0001 ) {
                  GetFirst KatMc where ((SpSopr.cMcUsl == KatMc.nRec));
                  frmDiffPrice.Write(KatMC.Name);
                  frmDiffPrice.Write(TmpSaldo3.Price);
                  frmDiffPrice.Write(Prv);
                  show_flag := TRUE;
                }
              }
          }

        if (Show_Flag)
          frmDiffPrice.ShowFile('');
        else
          frmDiffPrice.AbortForm;
      }

    if LongInt(KatSopr.dOpr) <> 0
      EnableCommand(cmValue20);
  }

cmValue20: // отмена формирования ордеров
  {
    if (wGetTune('Sklad.Akt_Move.IsDelOrder') <> 0)
      if (GetFirst SklOrder where ((KatSopr.nRec == SklOrder.cSopr)) = tsOk)
      {
        Message('Удаление ордеров запрещено настройкой:'#13 +
                GetTuneName('Sklad.Akt_Move.IsDelOrder'));

        ReReadRecord(#KatSopr);

        Exit;
      }

    if OtkatOrders(true, TRUE)
      {
        set KatSopr.dOpr := Date(0, 0, 0);

        Update_Current_KatSopr;

        RereadRecord;
      }
    else
      Abort;

    if LongInt(KatSopr.dOpr) = 0
      DisableCommand(cmValue20);
  }

cmDone:
  {
    if ( RazrezChanged)
      {
        RazrezChanged := FALSE;
        if GetFirst SpSopr = tsOk // если есть спецификация
          Message('Разрез списания был изменен, необходимо пересчитать цены <Alt><D>', CancelButton+Information);
      }

    if ( (TypeSopr = 600 OR TypeSopr = 606 OR TypeSopr = 601 OR TypeSopr = 602) AND UKS_Used)
      if UpdateTable
        oUKSfuns.JoinNakl(KatSopr.nRec);
  }

cmRecalcAllSums:   //  Alt+G
  {
    if ( KatSopr.cPodrFrom = 0)
    {
      Message('Заполните поле "Откуда ..."', OkButton);
      SelectField(#KatPodr.Name);
      Exit;
    }

    if ( IsNew )
      {
        if ( insert current KatSopr = tsOk )
          { }
      }
    else
      {
        if ( update current KatSopr = tsOk )
          { }
      }

    SetNew(false);
    SetModified(false);
    RazrezChanged := FALSE;

    if ( KatSopr.dOpr <> Date(0, 0, 0))
      {
        Message('Накладная была оприходована. Выполнение невозможно.', Information);
        Exit;
      }

    if ( IsValid(#SpSopr))
      if ( Message('Существующая спецификация накладной будет удалена.'#13+
                'Продолжить?', YesNo + Confirmation)<>cmYes)
         Exit;

    var _nRec: comp; _nRec := 0;
    var piKatDopEd_: iKatDEI; // Интерфейс с public-функциями для ДЕИ
    var ret: word;
    var KolSrc, KolFactSrc, KolOplSrc: double;
    var SpSoprNRec: comp;

      ret := 0;
      if ( RunDialog('GetNaklType', ret) = cmCancel) Exit;

      PushPos(#SpSopr);
      PushPos(#KatSopr);
      case ret of
        0: RunInterface('GetNakl', 101, _nRec); //prih
        1: RunInterface('GetNakl', 502, _nRec); //prih proizv
        2: RunInterface('GetNakl', 201, _nRec); //rash
        3: RunInterface('GetNakl', 501, _nRec); //rash proizv
      end;
      PopPos(#KatSopr);

      if ( _nRec = 0)
        Exit;

      if ( GetFirst SpSopr where ((_nRec == SpSopr.cSopr AND
                                   1     == SpSopr.PrMC)) <> tsOk)
      {
        Message('Выбранная накладная не имеет спецификации.', Information);
        PopPos(#SpSopr);
        Exit;
      }
      else
      {
        PopPos(#SpSopr);
        delete SpSopr where ((KatSopr.nRec == SpSopr.cSopr));

        StartNewVisual(vtIndicatorVisual, vfTimer+vfbreak+vfConfirm,
                       'Копирование позиций спецификации...', 0);
        if ( GetFirst SpSopr where ((_nRec == SpSopr.cSopr)) = tsOk) do
        {
          if ( TypeSopr<>606) AND (SpSopr.prMC<>1) continue;
          if ( not NextVisual) { delete SpSopr; Break }
          KolSrc     := SpSopr.Kol;
          KolFactSrc := SpSopr.KolFact;
          KolOplSrc  := SpSopr.KolOpl;
          PushPos(#SpSopr);
          SpSoprNRec := SpSopr.NRec;
          SpSopr.NRec := 0;
          SpSopr.vidSopr := KatSopr.vidSopr;
          SpSopr.cSopr := KatSopr.NRec;
          SpSopr.dSopr := KatSopr.dSopr;
          SpSopr.dOprTTN := 0;
          SpSopr.cSpOrder := 0;
          SpSopr.cSpStep := 0;
          SpSopr.SumNDS  := 0;
          SpSopr.SumVNDS := 0;
          if ( SpSopr.PrMC = 1) SpSopr.Npp := oSpNext.GetSpNppNext(KatSopr.NRec, coSpSopr)
          else SpSopr.Npp := 0;

          if ( Insert Current SpSopr = tsOk)
            oMTRFun.CopySpecMTR(coSpSopr, SpSoprNRec, coSpSopr, SpSopr.NRec);

          var oExtAtr: iExtAttr;
          var oExtCls: iExtClass;
          oExtAtr.CopyAllAttr    (word(coSpSopr), SpSoprNRec, SpSopr.nRec);
          oExtCls.CopyAllClassVal(word(coSpSopr), SpSoprNRec, SpSopr.nRec);
          if ( SpSopr.PrMC = 1)
          { piKatDopEd_.CopyDopEd(word(coSpSopr), SpSoprNRec, word(1), KolFactSrc,
                                  word(coSpSopr), SpSopr.NRec, word(1), SpSopr.KolFact, SpSopr.VidSopr);
            piKatDopEd_.CopyDopEd(word(coSpSopr), SpSoprNRec, word(2), KolSrc,
                                  word(coSpSopr), SpSopr.NRec, word(2), SpSopr.Kol, SpSopr.VidSopr);
            piKatDopEd_.CopyDopEd(word(coSpSopr), SpSoprNRec, word(3), KolOplSrc,
                                  word(coSpSopr), SpSopr.NRec, word(3), SpSopr.KolOpl, SpSopr.VidSopr);
          }

          oSDfuns.TTNDoc_Copy(coSpSopr, SpSoprNRec, coSpSopr, SpSopr.NRec);
          oCalcFuns.ClcUsl_CopyFactPar(SpSoprNRec, coSpSopr, SpSopr.NRec, coSpSopr);
          PopPos(#SpSopr);
        }
         While (GetNext SpSopr where ((_nRec == SpSopr.cSopr)) = tsOk);

        StopVisual('', 0);
        if ( GetFirst SpSopr <> tsOk) Message('Операция отменена.', Information);
      } //if

      if ( KatSopr.VidSopr = 606)
        {
          CheckSumma(true);
          KatSopr.Summa := FSRoundRub(KatSopr.Summa);
          KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);
        }
      else
        RecalcSumm(true);

      if ( update current KatSopr = tsOk)
        { }
  }


//------------------------------------------------------------------------------
// работа с планом списания / размещения
cmHandBoxPlan:
  RunInterface('MovBoxPlan', SpSopr.NRec);

//------------------------------------------------------------------------------

cmClearBoxPlan:
  if IsValid(#KatSopr)
    if GetVipRef(PAutoPlan, 'BoxAutoPlan')
      if pAutoPlan.UseBox(true)
        pAutoPlan.DeleteAllPlans (KatSopr.nRec);

//------------------------------------------------------------------------------

cmPrintBoxPlan:
  if IsValid(#KatSopr)
    if GetVipRef(PAutoPlan, 'BoxAutoPlan')
      if pAutoPlan.UseBox(true)
        pAutoPlan.PrintAllPlans (KatSopr.nRec);

//------------------------------------------------------------------------------

cmSopUslEdit:
  RunWindowModal(wSopUsl);

//------------------------------------------------------------------------------

cmValue15: // вставить все МЦ из наличия в разрезе на дату
  {
    if ( KatSopr.cPodrFrom = 0)
      {
        Message('Необходимо выбрать склад...', Information);
        Exit;
      }

    if Message('Вставить все МЦ, имеющиеся в наличии на данном разрезе хранения на дату документа?',
               YesNo+Confirmation+mfSwapButtons) <> cmYes
       Exit;

    if GetFirst SpSopr = tsOk
      if Message('Внимание! Спецификация документа будет удалена.'#13+'Продолжить?', YesNo+Confirmation) <> cmYes
        Exit;

    if ( Longint(KatSopr.dOpr) <> 0)
      if ( Message('По накладной уже созданы складские ордера.'#13+
                  'Удалить их?', YesNo+Confirmation+mfSwapButtons) <> cmYes)
        Exit;
      else
      {
        if (wGetTune('Sklad.Akt_Move.IsDelOrder') <> 0)
          if (GetFirst SklOrder where ((KatSopr.nRec == SklOrder.cSopr)) = tsOk)
          {
            Message('Удаление ордеров запрещено настройкой:'#13 +
                    GetTuneName('Sklad.Akt_Move.IsDelOrder'));

            ReReadRecord(#KatSopr);

            Exit;
          }

        if not OtkatOrders(true, FALSE)
          Exit;
      }

    _LOOP SpSopr
      {
        #include uksdelsp.vpp
        oSDfuns.SpSopr_Delete (SpSopr.nRec);
      }

    set KatSopr.Summa := 0;
    set KatSopr.SumVal := 0;
    AddAllMCFromNal;
    RescanPanel(#SpSopr);
  }

//------------------------------------------------------------------------------

cmSortMC:
  if RecordExists SpSopr = tsOk
  ReservSpSopr(abs(SpSopr.vPriceN) < GetPresision_forKol);

//------------------------------------------------------------------------------
//печать накладных
cmValue31:
  RunInterface('PrintSopr', KatSopr.NRec, if (CurWindow = wnMainWindow, MarkerNZ, 0), word(0));

//------------------------------------------------------------------------------

cmValue28:
  {
    UpdateTable;
    SaveMyDsk(1, Id + 'toc');
    RunInterface('VedVMC', KatSopr.NRec)
  }

cmValue32:
  {
    UpdateTable;
    SaveMyDsk(0, Id + 'toc');
    RunInterface('VedVMC', KatSopr.NRec);
  }

//------------------------------------------------------------------------------

cmValue33:
{

  if (not ReadMyDsk(sXLTFileName,ID,true))
     set sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS\' + ID + '.xlt';

  runinterface('xlrepsetup',1,ID,sXLTFileName);
  ReadMyDsk(sXLTFileName,ID,true);
}
//------------------------------------------------------------------------------
cmAlt2:
  {
    if ( not OtkatToOldState(true, word(0)) )
      Exit;

      if (KatSopr.VidSopr = 600) // пока только для накл.на вн.перемещение
      {
        Update_Current_KatSopr;

        RunInterface('RemakeSpSoprOnTeksaldo', KatSopr.nRec, 0);

        CheckSumma(true);
      }
  }

end; // HandleEvent Window
end; //Window

//********************************************************************************

Function DoAutoCreate: boolean;
var RealKolSrc, RealKolDest, KolReserved: double;
    PrRes: word;
    created: boolean;
    koefp: double;
    _MCsrc: comp;
    _PartySrc: comp;
{
  DoAutoCreate := FALSE;
  created := FALSE;

  PrRes := wGetTune('Reserv.PrSchSklad');
  // формирование новой накладной и ее спецификаций согласно выбранному алгоритму

  _LOOP TekSaldo where ((_cPodrSrc == TekSaldo.cPodr AND
                         _cMolSrc  == TekSaldo.cMol ))
    {
      // проверка фильтров по внешней классификации
      if ( wSeason > 0)
        {
          set _cMC_class := TekSaldo.cMC;

          if ( GetFirst ExClassSeg = tsOk)
            {
              if ( (wSeason = 1)AND(ExClassSeg.Value<>'0')AND(ExClassSeg.Value<>''))
                continue;
              else
                if ( (wSeason = 2)AND((ExClassSeg.Value = '0') OR(ExClassSeg.Value = '')))
                  continue;
            }
          else
            if ( wSeason = 2)
              continue;
        }

      if IsValid(tnTempProgram)
        {
          set _cMC_class := TekSaldo.cMC;
          if ( GetFirst TempProgram2 <> tsOk)
            continue;
        }


      case PrRes of
      //-----------
        0: KolReserved := if( GetFirst TekMC where ((TekSaldo.cMC == TekMC.cMC)) = tsOk, TekMC.reserve, 0);
      //-----------
        1: KolReserved := if( GetFirst SklOst where ((TekSaldo.cMC == SklOst.cMC AND
                              _cPodrSrc == SklOst.cPodr)) = tsOk, SklOst.Res, 0);
      //-----------
        2: KolReserved := TekSaldo.Res;
      //-----------
        else KolReserved := 0;
      //-----------
      end;//case

      RealKolSrc := TekSaldo.Kol - KolReserved;

      if ( RealKolSrc < KolBound1)
        continue;

      if ( FAlgoritm > 0)
        {
          _MCsrc := TekSaldo.cMC;
          _PartySrc := TekSaldo.cParty;
          PushPos(#TekSaldo);
          if ( GetFirst TekSaldo where ((_cPodrDest == TekSaldo.cPodr AND
                                        _cMolDest  == TekSaldo.cMol  AND
                                        _MCsrc     == TekSaldo.cMC   AND
                                        _PartySrc  == TekSaldo.cParty)) = tsOk)
            {
              case PrRes of
              //-----------
                0: KolReserved := if( GetFirst TekMC where ((TekSaldo.cMC == TekMC.cMC)) = tsOk, TekMC.reserve, 0);
              //-----------
                1: KolReserved := if( GetFirst SklOst where ((TekSaldo.cMC == SklOst.cMC AND
                                      _cPodrDest == SklOst.cPodr)) = tsOk, SklOst.Res, 0);
              //-----------
                2: KolReserved := TekSaldo.Res;
              //-----------
                else KolReserved := 0;
              //-----------
              end;//case

              RealKolDest := TekSaldo.Kol - KolReserved;
              if ( RealKolDest + 1E-9 > KolBound2)
                {
                  PopPos(#TekSaldo);
                  continue
                }
            }

          PopPos(#TekSaldo);
        }

      if ( FAlgoritm = 0)
        RealKolSrc := (RealKolSrc / 100) * KolSrc;
      else
        RealKolSrc := if(RealKolSrc < KolSrc, RealKolSrc, KolSrc);

      KatOtpEd.NRec := fEdIzm.GetAktOtpEdNrec(TekSaldo.cMC, 1);
      if (fEdIzm.GetDiskrOtpEd(KatOtpEd.NRec) = 1)
        RealKolSrc := Trunc(RealKolSrc)

      if ( RealKolSrc < 1E-9)
        continue;

      if not created
        {
          KatSoprDefault;

          KatSopr.cPodrFrom := _cPodrSrc;
          KatSopr.cPodrTo   := _cPodrDest;
          KatSopr.cMolFrom  := _cMolSrc;
          KatSopr.cMolTo    := _cMolDest;

          if oStatUser.Descr_Stat_U(true, word(600), KatSopr.Descr, KatSopr.cNote)
            KatSopr.Status := KatNotes.Status;
          else
            set KatSopr.cNote := oNotes.GetFirstNote(600, KatSopr.Status);

          if ( insert current KatSopr <> tsOk)
            {
              Message('Ошибка создания накладной.', Error);
              Exit;
            }

          created := TRUE;
          StartNewVisual(vtRotateVisual, vfTimer, 'Создание спецификаций накладной'#13, 1);

          InitMCInfo(KatSopr.dSopr);
          SkladProizv(0);
          LockValOt(true);
        }

      NextVisual;

      ClearBuffer(#SpSopr);
      koefp     := 1;

      if ( KatOtpEd.nRec <> 0)
        {
          SpSopr.cOtpEd := KatOtpEd.Nrec;
          koefp := fEdIzm.GetKoefOtpEd(SpSopr.cOtpEd);
        }

      SpSopr.cVal  := KatSopr.cValut;
      SpSopr.PrMC  := 1;
      SpSopr.cSopr := KatSopr.NRec;
      SpSopr.Kol   := RealKolSrc / koefp;

      if ( GetFirst KatMC where ((TekSaldo.cMC == KatMC.nRec)) = tsOk)
        if ( fEdIzm.GetKatEDdiskr(KatMC.cEd) = 1) // неделимая МЦ
          SpSopr.Kol := Round(SpSopr.Kol);

      if SpSopr.kol = 0
        Continue;

      SpSopr.VidSopr := KatSopr.VidSopr;
      SpSopr.KolFact := SpSopr.Kol;
      SpSopr.dSopr   := KatSopr.dSopr;
      SpSopr.dOprttn := KatSopr.dOpr;
      SpSopr.cParty  := TekSaldo.cParty;
      SpSopr.KolOpl  := SpSopr.Kol;

      if ( (KatSopr.TipSopr = 0) OR (KatSopr.TipSopr = 2))
        if ( GetFirst KatMC where ((TekSaldo.cMC == KatMC.nRec)) = tsOk)
          {
            SpSopr.ProcUb := KatMC.NormUb;
            SpSopr.KolOpl := SpSopr.Kol * (1 - SpSopr.ProcUb / 100);
            SpSopr.Netto  := KatMC.Massa;// * SpSopr.KolFact * koefp;
            SpSopr.mTara  := KatMC.mTara;// * SpSopr.KolFact * koefp;
          }

      SpSopr.cVal := StepMCInfo(TekSaldo.cMC, SpSopr.cVal,
                      if ( KatSopr.cPodrFrom = 0, comp(-1), KatSopr.cPodrFrom),
                      if ( KatSopr.cMolFrom = 0, comp(-1), KatSopr.cMolFrom),
                      if ( SpSopr.cParty = 0, comp(-1), SpSopr.cParty));

      SpSopr.Price   := AveragePrice  * koefp;
      SpSopr.VPrice  := AverageVPrice * koefp;
      SpSopr.rPrice  := SpSopr.Price;
      SpSopr.rVPrice := SpSopr.VPrice;
      SpSopr.Price   := FRoundRubOrd(1, SpSopr.rPrice  * SpSopr.kolFact)/SpSopr.kolFact;
      SpSopr.VPrice  := FRoundValOrd(1, SpSopr.rVPrice * SpSopr.kolFact)/SpSopr.kolFact;

      SpSopr.cMcUsl := TekSaldo.cMC;
      SpSopr.Npp := oSpNext.GetSpNppNext(KatSopr.NRec, coSpSopr);

      // расчет грузовых мест
      ReCalcGrM;

      if ( Insert current SpSopr <> tsOk)
        {
          Message('Ошибка создания спецификации накладной.', Error);
          Break
        }

      oDEIfuns.UpdateDEIKolSpSopr(SpSopr.NRec, SPSopr.Vidsopr, SpSopr.cMCUsl, SpSopr.PrMC, 1, 0, SpSopr.KolFact, 0);
      oDEIfuns.UpdateDEIKolSpSopr(SpSopr.NRec, SPSopr.Vidsopr, SpSopr.cMCUsl, SpSopr.PrMC, 2, 0, SpSopr.Kol,     0);
      oDEIfuns.UpdateDEIKolSpSopr(SpSopr.NRec, SPSopr.Vidsopr, SpSopr.cMCUsl, SpSopr.PrMC, 3, 0, SpSopr.KolOpl,  0);

      KatSopr.Summa := KatSopr.Summa + SpSopr.Price * SpSopr.KolOpl;
      KatSopr.SumVal := KatSopr.SumVal + SpSopr.VPrice * SpSopr.KolOpl;

    } // LOOP

  if not created
    {
      Message('Для заданных разрезов по складам не найдено МЦ, '#13
            + 'характеристики и количество которых удовлетворяют установленным ограничениям.', Information);
      Exit;
    }

  StopVisual('', 0);

  Update_Current_KatSopr;

  KatSopr.Summa := FSRoundRub(KatSopr.Summa);
  set KatSopr.SumVal := FSRoundVal(KatSopr.SumVal);

  DoneMCInfo;
  RecalcSumm(true);

  DoAutoCreate := TRUE;
}

//********************************************************************************

Procedure MessNoLessZero;
{
  Message('Значение не может быть меньше 0.', Information);
}

//********************************************************************************

#doc
Автоформирование накладной на внутреннее перемещение
#end
Window NaklAutoCreate 'Автоформирование накладной на внутреннее перемещение' (, hcSklLocMSpisNaklAuto, sci1Esc) EscClose;
  Show at (, , 70, 14);


//******************************************************************************

Panel pnNaklAutoCreate
  Table PodrSrc;

Screen scrNaklAutoCreate (, hcSklLocMSpisNaklAuto, sci1Esc)
  Show at (, , , 10);

Fields
//------------------------------------------------------------------------------
  PodrSrc.Name   ('Склад, с которого производится перемещение МЦ', , sci13Esc), protect,
    {Font = {BackColor = if ( _cPodrSrc = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  MolSrc.Name    ('Фамилия И.О. материально-ответственного лица', , sci13Esc), protect;
//------------------------------------------------------------------------------
  PodrDest.Name  ('Склад, на который производится перемещение МЦ', , sci13Esc), protect,
    {Font = {BackColor = if ( _cPodrDest = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  MolDest.Name   ('Фамилия И.О. материально-ответственного лица', , sci13Esc), protect;
//------------------------------------------------------------------------------
  wSeason        ('Выбор способа учета сезонности при перемещении', , sci13Esc): [List 'все', 'все кроме сезонных', 'только сезонные'], protect;
//------------------------------------------------------------------------------
  sProgram       ('Выбор программы для перемещения', , sci13Esc), protect;
//------------------------------------------------------------------------------
  FAlgoritm ('Выберите алгоритм перемещения МЦ', , sci1Esc), noprotect;
//------------------------------------------------------------------------------

Buttons
  cmValue10, , , 'Сформировать накладную согласно выбранному алгоритму', , sci1Esc;
<<

 Откуда  склад .@@@@@@@@@@@@@@@@@@@@@@@  МОЛ .@@@@@@@@@@@@@@@@@@@@@@@
 Куда    склад .@@@@@@@@@@@@@@@@@@@@@@@  МОЛ .@@@@@@@@@@@@@@@@@@@@@@@

 Учитывая сезонность, переместить     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 При перемещении учитывать программу  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 Для перемещения использовать алгоритм:
   (.) с одним ограничением             `<. Сформировать накладную .>
   (.) с двумя ограничениями            `
>>

end; // scr

//********************************************************************************

Screen scrNaklAutoCreate1
  Show at (, 11, , );

Fields
//------------------------------------------------------------------------------
  KolSrc ('Процент количества МЦ каждого артикула к перемещению', , sci1Esc): [8.3], noprotect;
//------------------------------------------------------------------------------
  PodrSrc.Name('', , sci1Esc), skip,
    {Font = {Bold = TRUE}};
//------------------------------------------------------------------------------
  KolBound1 ('Количество единиц МЦ на складе расхода', , sci1Esc): [8.3], noprotect;
//------------------------------------------------------------------------------
<<
 Переместить .@@@@@@@@@@@@ процентов МЦ каждого артикула, при условии, что
 на складе   .@@@@@@@@@@@@@@@@@@@@@ их не менее .@@@@@@@@@@@@ единиц

>>
end; // scr

//********************************************************************************

Screen scrNaklAutoCreate2
  Show at (, 11, , );

Fields
//------------------------------------------------------------------------------
  KolSrc ('Количество единиц МЦ каждого артикула к перемещению', , sci1Esc): [8.3], noprotect;
//------------------------------------------------------------------------------
  PodrSrc.Name, skip,
    {Font = {Bold = TRUE}};
//------------------------------------------------------------------------------
  KolBound1 ('Количество единиц МЦ на складе расхода', , sci1Esc): [8.3], noprotect;
//------------------------------------------------------------------------------
  PodrDest.Name, skip,
    {Font = {Bold = TRUE}};
//------------------------------------------------------------------------------
  KolBound2 ('Количество единиц МЦ на складе прихода', , sci1Esc): [8.3], noprotect;
//------------------------------------------------------------------------------
<<
 Переместить .@@@@@@@@@@@@ единиц МЦ каждого артикула, при условии, что
 на складе   .@@@@@@@@@@@@@@@@@@@@@ их не менее .@@@@@@@@@@@@ единиц
 а на складе .@@@@@@@@@@@@@@@@@@@@@ их меньше   .@@@@@@@@@@@@ единиц
>>
end; // scr

HandleEvent

cmPick:
  case CurField of
  //--------------
    #PodrSrc.Name:
    {
      RunInterface('GetSklad', _cPodrSrc);
      set _cPodrSrc := _cPodrSrc;
    }
  //--------------
    #PodrDest.Name:
    {
      RunInterface('GetSklad', _cPodrDest);
      set _cPodrDest := _cPodrDest;
    }
  //--------------
    #MolSrc.Name:
    {
      RunInterface('GetMol', _cMolSrc, _cPodrSrc);
      set _cMolSrc := _cMolSrc;
    }
  //--------------
    #MolDest.Name:
    {
      RunInterface('GetMol', _cMolDest, _cPodrDest);
      set _cMolDest := _cMolDest;
    }
  //--------------
    #sProgram:
    {
      RunInterface('GetExClassProgram');
      RereadRecord(#TempProgram);
      RereadRecord(#PodrSrc);
    }
  //--------------
  end;

cmDelOnProtect:
  case CurField of
  //--------------
    #PodrSrc.Name  : set _cPodrSrc  := 0;
  //--------------
    #PodrDest.Name : set _cPodrDest := 0;
  //--------------
    #MolSrc.Name   : set _cMolSrc   := 0;
  //--------------
    #MolDest.Name  : set _cMolDest  := 0;
  //--------------
    #wSeason       : set wSeason    := 0;
  //--------------
    #sProgram:
      {
        if ( delete TempProgram where ((word(31020) == TempProgram.wList)) <> tsOk )
          { }

        RereadRecord(#TempProgram);
        RereadRecord(#PodrSrc);
      }
  //--------------
  end;


cmCheckField:
{
  case CurField of
  //--------------
    #FAlgoritm:
      {
        if ( FAlgoritm = 0)
          {
            SetFormat(scrNaklAutoCreate1);
            if ( KolSrc > 100)
              set KolSrc := 100;
          }
        else
          SetFormat(scrNaklAutoCreate2);
      }
  //--------------
    #KolSrc:
      {
        if ( KolSrc < 0)
          {
            MessNoLessZero;
            set KolSrc := 0.0;
            SelectField(#KolSrc);
            Exit;
          }

        if ( (FAlgoritm = 0) AND (KolSrc > 100.0))
          {
            Message('Значение не может быть больше 100.', Information);
            set KolSrc := 100.0;
            SelectField(#KolSrc);
            Exit;
          }

        set KolSrc := KolSrc;
      }
  //--------------
    #KolBound1:
      {
        if ( KolBound1 < 0)
          {
            MessNoLessZero;
            set KolBound1 := 0.0;
            SelectField(#KolBound1);
            Exit;
          }

        set KolBound1 := KolBound1;
      }
  //--------------
    #KolBound2:
      {
        if ( KolBound2 < 0)
          {
            MessNoLessZero;
            set KolBound2 := 0.0;
            SelectField(#KolBound2);
            Exit;
          }

        set KolBound2 := KolBound2;
      }
  //--------------
  end;
}
end;

end; // Panel

//********************************************************************************

HandleEvent
cmValue10:
  {
    if not IsValid(#PodrSrc)
      {
        Message('Требуется выбрать склад расхода.', Information);
        SelectField(#PodrSrc.Name);
        Exit;
      }

    if not IsValid(#PodrDest)
      {
        Message('Требуется выбрать склад прихода.', Information);
        SelectField(#PodrDest.Name);
        Exit;
      }

    if ( KolSrc < 1E-6)
      {
        Message('Количество перемещаемых МЦ должно быть ненулевым.', Information);
        SelectField(#KolSrc);
        Exit;
      }

    if ( (FAlgoritm > 0) AND (KolBound2 < 1E-6))
      {
        Message('Ограничение на количество МЦ на складе, '+
                'принимающем МЦ, должно быть ненулевым.', Information);
        SelectField(#KolBound2);
        Exit;
      }

    if DoAutoCreate
      CloseWindow(NaklAutoCreate);
  }

cmDone:
  RereadRecord(#KatSopr);

end;

end; // Window NaklAutoCreate

//********************************************************************************
//******************************************************************************

Procedure PrintDoubleTTNforMov;
var pNaklBuilder: tNaklBuilderObjInterface;
    res: double;
    pg_flag      : word;
    Marker_flag  : boolean;
    MarkerCount2, i2: longint; // счетчики записей в маркере
    pickrec2     : comp;
{
  if not GetVipRef(pNaklBuilder, 'NaklBuilder')
    {
      Message('Ошибка загрузки интерфейса NaklBuilder.', Error);
      Exit;
    }

  Marker_flag := FALSE;
  pg_flag := 0;
  MarkerCount2 := GetMarkerCount(MarkerNZ);

  if ( MarkerCount2 = 0)
    {
      Marker_flag := TRUE;
      pickrec2 := KatSopr.NRec;
      MarkerCount2 := 1;
    }

  pNaklBuilder.Init;

  StartNewVisual(vtRotateVisual, vfTimer, 'Формирование парной накладной'#13, 0);

  For ( i2 := 0; i2<MarkerCount2; i2 := i2+1 )
    {
      if ( not Marker_flag )
        GetMarker(MarkerNZ, i2, pickrec2);

      if GetFirst KatSopr where ((pickrec2 == KatSopr.NRec)) <> tsOk
        Continue;

      PushPos(#KatSopr);

      NextVisual;
      res := pNaklBuilder.MakeSpisPlan(KatSopr.nRec);
      if ( res <= 0)
        {
          StopVisual('', 0);
          PopPos(#KatSopr);
          Exit;
        }

      NextVisual;
      pNaklBuilder.MakeDoubleTTN(KatSopr.nRec);

      PopPos(#KatSopr);
      Marker_flag := FALSE;
    }

  StopVisual('', 0);
  pNaklBuilder.Done;
}

//********************************************************************************

Panel pnSelect
  Table KatSopr

Browse brSelectNakl
  ( 'Для редактирования накладной нажмите <Enter>, <Ctrl><P> - подготовка к печати',
    hcSoprInMovVList, sci178InsPM);

Fields {Font = {Color = if ( Picked = 'V', ColorMark, 0)}};
//------------------------------------------------------------------------------
  picked                #3'V'           : [ 1], skip, Centered, NoAutoSize;
//------------------------------------------------------------------------------
  KatSopr.dSopr         #3'Дата'        : [10, 'DD/MM/YYYY'], protect, Centered, NoAutoSize;
//------------------------------------------------------------------------------
  KatSopr.Descr         #3'Дескр.'      : [ 5], protect, NoAutoSize;
//------------------------------------------------------------------------------
  KatSopr.NSopr         #3'Номер'       : [ 8], protect, NoAutoSize;
//------------------------------------------------------------------------------
  KatNotes.Name         #3'Статус'      : [14], protect, NoAutoSize;
//------------------------------------------------------------------------------
  KatPodr.Name          #3'Откуда'      : [14], protect;
//------------------------------------------------------------------------------
  ToPodr.Name           #3'Куда '       : [14], protect;
//------------------------------------------------------------------------------
  Sum                   #3'Сумма'       : [17], [brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], protect, NoAutoSize;
//------------------------------------------------------------------------------
  Valut                 #3'Валюта'      : [ 6], skip, NoAutoSize;
//------------------------------------------------------------------------------
  PrOrd                 #3'О'           : [ 1], skip, NoAutoSize;
//------------------------------------------------------------------------------
  if(KatSopr.reserved = 0, '', 'Р')
                        #3'Р'           : [ 1], skip, NoAutoSize;
//------------------------------------------------------------------------------
//  KatSopr.nVagon        #3'Вагон'       : [10], protect, NoAutoSize;
//------------------------------------------------------------------------------
end; // Browse

//********************************************************************************

HandleEvent

//--------------------------------------------------------------------------------

#include SOPRC13.VPP

//--------------------------------------------------------------------------------

cmFilterSave:
  RunWindow(winFiltr2);

//--------------------------------------------------------------------------------

cmPositionChanged:
  {
  SetRoundFormat(TypeSopr);//-- классы точности

    if KatSopr.reserved <> 0
      {
        SetFieldState(#KatSopr.srokRes, sfVisible);
        if KatSopr.srokRes = date(0,0,0) // для накладных созданных до версии 8.1
          set KatSopr.srokRes := add_day(KatSopr.dSopr, wGetTune('Reserv.SrokReserv'));
      }
    else
      ClearFieldState(#KatSopr.srokRes, sfVisible);
  }
//--------------------------------------------------------------------------------

cmMarkUnMark:
  {
    if ( SearchMarker(MarkerNZ, KatSopr.NRec, IndexNZ))
      {
        DeleteMarker(MarkerNZ, KatSopr.NRec)
        RedrawCurrentAndGo(GetCurrentFormat, TRUE);
      }
    else
      {
        InsertMarker(MarkerNZ, KatSopr.NRec);
        RedrawCurrentAndGo(GetCurrentFormat, TRUE);
      }

    RereadRecord;
    RescanPanel(#KatSopr);
  }
//--------------------------------------------------------------------------------
cmSelectall:
  {
    PushPos(#KatSopr);
    ClearMarker(MarkerNZ);
    StartNewVisual(vtNumericVisual, vfTimer+vfbreak+vfConfirm, 'Помечаю документы: ', 1);

    _LOOP KatSopr
      if ( not NextVisual )
        Break;
      else
        if ( not SearchMarker(MarkerNZ, KatSopr.NRec, IndexNZ) )
          InsertMarker(MarkerNZ, KatSopr.NRec);

    PopPos(#KatSopr);
    RereadRecord(#KatSopr);
    StopVisual('', 0);
  }
//--------------------------------------------------------------------------------
cmUnSelectall:
  {
    ClearMarker(MarkerNZ);
    RereadRecord(#KatSopr);
  }
//--------------------------------------------------------------------------------
cmDefault:
  {
    ClearMarker(MarkerNZ);
    RereadRecord(#KatSopr);
    PutCommand(cmEditSopr);
  }
//--------------------------------------------------------------------------------
cmDelOnProtect:
  abort;
//--------------------------------------------------------------------------------
cmEditSopr:
  {
    if ( TypeSopr = 600 OR TypeSopr = 606)
      {
        PosChange;
        ON_OFF_TYPE(false);
      }

    RunWindow(EditSopr);
  }
//--------------------------------------------------------------------------------
cmValue21: //lf_
  {
    Update_Current_KatSopr;

    if RunInterface('SimpleWayToRunAlgorithm', coGetTune('Sklad.Akt_Move.DopFunc01'),
                     word(2000+KatSopr.vidSopr), KatSopr.nRec, comp(0)) <>cmCancel
      {};

    ReReadRecord(#KatSopr);
  }

cmValue22:
  {
    Update_Current_KatSopr;

    if RunInterface('SimpleWayToRunAlgorithm', coGetTune('Sklad.Akt_Move.DopFunc02'),
                     word(2000+KatSopr.vidSopr), KatSopr.nRec, comp(0)) <>cmCancel
      {};

    ReReadRecord(#KatSopr);
  }

cmValue23:
  {
    Update_Current_KatSopr;

    if RunInterface('SimpleWayToRunAlgorithm', coGetTune('Sklad.Akt_Move.DopFunc03'),
                     word(2000+KatSopr.vidSopr), KatSopr.nRec, comp(0)) <>cmCancel
      {};

    ReReadRecord(#KatSopr);
  }

cmValue24:
  {
    Update_Current_KatSopr;

    if RunInterface('SimpleWayToRunAlgorithm', coGetTune('Sklad.Akt_Move.DopFunc04'),
                    word(2000+KatSopr.vidSopr), KatSopr.nRec, comp(0)) <>cmCancel
      {};

    ReReadRecord(#KatSopr);
  }
end; // HandleEvent
end; // Panel


//********************************************************************************
Function PickSpSoprVnt(cKatSopr_: comp): boolean;
{
  PickSpSoprVnt := FALSE;

  if GetFirst KatSopr where ((cKatSopr_ == KatSopr.nRec)) <> tsOk
    {
      message('Накладная не найдена');
      Exit;
    }

  if GetFirst SpSopr where ((cKatSopr_ == SpSopr.cSopr)) <> tsOk
    {
      message('Спецификация накладной не оформлена');
      Exit;
    }

  delete PickSpSopr where ((constPickSpSopr == PickSpSopr.wList));

  DisableCommand(cmInsert);
  DisableCommand(cmDelete);
  DisableCommand(cmPick);
  DisableCommand(cmSopUslEdit);
  DisableCommand(cmMakeOrder);
  DisableCommand(cmDoRes);
  DisableCommand(cmSkipRes);

  ProtectRecord(#KatSopr, TRUE);
  ProtectRecord(#SpSopr, TRUE);

  SetFieldState(#PickSpSoprMark, sfVisible);
  SetFieldOption(#KatMC.Name , ofSelectable);
  SetFieldOption(#BarKod     , ofSelectable);
  ClearFieldOption(#OtpEd          , ofSelectable);
  ClearFieldOption(#SpSopr.KolFact , ofSelectable);
  ClearFieldOption(#Capacity       , ofSelectable);
  ClearFieldOption(#CapacityPrice  , ofSelectable);
  ClearFieldOption(#PrV            , ofSelectable);
  ClearFieldOption(#SumPrice       , ofSelectable);
  ClearFieldOption(#KatParty.name  , ofSelectable);

  SetHelpAndStatusContext(brSpecif1, #PickSpSoprMark  , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #SpSopr.Npp      , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #KatMC.Name      , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #BarKod          , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #OtpEd           , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #SpSopr.KolFact  , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #Capacity        , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #CapacityPrice   , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #PrV             , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #SumPrice        , sci1EnEscInsPM, hcNoContext);
  SetHelpAndStatusContext(brSpecif1, #KatParty.name   , sci1EnEscInsPM, hcNoContext);

  AddBounds(tbPickSpSoprBnd);
  if GetFirst PickSpSopr <> tsOk
    { }

  pickSpSopr_regim  := TRUE;
  RunWindowModal(EditSopr);
  if not wasPickSpSopr
    {
      pickSpSopr_regim := FALSE;
      delete PickSpSopr where ((constPickSpSopr == PickSpSopr.wList));
      Exit;
    }

  PickSpSoprVnt := GetFirst PickSpSopr where ((constPickSpSopr == PickSpSopr.wList)) = tsOk;
  pickSpSopr_regim := FALSE;

} // Function PickKatSoprVnt


//********************************************************************************
Procedure RecalcPrices(typeSopr_: word; d1_, d2_: date);
var i_, cnt_: longInt;
{
  TypeSopr:= typeSopr_;

  StartNewVisual(vtRotateVisual, vfConfirm + vfBreak + vfTimer, 'Пересчет цен в накладных', 1);
  cnt_:= 0;
  _LOOP KatSopr where ((typeSopr_ == KatSopr.vidSopr AND
                             d1_ <<= KatSopr.dSopr   AND
                             d2_ >>= KatSopr.dSopr ))
    {
      NextVisual;
      cnt_:= cnt_ +1;
    }//_L

  i_:= 0;
  _LOOP KatSopr where ((typeSopr_ == KatSopr.vidSopr AND
                             d1_ <<= KatSopr.dSopr   AND
                             d2_ >>= KatSopr.dSopr ))
    {
      if not NextVisual
        break;

      SetVisualHeader('Пересчет цен в накладных'#13#3+
                      'Обработано '+string(i_)+' из '+string(cnt_));
      i_:= i_ +1;

      if not OtkatToOldState(false, word(0))
        Continue;

      if ( UpdateTable)
        {
          CalcSrPrice;
          oSDfuns.UpdateSoprHoz(KatSopr.Buffer);
          Update Current KatSopr;
        }
    }//_L

  StopVisual('',0);
}


//********************************************************************************

HandleEvent

#include SOPRC13.VPP

cmQueryStartDrag:
  if ( (TypeSopr = 600) OR (TypeSopr = 0))
    if ( DNDSetData(DNDRegisterFormat('PhoneCardManager'), KatSopr.nRec) = S_OK)
      DNDSetDropEffect(DROPEFFECT_LINK);

cmInit:
{
  ID := 'L_Sklad\dix_vedvmc';

  if ( (TypeSopr = 600) OR (TypeSopr = 0))
    {
      DNDFieldDropSource(brSelectNakl, #KatSopr.nSopr);
      DNDFieldDropSource(scrHeader   , #KatSopr.nSopr);
    }
  if ((not Lic_ItemExists('Custom')) or (wGetTune('Fin.SFO.TrebRaznMode') <> 0) or (TypeSopr <> 602))
  {
    SetTabbedSheetVisible(scFurnInSet, false);
    ClearFieldState(#Furn, sfVisible);
  }
  else
    SetFieldState(#Furn, sfVisible);

  #include ModifSalInit.vpp // для корректной работы объекта ModifSal.vih

    tTimeOtkat := Time(0, 0, 0, 0);
    bResOtkat  := TRUE;
    tRecOtkat  := 0;

    if ( TypeSopr = 0)
      TypeSopr := 600;

    if DemoMode
        {
          var pRecChecker: RecChecker;
          if not pRecChecker.CheckKatSoprRecords(TypeSopr)
            {
              Abort;
              Exit;
            }
        }

    SaveMyDsk(comp(0), '_KatSoprnRec_');

    InitNalServ;

    NRecNaklParam := 0;
    NRecFromParam := 0;
    NRecToParam := 0;
    MarkerNZ := InitMarker('KatSopr', 8, 100, 10, FALSE);

    RazrezChanged := FALSE;
    TMCUSL := 1;

    SetRoundFormat(TypeSopr);//-- классы точности
    Cena_Pr := GetPrecisionGroup('brForSopr_RVPrice');
    Cena_PrR := GetPrecisionGroup('brForSopr_Price');
    Cena_PrV := GetPrecisionGroup('brForSopr_VPrice');
    Kol_Pr := GetDlinaDrob_forKol;
    #include soprdes3.vpp
    s_SimvRub := sGetTune('NDE.SimvRub');

    SetFormat(brspecif1);

    case TypeSopr of
    //-----
      600:
      {
        SetFormat(scrHeader);
        SetFormat(scrSpecifInfoGRM);
        SetFormat(scrNaklAutoCreate1);
        SetWindowTitle(wnMainWindow, 'Список накладных на внутреннее перемещение');
        SetWindowTitle(EditSopr, 'Редактирование накладной на внутреннее перемещение');
        _wTuneSeason := wGetTune('Rep.out.cSeason');
        _wTuneProgram := wGetTune('Rep.out.cProgram');
        FAlgoritm := 0;
        KolSrc := 0.0;
        KolBound1 := 0.0;
        KolBound2 := 0.0;
        _cPodrSrc := 0;
        _cPodrDest := 0;
        _cMOLSrc := 0;
        _cMOLDest := 0;
        _cMC_class := 0;
        wSeason := 0; //all
        if ( delete TempProgram where ((word(31020) == TempProgram.wList))<> tsOk)
          { }
      }
    //-----
      601:
      {
        SetFormat(scrHeaderOsn);
        SetWindowTitle(wnMainWindow, 'Список накладных на передачу МЦ в ОС');
        SetWindowTitle(EditSopr, 'Редактирование накладной на передачу МЦ в ОС');
      }
    //-----
      602:
      {
        SetFormat(scrHeaderMBP);
        SetWindowTitle(wnMainWindow, 'Список накладных на передачу МЦ в МБП');
        SetWindowTitle(EditSopr, 'Редактирование накладной на передачу МЦ в МБП');
      }
    //-----
      603:
      {
        SetFormat(scrHeader);
        SetWindowTitle(wnMainWindow, 'Список накладных на передачу МЦ в розничную торговлю');
        SetWindowTitle(EditSopr, 'Редактирование накладной на передачу МЦ в розничную торговлю');
      }
    //-----
      605:
      {
        SetFormat(scrHeaderNMA);
        SetWindowTitle(wnMainWindow, 'Список накладных на передачу МЦ в НМА');
        SetWindowTitle(EditSopr, 'Редактирование накладной на передачу МЦ в НМА');
      }
    //-----
      606:
      {
        SetFormat(scrHeaderUZBEK);
        SetFormat(brspecif1UZBEK)
        SetFormat(scrSpecifInfoGRM);
        SetWindowTitle(wnMainWindow, 'Список транзитных накладных ');
        SetWindowTitle(EditSopr, 'Редактирование транзитной накладной ');
      }
    //-----
    end;

    SavedDoc := 0;
    UseDEI := DopEd_Used2(TypeSopr);
    AutoDEI := DopEd_Auto2(TypeSopr);
    if ( UseDEI )
      {
        SetHelpAndStatusContext(brSpecif1, #SpSopr.Kolfact, sci1378Esc, 'SoprDocFKolFact');
        SetHelpAndStatusContext(scrSpecifInfo, #SpSopr.Kolfact, sci1378Esc, 'SoprDocFKolFact');
        SetHelpAndStatusContext(scrSpecifInfo, #SpSopr.Kol, sci1378Esc, 'SoprDocFKolFact');
        SetHelpAndStatusContext(scrSpecifInfoGRM, #SpSopr.Kolfact, sci1378Esc, 'SoprDocFKolFact');
        SetHelpAndStatusContext(scrSpecifInfoGRM, #SpSopr.Kol, sci1378Esc, 'SoprDocFKolFact');
        SetHelpAndStatusContext(brSpecif1UZBEK, #SpSopr.Kolfact, sci1378Esc, 'SoprDocFKolFact');
      }

    if not UKS_Used
      { // Если в лицензии нет модуля "Капстроительство"
        DisableCommand(cmVal7);
      }

    if ( TypeSopr<>600 AND TypeSopr<>606 AND TypeSopr<>601 AND TypeSopr<>602)
      {
        DisableCommand(cmValue6);
        DisableCommand(cmVal8);
        DisableCommand(cmVal7);
      }

    if ( TypeSopr<>600) AND (TypeSopr<>606)
      {
        _StrStatus := '';
        ClearFieldState(#KatNotes.Name, sfVisible);
      }
    else
      _StrStatus := 'статус';

    noCheckOtkat := FALSE;

    if ( TypeSopr <> 600)
      {
        ClearFieldState(#Capacity, sfVisible);
        ClearFieldState(#CapacityPrice, sfVisible);
      }
    else
      if not boGetTune('Doc.Capacity.VidSopr201')  // switch off unneded Fields if NO tune has been set
        {
          ClearFieldState(#Capacity, sfVisible);
          ClearFieldState(#CapacityPrice, sfVisible);
        }

    if ( TypeSopr <> 602 )  // Накладная МЦ -> МБП/СФО: поле "Доп. информация"
    {
      ClearFieldState(#SpSopr.nKvit, sfVisible);
      HideLabel4Field(#SpSopr.nKvit);
    }

    ClearFieldState(#PickSpSoprMark, sfVisible);
    pickSpSopr_regim:= false;

    if ( ExistTune('TUNEPLACE.NeedRescan') )
      if ( boGetTune('TUNEPLACE.NeedRescan') )
        if ( ExistTune('TUNEPLACE.TimeRescan') )
          StartTimer(cmTimeRange2, 1, FALSE);

   if coGetTune('SKLAD.AKT_MOVE.DOPFUNC01') = 0 disablecommand(cmValue21);
   if coGetTune('SKLAD.AKT_MOVE.DOPFUNC02') = 0 disablecommand(cmValue22);
   if coGetTune('SKLAD.AKT_MOVE.DOPFUNC03') = 0 disablecommand(cmValue23);
   if coGetTune('SKLAD.AKT_MOVE.DOPFUNC04') = 0 disablecommand(cmValue24);

   iFurnInSet.InitFurnInSet(cgKatKod_FurnNakl);
}
//------------------------------------------------------------------------------
cmDelOnProtect:
  abort;
//------------------------------------------------------------------------------
cmTimeRange1:
  {
    wTimerCount := wTimerCount - 1;
    if ( wTimerCount > 0 )
      Exit;

    StopTimer(cmTimeRange1);

    if ( CurWindow = wnMainWindow )  // проверяем, находимся ли в главном окне
      if ( CurTable = tnKatSopr )    // на той, что надо таблице
        if ( CheckSelfTopWindow )    // поверх данного не открыто никаких диалогов, меню, быстрого поиска
//          RescanPanel(tnKatSopr);    // пересканируем 1 или несколько панелей
ReReadRecord(tnKatSopr);    // пересканируем 1 или несколько панелей

    StartTimer(cmTimeRange2, 1, FALSE);
    // если в этом месте просто сделать StartTimer(cmTimeRange1), он
    // не запусится, т.к. сейчас и так находимся внутри его обработчика
    // если же сделать PutCommand когда запущен и активен другой интерфейс,
    // событие уйдет в активный интерфейс: (
  }
//------------------------------------------------------------------------------
cmTimeRange2:
  {
    StopTimer(cmTimeRange2);
    wTimerCount := wGetTune('Sklad.NVP.TimeRescan') - 1;
    StartTimer(cmTimeRange1, 1, FALSE);
  }
//------------------------------------------------------------------------------
cmPositionChanged:
{
  if ( ( wTimerCount > 0 ) AND ( wTimerCount < 5 ) )  // если таймер запущен и меньше 5 секунд,
    wTimerCount := 5;                                 // установить задержку в 5 сек при смене позиции

  if LongInt(KatSopr.dOpr) = 0
    DisableCommand(cmValue20);
  else
    EnableCommand(cmValue20);
}

#include sopint.vpp

cmRestoreDoc:
  if ( TypeSopr = 600 OR TypeSopr = 606)
    if ( KatSopr.cCellVal<>0 OR trim(KatSopr.nVagon)<>'')
      EditSpSoprUzbek(2);

cmExp:
  {
    oOnExpImp.OnExportHandler( ieSopr, KatSopr.VidSopr, KatSopr.nRec, 0, MarkerNZ );
    RescanPanel(tnKatSopr);
  }

cmImp:
  {
    oOnExpImp.OnImportHandler( ieSopr, KatSopr.VidSopr );
    RescanPanel(tnKatSopr);
  }

cmIEHist:
  oOnExpImp.OnExportImportHistory( ieSopr, KatSopr.nRec );

cmFilialNo:
  RunWindowModal(NaklAutoCreate);

cmPlansNo:
  if getFirst SpSopr = tsOk
    PrintDoubleTTNforMov;

cmDocBas:
 DocBas_Process;

cmDone:
  {
    SaveMyDsk(comp(0), '_KatSoprnRec_');
    DoneNalServ;

    ClearMarker(MarkerNZ);
    DoneMarker(MarkerNZ, 'KatSopr');
   #include ModifSalDone.vpp // для корректной работы объекта ModifSal.vih
  }

cmSetCurTable:
  {
    if UKS_Used
     if ( TypeSopr = 600 OR TypeSopr = 606 OR TypeSopr = 601 OR TypeSopr = 602)
      if ( CurTable = #SpSOpr AND Target = #KatSopr)
        if UpdateTable
          oUKSfuns.JoinNakl(KatSopr.nRec);

    //автоматическое резервирование
    if (CurTable = #SpSopr AND Target = #KatSopr) AND boGetTune('Reserv.SchReserv')
      if (GetFirst SklOrder where ((KatSopr.nRec == SklOrder.cSopr)) <> tsOk)
        {
          PushPos(#SpSopr);
          var needRes_: boolean;  needRes_ := FALSE;

          _LOOP SpSopr
            if SpSopr.vPriceN = 0
              {
                needRes_ := TRUE;
                Break;
              }

          PopPos(#SpSopr);

          if needRes_
            MakeReserve(true);
        }
  }

cmValue1:
  if (KatSopr.nRec <> 0)
    RunInterface(LinkToGrPl, KatSopr.vidSopr, KatSopr.nRec);

//Открытие сформированной операции ОС/НМА на редактирование
cmValue4:
  if GetFirst SpOrder where ((SpSopr.nRec == SpOrder.cSpSopr)) = tsOk
    RunMoveOs(SpOrder.nRec);

cmValue10:
  RunInterface('PrintNaklALK', KatSopr.nRec);

cmValue11:
  RunInterface('ExciseNakl', KatSopr.VidSopr);

cmOpenSearch:
  if ( CurField = #KatSopr.dOpr )
    Stop;

cmValue12:
  RunInterface('Alcohol_nal');

//печать накладных
cmValue31:
  RunInterface('PrintSopr', KatSopr.NRec, if (CurWindow = wnMainWindow, MarkerNZ, 0), word(0));

cmValue28:
  {
    SaveMyDsk(1, Id + 'toc');
    RunInterface('VedVMC', KatSopr.NRec)
  }

cmValue32:
  {
    SaveMyDsk(0, Id + 'toc');
    RunInterface('VedVMC', KatSopr.NRec);
  }

cmValue33:
{
  if (not ReadMyDsk(sXLTFileName,ID,true))
     set sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS\' + ID + '.xlt';

  runinterface('xlrepsetup',1,ID,sXLTFileName);
  ReadMyDsk(sXLTFileName,ID,true);
}

// Печать накладных в FastReport
//------------------------------------------------------------------------------

cmValue35 :
  {
    UpDateTable;

    if (curTable = #SpSopr)
      SelectPanel(#KatSopr);

    PrintDocumentFr;
    RescanPanel(#SpSopr);
  }
//------------------------------------------------------------------------------

cmOnVipLoad:
  {
    ProcessCommand(cmInit); // PickSp
  }
end; // HandleEvent Interface

End. // Interface

//********************************************************************************
//********************************************************************************
//********************************************************************************
//-- !!! только внутреннее перемещение 600 !!! -----------------------------------

#doc
Локальное меню главного окна интерфейса (только внутреннее перемещение 600)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprDocsMain03_HotKeys Menu
{
-'Автоформирование накладной', cmFilialNo, 'Автоматическое формирование накладной', hcSklLocMSpisNaklAuto, 'Alt-N', kbAltN, sci1Esc;
-'Фильтр на документы', cmFilterSave, 'Установка фильтра на данные', hcSklFiltrTranzNakl, 'Alt-B', kbAltB, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации документа', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к документу', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
-----------;
-'Пересчет средних цен в документе', cmDocBas, 'Пересчет средних цен в документе', hcctxRecalcSrPrice, 'Alt-D', kbAltD, sci1Esc;
-'Сохранить документ в буфер', cmSaveDoc, 'Сохранение документа в буфер', hcctxSoprSaveDoc, 'Ctrl-F2', kbCtrlF2, sci1Esc;
-'Копирование документа из буфера', cmRestoreDoc, 'Копировать сохраненный в буфере документ', hcctxSoprRestoreDoc, 'Ctrl-F3', kbCtrlF3, sci1Esc;
-----------;
= 'Печать', 'Печать документа',,sci1Esc;
 {
  -'Печать документа', cmPrintDoc, 'Печать текущего документа', hcctxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
  -'Печать документа в FastReport', cmValue35, 'Печать текущего документа в FastReport', hcctxSoprPrintDoc, '',, sci1Esc;
  -----------;
  -'Печать накладной', cmValue31, 'Печать накладных', hcSkladLMPrintNaklDopForms, '', , sci1Esc;
  -----------;
  -'Печать парных накладных', cmPlansNo, 'Печать парных накладных для выбранных документов', hcPrintParNakl, 'Alt+P', kbAltP, sci1Esc;
  -----------;
  -'Ведомость выдачи МЦ на нужды учреждения', cmValue32, 'Ведомость выдачи МЦ на нужды учреждения (для бюджетных организаций)', hcSkladLMListMC4InstitNeeds, '', , sci1Esc;
  -'Ведомость выдачи МЦ на нужды учреждения в Excel', cmValue28, 'Ведомость выдачи МЦ на нужды учреждения (для бюджетных организаций)', hcSkladLMListMC4InstitNeeds, '', , sci1Esc;
  -'Настройка Excel шаблона', cmValue33, 'Ведомость выдачи МЦ на нужды учреждения (для бюджетных организаций)', hcSkladLMTuneExcelShabl, '', , sci1Esc;
 }
-----------;
-'Группы платежных средств', cmValue1, 'Привязка группы платежных средств', hcSklLMDogPaymentMeanGroup, '', , sci1Esc;
-----------;
- 'Экспорт', cmExp, 'Экспорт документов', hcSwiftMAll, 'Alt-O', kbAltO, sci1Esc;
- 'Импорт', cmImp, 'Импорт документов', hcSwiftMAll, 'Alt-I', kbAltI, sci1Esc;
- 'Протокол', cmIEHist, 'Протокол экспорта/импорта', hcSwiftMAll, 'Alt-H', kbAltH, sci1Esc;
}

//********************************************************************************

#doc
Локальное меню главного окна интерфейса (только внутреннее перемещение 600)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprDocsMain03B_HotKeys Menu
{
-'Фильтр на документы', cmFilterSave, 'Установка фильтра на данные', hcSklFiltrTranzNakl, 'Alt-B', kbAltB, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации документа', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к документу', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
-----------;
-'Пересчет средних цен в документе', cmDocBas, 'Пересчет средних цен в документе', hcctxRecalcSrPrice, 'Alt-D', kbAltD, sci1Esc;
-'Сохранить документ в буфер', cmSaveDoc, 'Сохранение документа в буфер', hcctxSoprSaveDoc, 'Ctrl-F2', kbCtrlF2, sci1Esc;
-'Копирование документа из буфера', cmRestoreDoc, 'Копировать сохраненный в буфере документ', hcctxSoprRestoreDoc, 'Ctrl-F3', kbCtrlF3, sci1Esc;
= 'Печать', 'Печать документа',,sci1Esc;
 {
  - 'Печать документа', cmPrintDoc, 'Печать текущего документа', hcctxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать документа в FastReport', cmValue35, 'Печать текущего документа в FastReport', hcctxSoprPrintDoc, '',, sci1Esc;
  -----------;
  - 'Печать накладной', cmValue31, 'Печать накладной', hcSkladLMPrintNaklDopForms, '', , sci1Esc;
 }
-----------;
-'Группы платежных средств', cmValue1, 'Привязка группы платежных средств', hcSklLMDogPaymentMeanGroup, '', , sci1Esc;
-----------;
- 'Экспорт', cmExp, 'Экспорт документов', hcSwiftMAll, 'Alt-O', kbAltO, sci1Esc;
- 'Импорт', cmImp, 'Импорт документов', hcSwiftMAll, 'Alt-I', kbAltI, sci1Esc;
- 'Протокол', cmIEHist, 'Протокол экспорта/импорта', hcSwiftMAll, 'Alt-H', kbAltH, sci1Esc;
}

//********************************************************************************
//для передачи в ОС
#doc
Локальное меню главного окна интерфейса (для передачи в ОС)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprDocsMain03B_601_HotKeys Menu
{
-'Фильтр на документы', cmFilterSave, 'Установка фильтра на данные', hcSklFiltrTranzNakl, 'Alt-B', kbAltB, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации документа', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к документу', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
-----------;
-'Пересчет средних цен в документе', cmDocBas, 'Пересчет средних цен в документе', hcctxRecalcSrPrice, 'Alt-D', kbAltD, sci1Esc;
-'Сохранить документ в буфер', cmSaveDoc, 'Сохранение документа в буфер', hcctxSoprSaveDoc, 'Ctrl-F2', kbCtrlF2, sci1Esc;
-'Копирование документа из буфера', cmRestoreDoc, 'Копировать сохраненный в буфере документ', hcctxSoprRestoreDoc, 'Ctrl-F3', kbCtrlF3, sci1Esc;
-----------;
= 'Печать', 'Печать документа',,sci1Esc;
 {
  -'Печать документа', cmPrintDoc, 'Печать текущего документа', hcctxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
  -'Печать документа в FastReport', cmValue35, 'Печать текущего документа в FastReport', hcctxSoprPrintDoc, '',, sci1Esc;
  -----------;
  -'Печать накладной', cmValue31, 'Печать накладной', hcSkladLMPrintNaklDopForms, '', , sci1Esc;
 }
-----------;
-'Группы платежных средств', cmValue1, 'Привязка группы платежных средств', hcSklLMDogPaymentMeanGroup, '', , sci1Esc;
-----------;
-'Просмотр операции ОС'    , cmValue4, 'Открытие сформированной операции ОС на редактирование', , '', , sci1Esc;
-----------;
- 'Экспорт', cmExp, 'Экспорт документов', hcSwiftMAll, 'Alt-O', kbAltO, sci1Esc;
- 'Импорт', cmImp, 'Импорт документов', hcSwiftMAll, 'Alt-I', kbAltI, sci1Esc;
- 'Протокол', cmIEHist, 'Протокол экспорта/импорта', hcSwiftMAll, 'Alt-H', kbAltH, sci1Esc;
}

//********************************************************************************
//для передачи в НМА
#doc
Локальное меню главного окна интерфейса (для передачи в НМА)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprDocsMain03B_605_HotKeys Menu
{
-'Фильтр на документы', cmFilterSave, 'Установка фильтра на данные', hcSklFiltrTranzNakl, 'Alt-B', kbAltB, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации документа', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к документу', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
-----------;
-'Пересчет средних цен в документе', cmDocBas, 'Пересчет средних цен в документе', hcctxRecalcSrPrice, 'Alt-D', kbAltD, sci1Esc;
-'Сохранить документ в буфер', cmSaveDoc, 'Сохранение документа в буфер', hcctxSoprSaveDoc, 'Ctrl-F2', kbCtrlF2, sci1Esc;
-'Копирование документа из буфера', cmRestoreDoc, 'Копировать сохраненный в буфере документ', hcctxSoprRestoreDoc, 'Ctrl-F3', kbCtrlF3, sci1Esc;
-----------;
= 'Печать', 'Печать документа',,sci1Esc;
 {
  -'Печать документа', cmPrintDoc, 'Печать текущего документа', hcctxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
  -'Печать документа в FastReport', cmValue35, 'Печать текущего документа в FastReport', hcctxSoprPrintDoc, '',, sci1Esc;
  -----------;
  -'Печать накладной', cmValue31, 'Печать накладной', hcSkladLMPrintNaklDopForms, '', , sci1Esc;
 }
-----------;
-'Группы платежных средств', cmValue1, 'Привязка группы платежных средств', hcSklLMDogPaymentMeanGroup, '', , sci1Esc;
-----------;
-'Просмотр операции НМА'   , cmValue4, 'Открытие сформированной операции НМА на редактирование', , '', , sci1Esc;
-----------;
- 'Экспорт', cmExp, 'Экспорт документов', hcSwiftMAll, 'Alt-O', kbAltO, sci1Esc;
- 'Импорт', cmImp, 'Импорт документов', hcSwiftMAll, 'Alt-I', kbAltI, sci1Esc;
- 'Протокол', cmIEHist, 'Протокол экспорта/импорта', hcSwiftMAll, 'Alt-H', kbAltH, sci1Esc;
}

//********************************************************************************
// Для накладной на внутреннее перемещение
#doc
Локальное меню главного окна интерфейса (Для накладной на внутреннее перемещение)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprMovKatSopr_HotKeys Menu
{
-'Расширенная информация', cmAttrib, 'Открыть окно расширенной информации', , 'Ctrl-Enter', kbCtrlEnter, sci1Esc;
-'Изменить дескриптор', cmManagerID, 'Изменение/установка дескриптора пользователя', hcIGetDescr, 'Alt-M', kbAltM, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации документа', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к документу', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
------------;
= 'Печать', 'Печать документа',,sci1Esc;
 {
  - 'Печать документа', cmPrintDoc, 'Печать текущего документа', hcctxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать документа в FastReport', cmValue35, 'Печать текущего документа в FastReport', hcctxSoprPrintDoc, '',, sci1Esc;
  -----------;
  - 'Печать накладной', cmValue31, 'Печать накладной', hcSkladLMPrintNaklDopForms, '', , sci1Esc;
  -----------;
  - 'Справка по документу', cmPlansNo, 'Получение справки по документу в формате БизнесТекст', hcctxSoprSpravDoc, 'Alt+P', kbAltP, sci1Esc;
   }
-----------;
- 'Просмотр ордеров', cmAccording, 'Просмотр информации по сформированным ордерам документа', hcOrder4SoprVMain, 'Alt+S', kbAltS, sci1Esc;
-----------;
-'Группы платежных средств', cmValue1, 'Привязка группы платежных средств', hcSklLMDogPaymentMeanGroup, '', , sci1Esc;
-----------;
- 'Пересчет средних цен в документе', cmDocBas, 'Пересчет средних цен в документе', hcctxRecalcSrPrice, 'Alt+D', kbAltD, sci1Esc;
-'Установка цен из прайс-листа', cmSetFlag, 'Установка цен в спецификации из выбранного прайс-листа', hcCtxPriceIzm, '', , sci1Esc;
-----------;
-'Выбор партии для всех позиций документа', cmSelectPar, 'Выбор партии для всех позиций документа', hcSopr_SetOnePartyDoc, '', , sci1Esc;
-----------;
- 'Наличие МЦ в подразделении для списания...',cmNal,'Получение информации по наличию МЦ в подразделении для списания',hcSkladLocMNalMCPodr,'Alt+F',kbAltF,sci1Esc;
----------;
-'Разноска Объектов целевого учета по спецификации', cmVal8, 'Выбор Объектов целевого учета для нескольких позиций спецификации', hcUKS_RaznosPoSpesific, '', , sci1Esc;
-----------;
-'Отобразить спецификацию в виде сметы', cmValue60, 'Отобразить спецификацию в виде сметы', hcuks_Otobraz_Sp_VidSmet, '', , sci1Esc;
------------;
-'Сортировка МЦ', cmSortMC, 'Сортировка МЦ по наименованию или бар-коду', hcctxSortMC, 'Alt-R', kbAltR, sci1Esc;
-'Дублируемые позиции', cmDublSopr, 'Отчет по дублируемым позициям', hcctxDublSopr, 'Alt-O', kbAltO, sci1Esc;
-'Копирование спецификации', cmRecalcAllSums, 'Копирование спецификации по выбранным накладным', hcSklLocMVnNaklCopySpec, 'Alt-G', kbAltG, sci1Esc;
-'Копирование спецификации из ДО', cmValue61, 'Копирование спецификации из нескольких ДО',hcSkladLMCopySpecDO , '', , sci1Esc;
-'Распределение спецификации по партиям', cmValue59, 'Распределение спецификации по партиям',hcSkladLocMRasprSpecParty, '', , sci1Esc;
}

//********************************************************************************

#doc
Локальное меню главного окна интерфейса (только внутреннее перемещение 600)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprMovKatSopr600_HotKeys Menu
{
-'Расширенная информация', cmAttrib, 'Открыть окно расширенной информации', , 'Ctrl-Enter', kbCtrlEnter, sci1Esc;
-'Изменить дескриптор', cmManagerID, 'Изменение/установка дескриптора пользователя', hcIGetDescr, 'Alt-M', kbAltM, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации документа', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к документу', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
-----------;
= 'Печать', 'Печать документа',,sci1Esc;
 {
  -'Печать документа', cmPrintDoc, 'Печать текущего документа', hcctxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
  -'Печать документа в FastReport', cmValue35, 'Печать текущего документа в FastReport', hcctxSoprPrintDoc, '',, sci1Esc;
  -----------;
  -'Печать накладной', cmValue31, 'Печать накладной', hcSkladLMPrintNaklDopForms, '', , sci1Esc;
  -----------;
  - 'Справка по документу', cmPlansNo, 'Получение справки по документу', hcctxSoprSpravDoc, 'Alt+P', kbAltP, sci1Esc;
    -----------;
  -'Ведомость выдачи МЦ на нужды учреждения', cmValue32, 'Ведомость выдачи МЦ на нужды учреждения (для бюджетных организаций)', hcSkladLMListMC4InstitNeeds, '', , sci1Esc;
  -'Ведомость выдачи МЦ на нужды учреждения Excel', cmValue28, 'Ведомость выдачи МЦ на нужды учреждения (для бюджетных организаций)', hcSkladLMListMC4InstitNeeds, '', , sci1Esc;
  -'Настройка Excel шаблона', cmValue33, 'Ведомость выдачи МЦ на нужды учреждения (для бюджетных организаций)', hcSkladLMTuneExcelShabl, '', , sci1Esc;
 }
-----------;
- 'Просмотр ордеров', cmAccording, 'Просмотр информации по сформированным ордерам документа', hcOrder4SoprVMain, 'Alt+S', kbAltS, sci1Esc;
-----------;
-'Группы платежных средств', cmValue1, 'Привязка группы платежных средств', hcSklLMDogPaymentMeanGroup, '', , sci1Esc;
------------;
 = 'План внутреннего перемещения МЦ', 'Операции с планом перемещения МЦ в ячейках хранения', , sci1Esc;
{
  -'Удаление плана', cmClearBoxPlan, 'Удаление плана перемещения для всех спецификаций накладной', hcSkladPlanMoveMC, , , sci1Esc;
  -'Печать плана', cmPrintBoxplan, 'Печать сформированного плана перемещения МЦ', hcSkladPlanMoveMC, , , sci1Esc;
}
-----------;
- 'Пересчет средних цен в документе', cmDocBas, 'Пересчет средних цен в документе', hcctxRecalcSrPrice, 'Alt+D', kbAltD, sci1Esc;
-'Установка цен из прайс-листа', cmSetFlag, 'Установка цен в спецификации из выбранного прайс-листа', hcCtxPriceIzm, '', , sci1Esc;
-----------;
-'Выбор партии для всех позиций документа', cmSelectPar, 'Выбор партии для всех позиций документа', hcSopr_SetOnePartyDoc, '', , sci1Esc;
-----------;
- 'Наличие МЦ в подразделении для списания...',cmNal,'Получение информации по наличию МЦ в подразделении для списания',hcSkladLocMNalMCPodr,'Alt+F',kbAltF,sci1Esc;
-----------;
- 'Автораспределение МЦ по разрезу...', cmAlt2, 'Автораспределение спецификации по тек. наличию МЦ с учетом выбранного разреза хранения', hci_nakl_avtorasped_razrez, 'Alt+2', kbAlt2, sci1Esc;
-----------;
-'Разноска Объектов целевого учета по спецификации', cmVal8, 'Выбор Объектов целевого учета для нескольких позиций спецификации', hcUKS_RaznosPoSpesific, '', , sci1Esc;
-----------;
-'Отобразить спецификацию в виде сметы', cmValue60, 'Отобразить спецификацию в виде сметы', hcuks_Otobraz_Sp_VidSmet, '', , sci1Esc;
#ifdef Kachestvo2
  #define _Qual_KS_LM_600_
  #include QualSopr.vpp
#end // #ifdef Kachestvo2
------------;
-'Сортировка МЦ', cmSortMC, 'Сортировка МЦ по наименованию или бар-коду', hcctxSortMC, 'Alt-R', kbAltR, sci1Esc;
-'Дублируемые позиции', cmDublSopr, 'Отчет по дублируемым позициям', hcctxDublSopr, 'Alt-O', kbAltO, sci1Esc;
-'Копирование спецификации', cmRecalcAllSums, 'Копирование спецификации по выбранным накладным', hcSklLocMVnNaklCopySpec, 'Alt-G', kbAltG, sci1Esc;
-'Копирование спецификации из ДО', cmValue61, 'Копирование спецификации из нескольких ДО',hcSkladLMCopySpecDO , '', , sci1Esc;
-'Распределение спецификации по партиям', cmValue59, 'Распределение спецификации по партиям',hcSkladLocMRasprSpecParty , '', , sci1Esc;
}

//********************************************************************************
//для передачи в ОС
#doc
Локальное меню главного окна интерфейса (для передачи в ОС)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprMovKatSopr601_HotKeys Menu
{
-'Расширенная информация', cmAttrib, 'Открыть окно расширенной информации', , 'Ctrl-Enter', kbCtrlEnter, sci1Esc;
-'Изменить дескриптор', cmManagerID, 'Изменение/установка дескриптора пользователя', hcIGetDescr, 'Alt-M', kbAltM, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации документа', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к документу', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
-----------;
= 'Печать', 'Печать документа',,sci1Esc;
 {
  - 'Печать документа', cmPrintDoc, 'Печать текущего документа', hcctxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать документа в FastReport', cmValue35, 'Печать текущего документа в FastReport', hcctxSoprPrintDoc, '',, sci1Esc;
  -----------;
  - 'Печать накладной', cmValue31, 'Печать накладной', hcSkladLMPrintNaklDopForms, '', , sci1Esc;
  -----------;
  - 'Справка по документу', cmPlansNo, 'Получение справки по документу', hcctxSoprSpravDoc, 'Alt+P', kbAltP, sci1Esc;
   }
-----------;
-'Просмотр ордеров', cmAccording, 'Просмотр информации по сформированным ордерам документа', hcOrder4SoprVMain, 'Alt-S', kbAltS, sci1Esc;
-'Группы платежных средств', cmValue1, 'Привязка группы платежных средств', hcSklLMDogPaymentMeanGroup, '', , sci1Esc;
-'Просмотр операции ОС'    , cmValue4, 'Открытие сформированной операции ОС на редактирование', , '', , sci1Esc;
-----------;
-'Пересчет средних цен в документе', cmDocBas, 'Пересчет средних цен в документе', hcctxRecalcSrPrice, 'Alt-D', kbAltD, sci1Esc;
-'Установка цен из прайс-листа', cmSetFlag, 'Установка цен в спецификации из выбранного прайс-листа', hcCtxPriceIzm, '', , sci1Esc;
-----------;
-'Выбор партии для всех позиций документа', cmSelectPar, 'Выбор партии для всех позиций документа', hcSopr_SetOnePartyDoc, '', , sci1Esc;
-----------;
- 'Наличие МЦ в подразделении для списания',cmNal,'Получение информации по наличию МЦ в подразделении для списания',hcSkladLocMNalMCPodr,'Alt+F',kbAltF,sci1Esc;
-----------;
-'Разноска Объектов целевого учета по спецификации', cmVal8, 'Выбор Объектов целевого учета для нескольких позиций спецификации', hcUKS_RaznosPoSpesific, '', , sci1Esc;

-----------;
-'Отобразить спецификацию в виде сметы', cmValue60, 'Отобразить спецификацию в виде сметы', hcuks_Otobraz_Sp_VidSmet, '', , sci1Esc;
------------;
-'Сортировка МЦ', cmSortMC, 'Сортировка МЦ по наименованию или бар-коду', hcctxSortMC, 'Alt-R', kbAltR, sci1Esc;
-'Дублируемые позиции', cmDublSopr, 'Отчет по дублируемым позициям', hcctxDublSopr, 'Alt-O', kbAltO, sci1Esc;
-'Копирование спецификации', cmRecalcAllSums, 'Копирование спецификации по выбранным накладным', hcSklLocMVnNaklCopySpec, 'Alt-G', kbAltG, sci1Esc;
}

//********************************************************************************
//для передачи в НМА
#doc
Локальное меню главного окна интерфейса (для передачи в НМА)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprMovKatSopr605_HotKeys Menu
{
-'Расширенная информация', cmAttrib, 'Открыть окно расширенной информации', , 'Ctrl-Enter', kbCtrlEnter, sci1Esc;
-'Изменить дескриптор', cmManagerID, 'Изменение/установка дескриптора пользователя', hcIGetDescr, 'Alt-M', kbAltM, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации документа', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к документу', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
-----------;
= 'Печать', 'Печать документа',,sci1Esc;
 {
  - 'Печать документа', cmPrintDoc, 'Печать текущего документа', hcctxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать документа в FastReport', cmValue35, 'Печать текущего документа в FastReport', hcctxSoprPrintDoc, '',, sci1Esc;
  -----------;
  - 'Печать накладной', cmValue31, 'Печать накладной', hcSkladLMPrintNaklDopForms, '', , sci1Esc;
  -----------;
  - 'Справка по документу', cmPlansNo, 'Получение справки по документу', hcctxSoprSpravDoc, 'Alt+P', kbAltP, sci1Esc;
 }
-----------;
-'Просмотр ордеров', cmAccording, 'Просмотр информации по сформированным ордерам документа', hcOrder4SoprVMain, 'Alt-S', kbAltS, sci1Esc;
-'Группы платежных средств', cmValue1, 'Привязка группы платежных средств', hcSklLMDogPaymentMeanGroup, '', , sci1Esc;
-'Просмотр операции НМА'   , cmValue4, 'Открытие сформированной операции НМА на редактирование', , '', , sci1Esc;
-----------;
-'Пересчет средних цен в документе', cmDocBas, 'Пересчет средних цен в документе', hcctxRecalcSrPrice, 'Alt-D', kbAltD, sci1Esc;
-'Установка цен из прайс-листа', cmSetFlag, 'Установка цен в спецификации из выбранного прайс-листа', hcCtxPriceIzm, '', , sci1Esc;
-'Выбор партии для всех позиций документа', cmSelectPar, 'Выбор партии для всех позиций документа', hcSopr_SetOnePartyDoc, '', , sci1Esc;
-'Наличие МЦ в подразделении для списания',cmNal,'Получение информации по наличию МЦ в подразделении для списания',hcSkladLocMNalMCPodr,'Alt-F',kbAltF,sci1Esc;
----------;
-'Разноска Объектов целевого учета по спецификации', cmVal8, 'Выбор Объектов целевого учета для нескольких позиций спецификации', hcUKS_RaznosPoSpesific, '', , sci1Esc;
-----------;
-'Отобразить спецификацию в виде сметы', cmValue60, 'Отобразить спецификацию в виде сметы', hcuks_Otobraz_Sp_VidSmet, '', , sci1Esc;
------------;
-'Сортировка МЦ', cmSortMC, 'Сортировка МЦ по наименованию или бар-коду', hcctxSortMC, 'Alt-R', kbAltR, sci1Esc;
-'Дублируемые позиции', cmDublSopr, 'Отчет по дублируемым позициям', hcctxDublSopr, 'Alt-O', kbAltO, sci1Esc;
-'Копирование спецификации', cmRecalcAllSums, 'Копирование спецификации по выбранным накладным', hcSklLocMVnNaklCopySpec, 'Alt-G', kbAltG, sci1Esc;
}


//********************************************************************************
// Для накладной на внутреннее перемещение
#doc
Локальное меню главного окна интерфейса (Для накладной на внутреннее перемещение)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprMovSpSopr_HotKeys Menu
{
-'Расширенная информация', cmAttrib, 'Открыть окно расширенной информации', hcSklRasInform, 'Ctrl-Enter', kbCtrlEnter, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации к позиции', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к позиции', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
----------;
-'Наличие МЦ', cmNal, 'Получение информации по наличию МЦ', hcctxSoprNalMC, 'Alt-F', kbAltF, sci1Esc;
-'Просмотр остатков МЦ', cmShowAll, 'Получение информации об остатках МЦ', hcAllASaldDat, 'Ctrl +', kbCtrlGrayPlus, sci1Esc;
----------;
-'Выбор из прайс-листа/текущих остатков', cmRestoreDoc, 'Выбор позиций из прайс-листа/текущих остатков', hcSklViborPrise, 'Ctrl-F3', kbCtrlF3, sci1Esc;
-'Выбор партии из текущих остатков', cmSaveDoc, 'Выбор партии МЦ из текущих остатков', hciGTekOst, 'Ctrl-F2', kbCtrlF2, sci1Esc;
----------;
-'Дублирование позиции', cmValue9, 'Дублирование текущей позиции', hcSellDublPos, '', , sci1Esc;
- 'Объединение одноименных позиций накладной', cmVal4, 'Объединение одноименных позиций накладной', hcUnionSpecification, , , sci1Esc;
----------;
-'Вставить все МЦ из остатков на дату', cmValue15, 'Вставить все МЦ из остатков по текущему разрезу хранения на дату документа', hcSkladLocMNaklInsMCFromOst, '', , sci1Esc;
-'Резервирование МЦ по позиции', cmSortMC, 'Резервирование МЦ по текущий позиции документа', hcSkladReservMCPos, 'Alt-R', kbAltR, sci1Esc;//R
-----------;
-'Целевой учет', cmIerarchy, '', hcUKS_LokM_Chelev, 'Ctrl-U', kbCtrlU, sci1Esc;
}

//********************************************************************************

#doc
Локальное меню окна редактирования интерфейса (только внутреннее перемещение 600)<link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
SoprMovSpSopr600_HotKeys Menu
{
-'Расширенная информация', cmAttrib, 'Открыть окно расширенной информации', hcSklRasInform, 'Ctrl-Enter', kbCtrlEnter, sci1Esc;
-'Внешняя классификация', cmPickClass, 'Установка внешней классификации к позиции', hcGkatalM1ExtClass, 'Alt-C', kbAltC, sci1Esc;
-'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к позиции', hcGkatalM1Attr, 'Alt-A', kbAltA, sci1Esc;
----------;
-'Наличие МЦ', cmNal, 'Получение информации по наличию МЦ', hcctxSoprNalMC, 'Alt-F', kbAltF, sci1Esc;
-'Просмотр остатков МЦ', cmShowAll, 'Получение информации об остатках МЦ', hcAllASaldDat, 'Ctrl +', kbCtrlGrayPlus, sci1Esc;
-'Перечень серийных номеров',cmXchangeMCSetup,'',hcManufLocMSerNumList,'',,sci1Esc;
------------;
-'Редактирование плана перемещения МЦ', cmHandBoxPlan, 'Ручное редактирование плана перемещения МЦ в ячейках хранения', hcSkladPlanMoveMC, , , sci1Esc;
----------;
- 'Выбор из прайс-листа/текущих остатков', cmRestoreDoc, 'Выбор позиций из прайс-листа/текущих остатков', hcSklViborPrise, 'Ctrl+F3', kbCtrlF3, sci1Esc;
- 'Выбор партии из текущих остатков', cmSaveDoc, 'Выбор партии МЦ из текущих остатков', hciGTekOst, 'Ctrl+F2', kbCtrlF2, sci1Esc;
------------;
-'Дублирование позиции', cmValue9, 'Дублирование текущей позиции', hcSellDublPos, '', , sci1Esc;
- 'Объединение одноименных позиций накладной', cmVal4, 'Объединение одноименных позиций накладной', hcUnionSpecification, , , sci1Esc;
------------;
-'Вставить все МЦ из остатков на дату', cmValue15, 'Вставить все МЦ из остатков по текущему разрезу хранения на дату документа', hcSkladLocMNaklInsMCFromOst, '', , sci1Esc;
-'Резервирование МЦ по позиции', cmSortMC, 'Резервирование МЦ по текущий позиции документа', hcSkladReservMCPos, 'Alt-R', kbAltR, sci1Esc;//R
#ifdef Kachestvo2
  #define _Qual_SS_LM_600_
  #include QualSopr.vpp
#end // #ifdef Kachestvo2
-----------;
-'Целевой учет', cmIerarchy, '', hcUKS_LokM_Chelev, 'Ctrl-U', kbCtrlU, sci1Esc;
}

//********************************************************************************

#doc
Элемент локального меню для выбора сопутствующей услуги <link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
TrSopUsl Menu
{
 - 'Сопутствующая услуга (~%~ к МЦ)', cmAllVo;
 - 'Сопутствующая услуга (~с~умма к МЦ)', cmAllVos;
 - 'Сопутствующая услуга (для распределения по ~в~есу)', cmAllVosM;
 - 'Сопутствующая услуга (для распределения по ~о~бъему)', cmAllVosV;
}

//********************************************************************************

#doc
Элемент локального меню для расчета стоимости услуги <link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
mnuSoprUslMov Menu
{
 -'Расчет стоимости услуги', cmValue20, 'Отчет - Расчет стоимости услуги', hccuMCalc, '', , sci1Esc;
 -'Параметры расчетной услуги', cmValue17, 'Просмотр и изменение параметров расчетной услуги', hccuMInPar, '', , sci1Esc;
}

//********************************************************************************

#doc
Элемент локального меню для просмора путевых листов <link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
mnuSoprMovSpSoprPutLst Menu
{
-'Просмотр путевых листов', cmSeePutLst, , , '', , sci1Esc;
}

#doc
Элемент локального меню "Дополнительные функции локального меню"  <link Interface L_Sklad::SopInMov>L_Sklad::SopInMov - Список накладных на внутреннее перемещение</link>
#end
Akt_MoveLoc Menu  //lf_
{
  = 'Дополнительные функции локального меню','Выполнение пользовательских алгоритмов, указанных в настройке',,sci1Esc;
   {
     -'Функция 1',cmValue21,'Выполнение пользовательского алгоритма, заданного для функции 1',hcZakaz_UserLM,'',,sci1Esc;
     -'Функция 2',cmValue22,'Выполнение пользовательского алгоритма, заданного для функции 2',hcZakaz_UserLM,'',,sci1Esc;
     -'Функция 3',cmValue23,'Выполнение пользовательского алгоритма, заданного для функции 3',hcZakaz_UserLM,'',,sci1Esc;
     -'Функция 4',cmValue24,'Выполнение пользовательского алгоритма, заданного для функции 4',hcZakaz_UserLM,'',,sci1Esc;
   }
}
//********************************************************************************

#end // _USE_SOPIN_OBJ_

ForM11_rtf DIALOG

Fields
  KolStrM ('Количество строк в форме'): word;
  KolStrA ('Количество строк в форме'): word;

Buttons
  cmOk, Default, , 'Применить настройку';
  cmCancel, , , 'Отмена';

<<'Настройка печати'

 `Количество строк на нечетных страницах` .@@@@@
 `Количество строк на четных страницах  ` .@@@@@

         <. Применить .>  <. Отмена .>
>>

//******************************************************************************
