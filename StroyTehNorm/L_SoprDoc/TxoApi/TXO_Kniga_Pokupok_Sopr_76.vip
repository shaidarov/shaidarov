/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,2000 корпорация ГАЛАКТИКА                    ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Бухгалтерский контур                                      ║
 ║ Версия        : 8.1x                                                      ║
 ║ Назначение    : Создаёт документ для учёта НДС и запись в книге Покупок   ║
 ║                 из Сопроводительного документа                            ║
 ║ Ответственный : Шайдаров Игорь Александрович                              ║
 ║ Параметры     : нет                                                       ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#include TxoApi.vih // Подключение интерфейса TxoApi
#Component "F_TXO"

VipInterface TXO_Kniga_Pokupok_Sopr_76 implements ObjTxoIdentPlugin Licensed (free);

Interface    TXO_Kniga_Pokupok_Sopr_76;

#include  E:\!StroyTehNorm\!project\L_SoprDoc\TxoApi\VarSopr.var

create view
as select
  *
from
     BookPrZk
   , KatSopr
   , SoprHoz
   , SchFact
   , SchFact   SchFact_G
   , SpSopr
   , SpDocNal


where
((
       CurSoprDoc         == KatSopr.nRec
   and KatSopr.VidSopr    == SoprHoz.TipDoc
   and KatSopr.nRec       == SoprHoz.cSoprDoc
   and KatSopr.cSchFact   == SchFact.nRec
   and SchFact.nRec       == BookPrZk.cSchFact
   and KatSopr.nRec       == SpSopr.cSopr
   and SpSopr.nRec        == SpDocNal.cSpDoc    (noindex)
   and coGetTune('Nalog.cNalogNDS')
                          == SpDocNal.cNalog
))
;



function GetInfo : string;
{
   GetInfo := 'Создаёт запись в книге покупок';
}


Window wParam 'Задайте параметры идентификатора' (,,) EscClose;
  Show at (2,12,75,20);
    Screen scParam (,,);

      Fields
        Par_Rasch ('Выберите требуемый результат расчета идентификатора',,sci1EnEsc) :
            [LIST 0  'Создание счётов-фактур и записи в книге покупок',
                  1  'Сумма записи в книге по ставке НДС 10%',
                  2  'Сумма записи в книге по ставке НДС 18%',
                  3  'Сумма записи в книге без НДС'], protect;

<<
                       `Основной параметр результата`

      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>

End;

HandleEvent // window

 cmDefault : CloseWindow(wParam);

End;  // HandleEvent
End;  // window


function ParamMaster : string;
{
   // вызов окошка, чтобы помочь пользователю заполнить строку дополнительных параметров идентификатора
   RunWindow(wParam);
   PackFields;
   case Par_Rasch of
     0  : ParamMaster := '[Рез:InsUp]';
     1  : ParamMaster := '[Рез:НДС10]';
     2  : ParamMaster := '[Рез:НДС18]';
     3  : ParamMaster := '[Рез:безНДС]';
   end;
}

procedure ParamParser(hTxo : longint);
{
   var i : Longint;

   for(i:=1; i<=TxoParamCount(hTxo); i:=i+1)
   {  case TxoParamName(hTxo,i) of
        'РЕЗ': {
                 case TxoParamValue(hTxo,i) of
                    'INSUP'   : Par_Rasch := 0;
                    'НДС10'   : Par_Rasch := 1;
                    'НДС18'   : Par_Rasch := 2;
                    'БЕЗНДС'  : Par_Rasch := 3;
                 end;
               }
      end;
   }
}




procedure StoreCycles(hTxo : longint; buf : TTxoApiInfoDoc);
{
    CurSoprDoc := buf.cSoprDoc;

    ParamParser(hTxo);


   InitGetCur;
   Case Par_Rasch of
        0  : {

#include E:\!StroyTehNorm\!project\L_SoprDoc\TxoApi\Loop_SpSopr.vpp

            ClearBuffer(#SchFact);
            SchFact.DIRECT    := word(2);
            SchFact.STATUS    := word(1);
            SchFact.TIPUSER   := word(10003);
            SchFact.DFACT     := if (KatSopr.VidSopr=111, KatSopr.dDover, KatSopr.dSopr);
            SchFact.DPOST     := if (KatSopr.VidSopr=111, KatSopr.dDover, KatSopr.dSopr);
            SchFact.SCHYEAR   := if (KatSopr.VidSopr=111, Year(KatSopr.dDover), Year(KatSopr.dSopr));
            SchFact.NUM       := if (KatSopr.VidSopr=111, KatSopr.nDover, KatSopr.nSopr);
            SchFact.CORG      := KatSopr.cOrg;
            SchFact.cSoprHoz  := SoprHoz.nRec;
            SchFact.cBaseDoc  := KatSopr.cSchFact;
            SchFact.cStepDoc  := KatSopr.cStepDoc;
            SchFact.CRECS[1]  := KatSopr.cDogovor;

            SchFact.SUM[1]    := St_18;
            SchFact.SUM[2]    := NDS_18;
            SchFact.SUM[3]    := St_18 + NDS_18;

            SchFact.SUM[4]    := St_10;
            SchFact.SUM[5]    := NDS_10;
            SchFact.SUM[6]    := St_10 + NDS_10;

            SchFact.SUM[11]   := St_18;
            SchFact.SUM[12]   := NDS_18;
            SchFact.SUM[13]   := St_18 + NDS_18;

            SchFact.SUM[14]   := St_10;
            SchFact.SUM[15]   := NDS_10;
            SchFact.SUM[16]   := St_10 + NDS_10;

            SchFact.SUM[23]   := St_R;
            SchFact.SUM[8]    := NDS_R;
            SchFact.SUM[9]    := St_R + NDS_R;


            SchFact.SUM[21]   := St_10 + St_18 + NDS_10 + NDS_18 + St_R + NDS_R;
            SchFact.SUM[22]   := St_10 + St_18 + NDS_10 + NDS_18 + St_R + NDS_R;

            SchFact.SUM[30]   := 1;
            SchFact.SUMIN[5]  := St_10 + St_18 + NDS_10 + NDS_18 + St_R + NDS_R;
            SchFact.SUMIN[10] := St_10 + St_18 + NDS_10 + NDS_18 + St_R + NDS_R;
            SchFact.Summa     := St_10 + St_18 + NDS_10 + NDS_18 + St_R + NDS_R;
            SchFact.SummaReg  := 0;

            SchFact.PRSTAV    := word(2);

            if (UpDate current SchFact = tsOK) {}
            if (Insert current SchFact = tsOK) {}

             KatSopr.cSchFact := SchFact.nRec
             if (UpDate current KatSopr = tsOK) {}

         ClearBuffer(#BookPrZk)

         BookPrZk.TipUser    := 7504;
         BookPrZk.cSchFactS  := SchFact_G.nRec;

         BookPrZk.cOrg       := KatSopr.cOrg;
         BookPrZk.cSchFact   := KatSopr.cSchFact;
         BookPrZk.Descr      := 'VER';
         BookPrZk.Direct     := 2;
         BookPrZk.dOpl       := SchFact_G.dPost;
         BookPrZk.dOpr       := SchFact.dPost;
         BookPrZk.dReg       := If(SchFact.dPost > SchFact_G.dPost, SchFact.dPost, SchFact_G.dPost);
         BookPrZk.Num        := KatSopr.nSopr;
         BookPrZk.SubTip     := 4;

         BookPrZk.Sum[1]  := SchFact.SUM[1]  ;
         BookPrZk.Sum[2]  := SchFact.SUM[2]  ;
         BookPrZk.Sum[3]  := SchFact.SUM[3]  ;

         BookPrZk.SUM[4]  := SchFact.SUM[4]  ;
         BookPrZk.SUM[5]  := SchFact.SUM[5]  ;
         BookPrZk.SUM[6]  := SchFact.SUM[6]  ;

         BookPrZk.SUM[23] := SchFact.SUM[23] ;
         BookPrZk.SUM[8]  := SchFact.SUM[8]  ;
         BookPrZk.SUM[9]  := SchFact.SUM[9]  ;

         BookPrZk.Sum[11] := SchFact.SUM[11] ;
         BookPrZk.Sum[12] := SchFact.SUM[12] ;
         BookPrZk.Sum[13] := SchFact.SUM[13] ;

         BookPrZk.Sum[14] := SchFact.SUM[14] ;
         BookPrZk.Sum[15] := SchFact.SUM[15] ;
         BookPrZk.Sum[16] := SchFact.SUM[16] ;

         BookPrZk.Sum[21] := SchFact.SUM[21] ;
         BookPrZk.Sum[22] := SchFact.SUM[22] ;

         BookPrZk.Summa   := SchFact.Summa   ;

         if (Insert current BookPrZk = tsOK) {}
         if (UpDate current BookPrZk = tsOK) {}


             } // CASE 0:

        1  : {

         If (GetFirst BookPrZk = tsOK)
           Do
           {

            NDS_10 := 0;
            NDS_10 := BookPrZk.Sum[5];

             TxoBodyClear(hTxo);
             TxoBodySetSum (hTxo, NDS_10,  0, 0);
             TxoBodyAddKau (hTxo, wFlKau_Auto, 10001, BookPrZk.nRec);
             TxoBodyAddDate(hTXO, wflKau_Mode1, BookPrZk.dReg);
             TxoBodyInsert (hTxo);
           }
           While (GetNext BookPrZk = tsOK)
             }

        2  : {

         If (GetFirst BookPrZk = tsOK)
           Do
           {


            NDS_18 := 0;
            NDS_18 := BookPrZk.Sum[2];

             TxoBodyClear(hTxo);
             TxoBodySetSum (hTxo, NDS_18,  0, 0);
             TxoBodyAddKau (hTxo, wFlKau_Auto, 10001, BookPrZk.nRec);
             TxoBodyAddDate(hTXO, wflKau_Mode1, BookPrZk.dReg)
             TxoBodyInsert (hTxo);
           }
           While (GetNext BookPrZk = tsOK)
             }

        3  : {

         If (GetFirst BookPrZk = tsOK)
           Do
           {


            NDS_R := 0;
            NDS_R := BookPrZk.Sum[1] + BookPrZk.Sum[7];   // просто сумма без НДС

             TxoBodyClear(hTxo);
             TxoBodySetSum (hTxo, NDS_R,  0, 0);
             TxoBodyAddKau (hTxo, wFlKau_Auto, 10001, BookPrZk.nRec);
             TxoBodyAddDate(hTXO, wflKau_Mode1, BookPrZk.dReg)
             TxoBodyInsert (hTxo);
           }
           While (GetNext BookPrZk = tsOK)
             }


    end; // Case
}

handleevent
end;

end.
