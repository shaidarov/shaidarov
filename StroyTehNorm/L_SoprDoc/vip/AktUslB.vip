//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Логистика - сопроводительные документы
// Акт на закупку услуг (интерфейс)
//******************************************************************************

#define _AKTUSLB_VIP
#define _AKTUSL_FR
#define _USE_SERIAL_
#define _Putlst_Attr_
#define _LINKMTR2SPEC_
#include OperNakl.Vih
#include RaschActKoeff.vih
#include ExtAttr.vih
#include EntTranspAt.vih
#include RasNeotg.vih
#include oDecl.vih
#include KPC_Func.vih  // Функции для пересчета цен по коэффициентам пересчета цен (КПЦ)
#include ChkBuildDates.vih // Процедуры контроля сроков строительства объектов строительства
#include SpecifAsSmeta.vih // Представление спецификации документа в виде иерархии по затратам.
#include BaseCostStorage.vih // Методы для работы с базовыми ценами, хранимыми в спецификации документа.
#include DelCurSpSopr.vih
#include addsumwn.vih
#include DocOfObj.vih
#include smetaserv.vih // Пересчет смет.

#include NalogRegDoc.vih    // igor

#include GetKau.vih
#include AttrTablePick.vih
#include ShowKau.vpp


// Объект oBaseCostStorage - Методы для работы с базовыми ценами, хранимыми в спецификации документа.
#include BaseCostStorage.var
#include SpecifAsSmeta.inc // Константы способов отображения спецификации АВР в иерархическом виде

#include sopconst.inc  // Константы для сопроводительных документов
//******************************************************************************

#doc
Назначение:
  Акт на закупку услуг

Параметры:
  TypeSopr - Тип сопроводительного документа
  pNRec    - Указатель для автоматической установки на запись
#end

//******************************************************************************

Interface AktUslb 'Акты на прием услуг' EscClose, Cyan;
  Show at (,,110,31)

const
  c_AttrSchetZatr = comp(11);
  c_AttrElemZatr  = comp(281474976710695);
end;

#include RasNeotg.var

// Объект oSpecifAsSmeta - представление спецификации документа в виде иерархии по затратам.
#include SpecifAsSmeta.var

//******************************************************************************

Table STRUCT AktPIW "Акт выполненных монтажных работ"
(
  SpSoprnRec    : comp   "SpSopr.NRec",
  NameGrUsl     : string "наименование группы услуги",
  NameUsl       : string "наименование услуги",
  cGroupUsl     : comp   "ссылка на группу услуг",
  KSName        : string "наименование объекта строительства",
  Smeta         : double "смета",
  Summa         : double "",
  SumNal        : double "", // ПиР 102.38217
  SumNDS        : double ""
)
with index
(
  AktPIW01 = NameGrUsl + NameUsl + cGroupUsl
);


table struct mtSmetList "Список локальных смет текущего АВР"
(
  cSmeta: comp "ссылка на ЛС"
)
with index
(
  mtSmetList01 = cSmeta
);


//******************************************************************************

Function GetKAUField(pNum : integer) : string; Forward;

//******************************************************************************

#include sfconst.inc
#include KatSopr.var            // объектные переменные, общие для сопр.документов
#include RaschActKoeff.var
#include KPC_Func.var // Функции для пересчета цен по коэффициентам пересчета цен (КПЦ) (oKPC)
#include ChkBuildDates.var // процедуры контроля сроков строительства объектов - переменная oChkBuildDates

var
  ATD: AddressFunc;
  AddSum: AddSumWin new;
  Docs: DocOfObj new;
  Serv: SmetaServ;

#include SoprType.vpp

Function GetFirstSklad: boolean; forward;
Function OtkatToOldState(mess: boolean; TW: word): boolean; forward;
Procedure ProcDocAutoCalcUsl; forward;
Procedure CheckSumma(full: boolean); forward;
Function CanMakeOrder: Date; forward;
Function GetCalcFactMode: word; forward;
Function GetCurrPriceCalcMethod: word; forward;

Create view
var

#include soprvar.vpp           // Общие переменные сопроводительных документов
  pNrec        : comp;         // для автоустановки на документ
  SchFactFlag  : boolean;      // Признак корректности счета-фактуры
  MarkerNZ     : longint;
  IndexNZ      : longint;
  _KatSoprNrec : comp;         // для формирования услуг из накладных
  s_SimvRub    : string;
  UslOrMC      : boolean;
  BeginPDate,
  EndPDate     : Date;         //период для формир. реестра
  VidR         : word;         //вид реестра
  cFilterR     : comp;
  FilterR      : string;
  sVidr, scFilterR  : string;
  isEditSoprVisible
, FlagDelDooc
               : boolean;
  CurrSpSoprNRec    : comp;
  strTitle          : string;  //для смены заголовка интерфейса при использовании фильтра

  iGTD       : ISopIGTD;
  oGTD_Ukr   : GTD_Ukr;
  piExtAttr  : iExtAttr;
  iRecalcK   : IRecalcRelAkt;
  oEntTranspAt  : EntTranspAt;
  VidReport  : word;          // 0-отчеты в бизнес-тексте, 1 и более - отчеты в FR
  vfPriceSmeta
, vfPriceSmetaOld   : double;
  iOdecl       : declension;

  // Флаг. True - если модифицировались чувствительные для процедур контроля сроков строительства поля:
  // дата выписки АВР - KatSopr.dSopr; объект строительства, связанный с позицией спецификации
  isCBDSensitiveModified: boolean;
  saveKatSoprNrec: tNRec; // предыдущее значение KatSopr.nRec, используемое в cmPositionChanged

  saveSumDoc: double; // значение суммы по документу при открытии документа. Переменная служит для определения
                     // того, менялся ли перечень и объем ресурсов спецификации документа при закрытии окна
                     // документа или смене позиции в KatSopr
  isRFPSensitiveModified: boolean; // Флаг. True - если модифицировались чувствительные для процедуры расчета
                                   // фактических показателей АВР поля

 refAttrTablePick   : AttrTablePick;

As select
  // Определяет участие документа в расчетах факта. Используется в ListBox
  // Сохранять/получать значение режима необходимо ч-з методы доступа GetCalcFactMode, SetCalcFactMode
  GetCalcFactMode() ( FieldName = CalcFactModeField )

  // Поле хранит текущее значение режима расчета текущих цен
  // на основе базовых с использованием индексов для акта выполненных работ
  // Поле используется CheckBox-ом в scrHeader110
  // Сохранять/получать значение режима необходимо ч-з методы доступа GetCurrPriceCalcMethod, GetCurrPriceCalcMethod
, GetCurrPriceCalcMethod() ( FieldName = CurrPriceCalcMethodField )

, if( IsValid( tnTblBaseCost ), tblBaseCost.DopSum1, 0 )
    ( FieldName = baseCost )
//------------------------------------------------------------------------------
, if (SpSopr.PrVoz = 0, 'да', 'нет')
        ( FieldName = UchPriceOrd )
//------------------------------------------------------------------------------
, if (SearchMarker(MarkerNZ, KatSopr.NRec,IndexNZ), '√', ' ')
        ( FieldName = picked )
//------------------------------------------------------------------------------
, if (KatSopr.cVal = 0,
    if (s_SimvRub <> '', s_SimvRub, 'руб.'), KlVal.SimVolV)
        ( FieldName = Valut )
//------------------------------------------------------------------------------
, if (KatSopr.cVal = 0, SpSopr.Price * SpSopr.KolFact, SpSopr.VPrice * SpSopr.KolFact)
        ( FieldName = SumPrice )
//------------------------------------------------------------------------------
, if (KatSopr.cVal = 0, SoprOrdB.Price, SoprOrdB.VPrice)
        ( FieldName = SumPriceOrdB )
//------------------------------------------------------------------------------
, if (KatSopr.cVal = 0, KatSopr.Summa, KatSopr.SumVal)
        ( FieldName = Sum )
//------------------------------------------------------------------------------
, if (KatSopr.cVal = 0, SpSopr.rPrice, SpSopr.rVPrice)
        ( FieldName = Prv )
//------------------------------------------------------------------------------
, if (KatSopr.cVal = 0, SpSopr.rPrice, SpSopr.rVPrice)
        ( FieldName = SpSoprPrSum )
//------------------------------------------------------------------------------
, if (KatSopr.VidSopr = 114,
    if (KatSopr.VhodNal = 1, 'Налоги входят в цену МЦ', 'Налоги не входят в цену МЦ'),
    if (KatSopr.VhodNal = 1, 'Налоги входят в цену услуг', 'Налоги не входят в цену услуг'))
        ( FieldName = VhNal )
//------------------------------------------------------------------------------
, PrintNumber(KatSopr.Descr, KatSopr.NSopr)
        ( FieldName = NomDes )
//------------------------------------------------------------------------------
, PrintNumber(BaseDoc.Descr, BaseDoc.NoDoc)
        ( FieldName = BDNomDes )
//------------------------------------------------------------------------------
, if (KatSopr.cKatSopr = 0, ' ', 'связан с накладной №' + PrintNumber(KSSopr.Descr, KSSopr.NSopr))
        ( FieldName = BDNklDes )
//------------------------------------------------------------------------------
, if (SpSopr.cOtpEd = 0, KatEd.Name, if (wGetTune('Doc.BrAbbrEd') = 0, KatOtpEd.ABBR, KatOtpEd.Name))
        ( FieldName = OtpEd )
//------------------------------------------------------------------------------
, if (SpSopr.ManualTax = 1, 'ручные', 'расчетные')
        ( FieldName = AutoNalogs )
//------------------------------------------------------------------------------
, (string(SpSopr.SumNDS, 14, 2) + ' '+ if (s_SimvRub = '', 'руб.', s_SimvRub))
        ( FieldName = StrSumNal )
//------------------------------------------------------------------------------
, if (KatSopr.cVal = 0, SpSopr.SumNDS, SpSopr.SumVNDS)
        ( FieldName = SumSpNalog )
//--------------------------------------------------------------------------------
, if (KatSopr.cValut = 0, ' ', if (SpSopr.rVPrice = 0, 'Курс не определен',
     'Курс : '+string(CursVal.SumRubl / KlVal.SumValut, 14, 4)))
        ( FieldName = StrCurse )
//------------------------------------------------------------------------------
, if (KatSopr.cVal = 0, KatSopr.sNalogs, KatSopr.svNalogs)
        ( FieldName = DocNalSumma )
//------------------------------------------------------------------------------
, (UsersDoc.Name + ' №'+ SchFact.Num + ' (' +
     if (SchFact.Status = 0, 'Зарегистрирован',
     if (SchFact.Status = 1, 'Не оплачен','Не зарегистрирован')) + ')')
        ( FieldName = SchFactNum )
//------------------------------------------------------------------------------
, if (SpDocNal.cVal = 0, s_SimvRub, NalValut.SimvolV)
        ( FieldName = ValutNal )
//------------------------------------------------------------------------------
, if (KatStroy.tFinancier = word(0), if(IsValid(tnFinPodr), FinPodr.Name, ''),
    if(KatStroy.tFinancier = word(1), if(IsValid(tnFinancier), Financier.Name, ''),
      if(IsValid(tnFinFPCO), FinFPCO.Name, '')))
        ( FieldName = FinStru )
//------------------------------------------------------------------------------
, if (IsValid(tnKatStroy1), KatStroy1.Name, KatStroy.Name)
        ( FieldName = StroyName )
//------------------------------------------------------------------------------
, if (IsValid(tnKatStroy1),
    if (IsValid(tnKatPlace1), ATD.GetFullTerrName(KatPlace1.cCity)
        + if (KatPlace1.ZipCode <> 0, string(KatPlace1.ZipCode) + ', ', '') + KatPlace1.Address, ''),
    if (IsValid(tnKatPlace), ATD.GetFullTerrName(KatPlace.cCity)
        + if (KatPlace.ZipCode <> 0, string(KatPlace.ZipCode) + ', ', '') + KatPlace.Address, ''))
        ( FieldName = StroyAddr )
//------------------------------------------------------------------------------
, if (IsValid(tnSmetaStroy), SmetaStroy.NoSmet + ' : ' + SmetaStroy.Name, '')
        ( FieldName = SmetaMy )
//------------------------------------------------------------------------------
, if (IsValid(tnSmetaSpec), string(SmetaSpec.NPP) + ' (' + SmetaSpec.Code + ') '
                        + SmetaSpec.Name, '')
        ( FieldName = SmetaSpMy )
//------------------------------------------------------------------------------
, if (IsValid(tnSpDocSmeta), if(SpDocSmeta.TipRes = 1, 'Основная ЗП',
                                if(SpDocSmeta.TipRes = 2, 'ЗП машинистов',
                                  if(SpDocSmeta.TipRes = 3, 'Механизмы',
                                    if(SpDocSmeta.TipRes = 4, 'Материалы',
                                      if(SpDocSmeta.TipRes = 5, 'Сметная прибыль',
                                        if(SpDocSmeta.TipRes = 6, 'Накладные расходы', 'Коэффициент')))))), '')
        ( FieldName = SmetaResMy )
//------------------------------------------------------------------------------
, if (SpSopr.PrMC = 2, 'У',               //просто услуга
    if (SpSopr.PrMC = 3, '%',             //соп.услуга процент к стоимости
      if (SpSopr.PrMC = 4, 'С',           //соп.услуга сумма к стоимости
        if (SpSopr.PrMC = 5, 'В',         //соп.услуга распр.по весу
          if (SpSopr.PrMC = 6, 'О',       //соп.услуга распр.по обьему
            if (SpSopr.PrMC = 7, 'К',     //соп.услуга распр.по количеству
              if (SpSopr.PrMC = 8, 'КП',  //соп.услуга распр.по количеству позиций в документе
    '?')))))))
        ( FieldName = PrSopUsl )
//------------------------------------------------------------------------------
, if (KatSopr.cNote <> 0, KatNotes.Name,
    if (KatSopr.Status = 0, 'оформляемый', 'исполняемый'))
        ( FieldName = KatNotesName )
//------------------------------------------------------------------------------
, if (SoprOrdB.Kol > 1E-8,
    if (SpSopr.KolFact > 1E-8, SoprOrdB.Kol * 100 / SpSopr.KolFact, 100), 0)
        ( FieldName = Percent )
//------------------------------------------------------------------------------
, if (Percent > 0, SumPriceOrdB, 0)
        ( FieldName = PercentSumma )
//------------------------------------------------------------------------------
, if (GetFirstSklad, '   МЦ не отпущены',
    if (SklOrder.cSopr <> 0, 'МЦ отпущены ' + DateToStr(SklOrder.dOrd, 'DD/MM/YYYY'), '   МЦ не отпущены'))
        ( FieldName = OtpuskSklad )
//------------------------------------------------------------------------------
, 'Склад'
        ( FieldName = FieldSklad )
//------------------------------------------------------------------------------
, 'МОЛ'
        ( FieldName = FieldMOL )
//------------------------------------------------------------------------------
, 'МОЛ'
        ( FieldName = FieldMOL1 )
//------------------------------------------------------------------------------
, 'Подразделение'
        ( FieldName = FieldPodr )
//------------------------------------------------------------------------------
, if (KatSopr.TipSopr = 1, 'Акт подрядчика', 'Акт собственный')
        ( FieldName = FieldDirect )
//--------------------------------------------------------------------------------
, if (KatSopr.TipSopr = 1, '<--', '-->')
        ( FieldName = fsDirect )
//------------------------------------------------------------------------------
#define __HozOperViewName__
, if (IsValid(tnSoprHoz), iTxoBind.ShowName(SoprHoz.BufferP), '')
        ( FieldName = HozOperViewName )
//------------------------------------------------------------------------------
, if (KatSopr.cSchFact = 0, '', '+')
        ( FieldName = PrSF )
//------------------------------------------------------------------------------
, if ((SpSopr.wMcProp AND 1) <> 0, 'Н', 'С')
        ( FieldName = strOwnMc )
//------------------------------------------------------------------------------
, 'Форма расчета'
        (FieldName = FormRas)
//------------------------------------------------------------------------------
, if(wGetTune('Dog.DogNameInComment') = 0, Dogovor.NoDoc, Dogovor.NoDoc_Ext)
        ( FieldName = DogNoDoc )
//------------------------------------------------------------------------------
, GetKAUField(1)  ( FieldName = vsKau1 )
, GetKAUField(2)  ( FieldName = vsKau2 )
, GetKAUField(3)  ( FieldName = vsKau3 )
, GetKAUField(4)  ( FieldName = vsKau4 )
, GetKAUField(5)  ( FieldName = vsKau5 )
, GetKAUField(6)  ( FieldName = vsKau6 )
, GetKAUField(7)  ( FieldName = vsKau7 )
, GetKAUField(8)  ( FieldName = vsKau8 )
, GetKAUField(9)  ( FieldName = vsKau9 )
, GetKAUField(10) ( FieldName = vsKau10 )
, refAttrTablePick.sGetValue( coSpSopr, c_AttrSchetZatr, SpSopr.nRec )
           (FieldName = Attr_SchetZatr)

, refAttrTablePick.sGetValue( coSpSopr, c_AttrElemZatr, SpSopr.nRec )
           (FieldName = Attr_ElemZatr)

//------------------------------------------------------------------------------
, AddSumTune.*
, BaseDoc.NoDoc
, Financier.Name, FinPodr.Name
, KatMol.Name,    KatMolUKS.Name, KatNazna.Name
, KatOrg.Name,    KatOrgF.Name,   KatOrgT.Name
, KatOtpEd.*,     KatParty.Name,  KatPayment.Name
, KatPodr.Name,   KatPodr2.*,     KatPodrUKS.Name
, KatSopr.*,      KatStroy.*,     KatStroy1.*
, KatStroy2.*,    KatUsl.kod,     KatUSL.Name
, KlVal.SimvolV
, OrgVzr.Name,    OtvPodr.Name
, Persons.FIO
, SoprHoz.*,      SoprOrdB.*,     SpecZatr.*
, SpSopr.*
, ValDog.SimvolV
, SpStepRem.*
, KuratPodr.Name
, *

From
  AddSumTune
, AktPIW
, AttrNam     AttrNKaz
, AttrVal     AttrVKaz
, BaseDoc
, BookPrZk
, CalPlan
, CursVal     (CursVal05)
, DocInfo
, Dogovor
, DORes
, Dogovor     AppDogovor
, Dover
, FPCO        OtvPodr
, FPCO        FinFPCO
, GrSopr
, GrNal
, GroupUsl
, KatEd
, KatMC
, KatMol
, KatNazna
, KatNotes
, KatOrg
, KatOtpEd
, KatParty
, KatPayment
, KatPlace
, KatPodr
, KatSopr
, KatStroy
, KatUsl
, KauReff
, KlPrice
, KlVal
, Kontras
, KatMol      KatMol2
, KatMol      KatMolUKS
, KatOrg      Financier
, KatOrg      KatOrgF
, KatOrg      KatOrgT
, KatOrg      NalOrg
, KatOrg      OrgVzr
, KatOrgDescr KatOrgDescr1
, KatPlace    KatPlace1
, KatPodr     FinPodr
, KatPodr     KatPodr2
, KatPodr     KatPodrUKS
, KatSopr     KatSoprVZ
, KatSopr     KKSopr
, KatSopr     KSopr
, KatSopr     KSSopr
, KatSopr     RashNakl
, KatStroy    KatStroy1
, KatStroy    KatStroy2
, KatUsl      KatMCUKS
, KlVal       NalValut
, KlVal       ValDog
, KlVal       Vals
, ListPar
, NoNalMC
, NZAKAZ
, OBOROT
, Persons
, Pick
, PickPric
, PickSmeta
, PlPor
, Prices
, PutGsm
, ResOtgr     TTNResOtgr
, SaldoMc
, SaldoObj
, SchFact
, SklOrder
, SklOst
, SmetaSpec
, SmetaStroy
, SoprHoz
, SoprOrdB
, SpDocNal
, SpDocs
, SpDocSmeta
, SpecZatr
, SpOrder
, SpSopHoz
, SOPRHOZ     SOPRHOZ2
, SpSopr      (SpSopr02)
, SpStep
, StatLog
, SpSopr      SpSoprSmet
, SpSopr      SpSoprUKS
, SpSopr      SpSoprVZ
, SpSopr      SpSoprOtp
, TekMC
, TekSaldo
, TempNo
, TTNDoc
, UsersDoc
, GrNal       GrNal2NAkt
, KlVal       KlVal2NAkt
, GroupParty
, SklOrder    SklOrderDooc // LF_
, SpOtpEd
, WAYMOVE
, KatBank
, KatCity
, KatState
, KatB
, KatB        KatBH
, SpStepRem
, Koeff4Act
, SpecMTR
, SaldTune
, X$Users
, SpDopEd     SpDopEd1
, SpDopEd     SpDopEd2
, KatDopEd    KatDopEd1
, KatDopEd    KatDopEd2
, SpDocs      SpDocs2
, KatPodr     KuratPodr
, AttrDog     AttrDogD
, AttrDog     AttrDogS
// в TtnDoc сохраняю базовые цены по позициям спецификации АВР. Поля:
// DopSum1: tSumma - цена базовая - соотв. SpSopr.rPrice
// DopSum2: tSumma - стоимость базовая = FSRoundRub(DopSum1 * SpSopr.KolFact)
, TtnDoc TblBaseCost
, SpSchem
, DocSchem
, SpDocSmeta SpDocSmetaFree // без подцепок
, mtSmetList // служит для построения списка смет, используемых в спецификации АВР

, NalRegDc                            // igor
where
((
       TypeSopr             ==  KatSopr.VidSopr
  AND  KatSopr.cAppDogovor  ==  AppDogovor.NRec
  AND  KatSopr.cCalPlan     ==  CalPlan.NRec
  AND  KatSopr.cGruzFrom    ==  KatOrgF.NRec
  AND  KatSopr.cGruzTo      ==  KatOrgT.NRec
  AND  KatSopr.cKatSopr     ==  KSSopr.NRec
  AND  KatSopr.cKatSopr     ==  RashNakl.NRec
  AND  KatSopr.cMolTo       ==  KatMol.NRec
  AND  KatSopr.cNazna       ==  KatNazna.NRec
  AND  KatSopr.cNote        ==  KatNotes.NRec
  AND  KatSopr.cOrg         ==  Filial.cOrg
  AND  KatSopr.cOrg         ==  OrgVzr.NRec
  AND  KatSopr.cOrgBase     ==  KatOrg.NRec
  AND  KatSopr.cOtvPodr     ==  OtvPodr.NRec
  AND  KatSopr.cPayment     ==  KatPayment.NRec
  AND  KatSopr.cPerson      ==  Persons.NRec
  AND  KatSopr.cPodrTo      ==  KatPodr.NRec
  AND  KatSopr.cValut       ==  KlVal.NRec
  AND  KatSopr.Atl_LastUser ==  X$Users.Atl_NRec
  AND  KatSopr.cGrSopr      == GrSopr.NRec

  AND  KatSopr.cDogovor     ==  AttrDogD.cDogovor
  AND  KatSopr.cAppDogovor  ==  AttrDogS.cDogovor

  AND  KatSopr.cStepDoc     ==  StepDoc.NRec
  AND  StepDoc.cBaseDoc     ==  BaseDoc.NRec

  AND  KatSopr.cDogovor     ==  Dogovor.NRec
  AND  Dogovor.cVal         ==  ValDog.NRec

  AND  KatSopr.VidSopr      ==  SoprHoz.TipDoc
  AND  KatSopr.NRec         ==  SoprHoz.cSoprDoc

  AND  coKatSopr            ==  TTNDoc.wTable
  AND  KatSopr.NRec         ==  TTNDoc.cDoc

  AND  KatSopr.cSchFact     ==  SchFact.NRec
  AND  SchFact.NRec         ==  BookPrZk.cSchFact
  AND  SchFact.TipUser      ==  UsersDoc.TipUsers

  AND  KatSopr.NRec         ==  DocInfo.cDoc
  AND  word(1109)           ==  DocInfo.DocType

  AND  KatSopr.cValut       ==  CursVal.KodValut
  AND  KatSopr.dPrice      <<=  CursVal.DatVal

//------------------------------------------------------------------------------
  AND  KatSopr.VidSopr      ==  Oborot.TiDk
  AND  KatSopr.NRec         ==  Oborot.cSoprDoc
//------------------------------------------------------------------------------

  AND  coKatSopr            ==  AttrNKaz.wTable
  AND  #EX_ATTR_OKED        ==  AttrNKaz.Name
  AND  coKatSopr            ==  AttrVKaz.wTable
  AND  KatSopr.NRec         ==  AttrVKaz.cRec
  AND  AttrNKaz.NRec        ==  AttrVKaz.cAttrNam

  AND  KatSopr.cPodrFrom    ==  KatPodrUKS.NRec
  AND  KatSopr.cMolFrom     ==  KatMolUKS.NRec
  AND  KatSopr.cUKS         ==  KatStroy.NRec
  AND  KatStroy.cStroy      ==  KatStroy1.NRec
  AND  KatStroy.cFinancier  ==  Financier.NRec
  AND  KatStroy.cFinancier  ==  FinPodr.NRec
  AND  KatStroy.cFinancier  ==  FinFPCO.NRec
  AND  KatStroy.cPlace      ==  KatPlace.NRec
  AND  KatStroy1.cPlace     ==  KatPlace1.NRec

  AND  Dogovor.cCurPodr     ==  KuratPodr.nRec

  AND  KatSopr.NRec         ==  SpSopr.cSopr
  AND  SpSopr.NRec          ==  SpStepRem.cSpStep
  AND  word(1)              ==  SpStepRem.TipDoc
  AND  SpSopr.cMcUsl        ==  KatMc.NRec
  AND  SpSopr.cOtpEd        ==  KatOtpEd.NRec
  AND  SpSopr.cParty        ==  KatParty.NRec
  AND  KatParty.cGroupParty ==  GroupParty.NRec //пир 180.1500
  AND  SpSopr.cResOtgr      ==  TTNResOtgr.NRec

  AND  SpSopr.cMCUSL        ==  KatUSL.NRec
  AND  KatUsl.cEd           ==  KatEd.NRec

  AND  SpSopr.cSpOrder      ==  SpOrder.NRec
  AND  SpOrder.NRec         ==  SpSoprVZ.cSpOrder
  AND  SpSoprVZ.cSopr       ==  KatSoprVZ.NRec

  AND  TypeSopr             ==  SpDocNal.TipDoc
  AND  SpSopr.NRec          ==  SpDocNal.cSpDoc
  AND  SpDocNal.cNalog      ==  KatNalog.NRec
  AND  SpDocNal.cOrg        ==  NalOrg.NRec
  AND  SpDocNal.cVal        ==  NalValut.NRec
  AND  SpDocNal.cGrNal      ==  GrNal.NRec

  AND  SpSopr.NRec          ==  SoprOrdB.cSpSopr
  AND  SoprOrdB.cPodr       ==  KatPodr2.NRec
  AND  SoprOrdB.cMol        ==  KatMol2.NRec

  AND  SpSopr.cSpSopr       ==  SpSoprUKS.NRec
  AND  SpSoprUKS.cMCUsl     ==  KatMCUKS.NRec
  AND  SpSopr.cUKS          ==  KatStroy2.NRec
  AND  SpSopr.NRec          ==  SpecZatr.cSpec
  AND  coSpSopr             ==  SpecZatr.coTable
  AND  SpecZatr.cAddSumTune ==  AddSumTune.NRec
  AND  coSpSopr             ==  SpDocSmeta.coTable
  AND  SpSopr.NRec          ==  SpDocSmeta.cSpec
  AND  SpDocSmeta.cSmeta    ==  SmetaStroy.NRec
  AND  SpDocSmeta.cPosition ==  SmetaSpec.NRec

  //для формирования  услуг из накладных
  AND  _KatSoprNrec         ==  KKSopr.NRec

#ifdef _VIP00_ //пир 101.15795(доработка)
  AND  coSpSopr             ==  SpSklad.wTable
  AND  SpSopr.NRec          ==  SpSklad.cRec
  AND  word(100)            ==  SpSklad.TypeZ
  AND  SpSklad.cMC          ==  MarPunkt.NRec
#end

  and KatSopr.nRec          ==  SklOrderDooc.cSopr  //LF_

  and  coSpSopr             ==  SpecMTR.coTable
  and  SpSopr.nRec          ==  SpecMTR.cSpec
  and  SpecMTR.cSaldTune    ==  SaldTune.nRec

  AND  coSpSopr             == SpDopEd1.wTable
  AND  SpSopr.nRec          == SpDopEd1.cRec
  AND  1                    == SpDopEd1.wTipKol
  AND  1                    == SpDopEd1.Npp
  AND  SpDopEd1.cDopEd      == KatDopEd1.nRec

  AND  coSpSopr             == SpDopEd2.wTable
  AND  SpSopr.nRec          == SpDopEd2.cRec
  AND  1                    == SpDopEd2.wTipKol
  AND  2                    == SpDopEd2.Npp
  AND  SpDopEd2.cDopEd      == KatDopEd2.nRec
  AND SpSopr.cSpDocs        ==  SpDocs2.nRec
  // см. коммент в секции from
  and coSpSopr == TblBaseCost.wTable
  and SpSopr.NRec == TblBaseCost.cDoc
  and ( KatSopr.VidSopr = TblBaseCost.TiDk )
))

#include soprdes1.vpp
#include FltInDoc.vp

 bounds ReestrKontr =    TypeSopr    == KatSopr.VidSopr
                    AND  BeginPDate <<= KatSopr.dSopr
                    AND  EndPDate   >>= KatSopr.dSopr    (NoIndex)
                    AND  cFilterR    == KatSopr.cOrgBase (NoIndex)
                         ordered by KatSopr.dSopr

 bounds ReestrMC    =    TypeSopr    == SpSopr.VidSopr
                    AND  cFilterR    == SpSopr.cMCUSL
                    AND  BeginPDate <<= SpSopr.dSopr
                    AND  EndPDate   >>= SpSopr.dSopr (NoIndex)
                    AND  word(1)     == SpSopr.PrMc  (Noindex)
                         ordered by SpSopr.dSopr

 bounds FromNakl    =    TypeSopr     == KatSopr.VidSopr   AND
                         _KatSoprNrec == KatSopr.cKatSopr (NoIndex)
                         ordered by KatSopr.DSopr, KatSopr.NSopr

 bounds ForUKSMC    =    KatSopr.NRec == SpSopr.cSopr  AND
                         word(1)      == SpSopr.PrMc

 bounds ForUKSUsl   =    KatSopr.NRec == SpSopr.cSopr  AND
                         (SpSopr.PrMC <> 1)

 bounds forGrNal2NAkt =  SpSopr.cGrNal == GrNal2NAkt.NRec
 bounds forKlVal2NAkt =  SpSopr.cVal   == KlVal2NAkt.NRec
;

//------------------------------------------------------------------------------
// Параметры интерфеса
Parameters
  TypeSopr,
  pNRec,
  _KatSoprNrec
;
//------------------------------------------------------------------------------

#ifdef _CheckKon_VIH_
var oCheckKon : CheckKonObj;
#else
#include checkkon.vpp //проверка максимальной задолженности
#end

//******************************************************************************
ToolBar
    F_Common::tbBuhFilter
  , F_Common::tbPrintDoc
  , F_Common::tbSaveRestoreDoc
  , F_Common::tbAttrClass
;

// Получить значение вычисляемого поля CalcFactModeField
function GetCalcFactMode: word ;
{
  if( oKatSoprFunc.IsAvrFlagSet( KatSopr.buffer, bfCalcFactUsed ) )
    result := 0; // пункт "Участвует в расчете" ListBox`a
  else
    result := 1; // пункт "Не участвует в расчете" ListBox`a
}

// Сохранить значение вычисляемого поля CalcFactModeField
procedure SetCalcFactMode( _calcFactMode: word );
{
  if( _calcFactMode = 0 )
    oKatSoprFunc.SetAvrFlag( KatSopr.buffer, bfCalcFactUsed, true ); // Участвует в расчете
  else
    oKatSoprFunc.SetAvrFlag( KatSopr.buffer, bfCalcFactUsed, false ); // Не участвует в расчете

  // метод SetAvrFlag работает с буфером KatSopr. Чтобы сохранить изменения
  // нужно установить признак модификации записи либо сделать update current KatSopr
  SetModified( true );
}

// Получить значение вычисляемого поля CurrPriceCalcMethodField
function GetCurrPriceCalcMethod: word;
{
  if( oKatSoprFunc.IsAvrFlagSet( KatSopr.buffer, bfCurrPriceCalcMethod ) )
    result := 1;
  else
    result := 0;
}

// Сохранить значение вычисляемого поля CurrPriceCalcMethodField
procedure SetCurrPriceCalcMethod( _currPriceCalcMethod: word );
{
  if( _currPriceCalcMethod = 1 )
    oKatSoprFunc.SetAvrFlag( KatSopr.buffer, bfCurrPriceCalcMethod, true ); // метод SetAvrFlag работает с буфером KatSopr.
  else
    oKatSoprFunc.SetAvrFlag( KatSopr.buffer, bfCurrPriceCalcMethod, false );

  update current KatSopr; // поставил update, чтобы изменения флага сразу были видны в других интерфейсах.
}

procedure SetCurrPriceCalcMethodFieldVisibility; // Ну и что, что длинное, зато понятное :)
{
  var _isFieldVisible: boolean;
  _isFieldVisible :=
    ( TypeSopr = 110 ) and
    ( wGetTune( 'UKS.Raschet.BasPrice' ) = bcmUseStored ); // Режимы использования базовых цен в АВР см. в BaseCostStorage.inc
//    ( KatSopr.wADoc != adAktUslB_ImpST ) and
//    ( KatSopr.wADoc != adAktUslB_ImpGrand );

  // Задать видимость флажка режима расчета текущих цен
  SetFieldAndLabelVisible( #CurrPriceCalcMethodField, _isFieldVisible );
}

//******************************************************************************

Form sprForm ('prsoprp.OUT',  'sprsopr') with novisual;
Form AktPIW  ('AktPIW.out',   'AktPIW')  with novisual;//(PIW-performed installation work)
Form RKontr  ('reestrKn.out', 'RstrKon') with novisual;
Form RMc     ('reestmtc.out', 'RstrMc')  with novisual;
Form frm1wed ('err2wed.OUT',  'ERRR')    with novisual;
Form prot    ('price.out',    'errr')    with novisual;
Form errr    ('errr.OUT',     'ERRR')    with novisual;

//******************************************************************************
//проверка привязки накладной к ДО
#include SoprAll.vpp  // общие функции сопроводительных документов
#include soprc28.vpp
#include FltInFun.vpp

//******************************************************************************

Function GetFirstSklad: boolean;
{
  GetFirstSklad := (GetFirst SklOrder where((KatSopr.NRec == SklOrder.cSopr)) <> tsOk);
}

//******************************************************************************

Procedure SetFieldSklad(Header : longint);
{
  if ( (KatSopr.cOrgBase <> coGetTune('MyOrg')) AND (KatSopr.TipSopr = 1) )
  {
    ShowButton(Header, cmMakePrih, FALSE);
    ShowButton(Header, cmValue15,  FALSE);
    ClearFieldState(#FieldSklad,      sfVisible);
    ClearFieldState(#FieldMOL,        sfVisible);
    ClearFieldState(#FieldMOL1,       sfVisible);
    ClearFieldState(#FieldPodr,       sfVisible);
    ClearFieldState(#KatPodr.Name,    sfVisible);
    ClearFieldState(#KatMol.Name,     sfVisible);
    ClearFieldState(#KatPodrUKS.Name, sfVisible);
    ClearFieldState(#KatMolUKS.Name,  sfVisible);
    ClearFieldState(#OtpuskSklad,     sfVisible);
  }
  else
  {
    ShowButton(Header, cmMakePrih, TRUE);
    ShowButton(Header, cmValue15,  TRUE);
    SetFieldState(#FieldSklad,      sfVisible);
    SetFieldState(#FieldMOL,        sfVisible);
    SetFieldState(#FieldMOL1,       sfVisible);
    SetFieldState(#FieldPodr,       sfVisible);
    SetFieldState(#KatPodr.Name,    sfVisible);
    SetFieldState(#KatMol.Name,     sfVisible);
    SetFieldState(#KatPodrUKS.Name, sfVisible);
    SetFieldState(#KatMolUKS.Name,  sfVisible);
    SetFieldState(#OtpuskSklad,     sfVisible);
  }
}

//******************************************************************************
#include batch_b.vpp   // формирование ДО по кнопке из РИ акта
#include soprc25.vpp   // Доступное количество по акту приемки
#include GETMOLSK.VPP
#include soprc08.vpp
#include soprc07.vpp   // OnBeforeClearSpSopr; // Перекрытие абстракта
#include soprgen.vpp   // Функции общей обработки сопроводительных документов
#include soprc43.vpp
#include pickzatr.vpp  // выбор затраты
#include soprval.vpp   // Функции обработки валюты сопроводительных документов
#include rcsum.vpp     // Подсчет суммы по акту
#include soprnald.vpp  // Обработка налогов
#include naklgen.vpp   // Функции общей обработки накладных
#include saldomcs.vpp  // Тригеры для SpOrder
#include nneword.vpp
#include mkord.vpp
#include makeprih.vpp
#include makerash.vpp
#include delord.vpp
#include lf_dooc.vpp
//******************************************************************************

Procedure PickKatMolName;
{
  if (CurTable = #SoprOrdB)
  {
    if (IsNew)
    {
      Insert Current SoprOrdB;
      SetNew(FALSE);
    }

    if (RunInterface(GetMol, SoprOrdB.cMol, SoprOrdB.cPodr) = cmCancel)
      Exit;

    Update Current SoprOrdB;
    RescanPanel(#SoprOrdB);
  }
}

//******************************************************************************

Procedure PickKatPodrName;
{
  if ( CurTable=#SoprOrdB )
  {
    if (IsNew)
    {
      Insert Current SoprOrdB;
      SetNew(FALSE);
    }

    if (RunInterface(GetAnyPodr, SoprOrdB.cPodr, 0) = cmCancel)
      Exit;

    SoprOrdB.cMol := getMOL2Sklad(SoprOrdB.cPodr);
    Update Current SoprOrdB;
    RescanPanel(#SoprOrdB);
  }
}

//******************************************************************************

Procedure MakeNotNewKatSopr;
{
  if (CurTable <> #KatSopr)
    Exit;

  if (IsNew)
  {
    Insert Current KatSopr;
    SetNew(FALSE);

    iGrPl.InsSpGrPlD_Default(KatSopr.VidSopr,  // тип документа системный
                             KatSopr.NRec,     // ссылка на документ
                             KatSopr.cOrg      // ссылка на контрагента
                            );
    Update_Current_KatSopr;
  }
}
//******************************************************************************

Procedure PicknDoverUsl(Flag: word);
{
  var DovNRec: comp;
  var oGetDover2: GetDover2;

  DovNRec := oGetDover2.SelectDover(Flag, false, KatSopr.cDover);

  if (GetFirst Dover where ((Comp(DovNRec) == Dover.NRec)) = tsOk)
    {
      set KatSopr.nDover := Dover.NoDoc;
      set KatSopr.cDover := Dover.NRec;
      set KatSopr.dDover := Dover.dForm;

      if (GetFirst DovFio where ((Dover.cDovFio == DovFio.NRec)) = tsOk)
        { //-- заполняем поле довер лицо лицом из доверенности
          set KatSopr.sDover   := DovFio.Name;
          set KatSopr.cDovFio  := DovFio.NRec;
        }
    }

  //установка отметки выполнение (пока только для прихода)
  #ifdef _SOPRDOCB_VIP
  var oDovEdit: DoverEditObj;

  if ( GetVipRef(oDovEdit, 'DoverEdit') )
    {
      oDovEdit.ChangeStatusDover(KatSopr.NRec, KatSopr.cDover);
      FreeVipInterface(oDovEdit)
    }
  #end
}
//******************************************************************************

Procedure PickDoverUsl;
var
  tDovFIO: comp;
{
  tDovFIO := KatSopr.cDovFio;

  if (RunInterface('GetDovFio', tDovFIO) <> cmCancel)
    if (GetFirst DovFio where ((tDovFIO == DovFio.NRec)) = tsOk)
      {
        set KatSopr.sDover  := DovFio.Name;
        set KatSopr.cDovFio := DovFio.NRec;
      }
}
//******************************************************************************

#doc
  Цена по смете
#end

Window EditPriceSmet 'Цена' (, hcuks_Izmen_Cen, ) EscClose, DoAccept;
  Show at(2,12,78,17);
Panel paEditPriceSmet
  Show at (,,,);
Table SpStepRem;

Screen scrEditPriceSmet ('',,)
Fields
vfPriceSmeta ('Цена в национальной валюте',,sci1Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], NoProtect;
Prv ('Цена в национальной валюте после применения коэффициентов',,sci1Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], Skip;
Buttons
 cmVal1,Default,,'',,sci1Esc;
<<

 `Цена`.@@@@@@@@@@@@@   `Цена после применения коэффициентов`.@@@@@@@@@@@@@@

                      <.           Продолжить         .>
>>

end;

Screen scrEditPriceSmetV ('',,)
Fields
vfPriceSmeta ('Цена в валюте',,sci1Esc):[brForSopr_VPrice, '\2p[|-]36`666`666`666`666.88'], NoProtect;
Prv ('Цена в национальной валюте после применения коэффициентов',,sci1Esc):[brForSopr_VPrice, '\2p[|-]36`666`666`666`666.88'], Skip;
Buttons
 cmVal1,Default,,'',,sci1Esc;
<<

 `Цена`.@@@@@@@@@@@@@   `Цена после применения коэффициентов`.@@@@@@@@@@@@@@

                      <.           Продолжить         .>
>>

end;

end; // Panel

//******************************************************************************

HandleEvent  // EditPriceSmet
cmInit:
{
  if (KatSopr.cVal = 0)
  {
    vfPriceSmeta := SpStepRem.SumMC;
    vfPriceSmetaOld := SpStepRem.SumMC;
    SetFormat(scrEditPriceSmet);
  }
  else
  {
    vfPriceSmeta := SpStepRem.SumUsl;
    vfPriceSmetaOld := SpStepRem.SumUsl;
    SetFormat(scrEditPriceSmetV);
  }

  PutCommand(cmVal2);
}

cmVal2 :
{
  SelectField(#vfPriceSmeta);
  set vfPriceSmeta := vfPriceSmetaOld;
}

cmCancel:
{
  ReReadRecord(#SpStepRem);
}

cmClose:
{
  ReReadRecord(#SpStepRem);
}

cmVal1:
{
  if (KatSopr.cVal = 0)
    SpStepRem.SumMC := vfPriceSmeta
  else
    SpStepRem.SumUsl := vfPriceSmeta;

  if (Update Current SpStepRem = tsOk)
  {
  }

  CloseWindow(CurWindow);
}
end; // HandleEvent EditPriceSmet
end; // Window EditPriceSmet

//******************************************************************************
#doc
  Редактирования примечания к акту на услуги
#end

Window EditTextRepr 'Примечание' EscClose;
  Show at(2,12,78,19);
Panel paEditTextRField
  Show at (,,,);
Table DocInfo;
  Text  DocInfo.TextData;
HandleEvent
cmInsertRecord:
{
  Insert Current DocInfo;
}
cmUpdateRecord:
{
  Update Current DocInfo;
}
cmDeleteRecord:
{
  if (Message('Удалить?', Warning + YesNo) = cmYes)
    Delete Current DocInfo;
}
end; // HandleEvent
end; // Panel
end; // Window

//******************************************************************************
// Перекрытие абстракта
Procedure OnInitInsMcInfo;
{
}
//******************************************************************************

Function OnAfterMakeBaseDoc: boolean;
{
  OnAfterMakeBaseDoc := TRUE
}
//******************************************************************************

Function CanMakeOrder: Date;
var
  dat_: Date;
{
  CanMakeOrder := Date(0, 0, 0);

  if (NOT IsValid(#SpSopr))
    Exit;

  dat_ := if (longint(KatSopr.dOpr) = 0, KatSopr.dSopr, KatSopr.dOpr);

  if (RunDialog(GetFormNa, dat_) = cmCancel)
    Exit;

  CanMakeOrder := dat_;
}
//******************************************************************************

Procedure DoMakeDooc;
{
  if ( KatSopr.NRec = 0 )
  {
    Message('Документ не оформлен', Warning);
    Exit;
  }

  if ( not IsValid(#KSSopr) )
  {
    Message('Нет накладной, связанной с актом', Warning);
    Exit;
  }

  if ( GetFirst SklOrder where ((KSSopr.nRec == SklOrder.cSopr )) <> tsOk ) // lf_
  {
    Message('По накладной связанной с данным актом не созданы складские приходные ордера');
    Exit;
  }

  if ( KatSopr.waDoc = cgPrihOrdAkt )
  {
    Message('Сумма по данному акту уже включена в приходный ордер по накладной № '
           + KSSopr.nSopr + ' от ' + DateToStr(KSSopr.dSopr,'DD/MM/YYYY'), Warning);
    Exit;
  }

  if ( KatSopr.waDoc = cgCustomAkt )
  {
    Message('По данному акту проведение дооценки не предусмотрено!', Warning);
    Exit;
  }

  var cPereocOrd_, cSpOrder_: comp;
  var sNum: string;
  sNum:= '';

  if ( GetFirst SklOrder where ((  KatSopr.nRec    == SklOrder.cSopr
                               AND (SklOrder.TipOrd = 4)
                               ))  = tsOk )
   {
     cPereocOrd_:= 0;

    _LOOP SklOrder where ((  KatSopr.nRec    == SklOrder.cSopr
                         AND (SklOrder.TipOrd = 4) ))
       {
         sNum:= sNum + if(cPereocOrd_= 0,'',', ') + SklOrder.nOrder;
         cPereocOrd_:= SklOrder.nRec;
       }//_L

    Message('По акту были сформированы ордера дооценки: '+sNum);

     #ifndef USE_ORDERS_INHERIT
     RunInterface('PrihOrd', SklOrder.nRec, SklOrder.SP);
     #else
     RunInterface('DoocOrd', SklOrder.nRec, SklOrder.SP);
     #end
     Exit;
   }

  if ( Message('Произвести формирование ордера дооценки?', YesNo) <> cmYes )
    Exit;

  if (coGetTune('Oper.Buy.AktUsl.BeforeOrder')<>0)
    RunInterface('SimpleWayToRunAlgorithm', coGetTune('Oper.Buy.AktUsl.BeforeOrder'),
                            word(2111), KatSopr.NRec, comp(0));

  var sumOrd, vSumOrd, priceUsl: double;
  var cValOrd: comp;
  sNum:= '';
  cPereocOrd_:=0;

  PushPos(#KatSopr);
  PushPos(#SpSopr);
  PushPos(#KSSopr);

  if ( GetMethodSpis <> 3 )  // не LF_
    {
      var dateF_: date;
      dateF_:= CanMakeOrder;
      if dateF_ = date(0,0,0)
        Exit;

      //подсчёт общих сумм по ордерам связанной накладной для разноски услуги
      var totSum_, totSumV_, totVol_, totMas_, sum_, totKol_, totKolPos_: double;
      var SpSoprOtpEd_ : comp;
      SpSoprOtpEd_ := comp(0);
    totSum_ := 0;
    totSumV_:= 0;
    totVol_ := 0;
    totMas_ := 0;
    totKol_ := 0;
    totKolPos_ := 0;

      StartNewVisual(vtRotateVisual, vfTimer,'Формирование ордеров дооценки', 1);
      NextVisual;

    _LOOP SklOrder where (( KatSopr.cKatSopr == SklOrder.cSopr ))
      _LOOP SpOrder where (( SklOrder.nRec == SpOrder.cSklOrder ))
      {
        if ( GetFirst FastFirstRow KatMC where ((SpOrder.cMC == KatMC.nRec)) <> tsOk )
          continue;

        if (   (KatMC.kGroupMC <> '' AND  KatMC.kGroupMC = sGetTune('Tara.KodGrMcTara'))  // МЦ - тара
           AND (boGetTune('OPER.SOPRUSLTARA')) = FALSE )//Распределение сопутствующих услуг по таре - нет
          continue;

        totSum_ := totSum_  + (SpOrder.kol * SpOrder.srPrice);
        totSumV_:= totSumV_ + (SpOrder.kol * SpOrder.vPrice);
        totVol_ := totVol_  + KatMC.volume * SpOrder.kol;
        totMas_ := totMas_  + KatMC.massa  * SpOrder.kol;
        totKolPos_ := totKolPos_ + 1;

        if ( Getfirst SpSoprOtp where (( SpOrder.cSpSopr == SpSoprOtp.nRec )) = tsOk )
          totKol_ := totKol_  + SpOrder.kol/fEdIzm.GetKoefOtpEd(SpSoprOtp.cOtpEd);
      }//_L

    _LOOP SpSopr where ((KatSopr.nRec == SpSopr.cSopr))
    {
      if ( SpSopr.PrVoz <> 0 )  // налог не входит в уч.цену
        continue;

      //формирование ордеров дооценки
      _LOOP SklOrder where (( KatSopr.cKatSopr == SklOrder.cSopr ))
      {
        var cSklOrd_: comp;
        cSklOrd_:= SklOrder.nRec;

        SklOrder.tipOrd  := 4;
        SklOrder.cSopr   := KatSopr.nRec; //не сбивает ключ
        SklOrder.nOrder  := GetNextNOrder(true, SklOrder.cPodr);
        SklOrder.dOrd    := dateF_;
        SklOrder.yearOrd := Year(Cur_Date);
        SklOrder.descr   := sGetTune('User.Descr');
        SklOrder.desGr   := sGetTune('User.DesGr');
        SklOrder.nRec    := 0;

        Insert Current SklOrder;        //не сбивает ключ

        sNum:= sNum + if(cPereocOrd_=0,'',', ') + SklOrder.nOrder;
        cPereocOrd_:= SklOrder.nRec;

        sumOrd := 0;
        vSumOrd:= 0;
        cValOrd:= 0;

        //создание спецификации дооценки
        _LOOP SpOrder where (( cSklOrd_ == SpOrder.cSklOrder ))
        {
          if ( GetFirst FastFirstRow KatMC where (( SpOrder.cMC == KatMC.nRec )) <> tsOk )
            continue;

          if ( (KatMC.kGroupMC <> '' AND  KatMC.kGroupMC = sGetTune('Tara.KodGrMcTara'))  // МЦ - тара
             AND (boGetTune('OPER.SOPRUSLTARA')) = FALSE )  //Распределение сопутствующих услуг по таре - нет
            continue;

          priceUsl:= SpSopr.price;

          if ( GetFirst FastFirstRow KatPodr where (( SklOrder.cPodr == KatPodr.nRec )) <> tsOk )
            Message('Подразделение приходного ордера не найдено. Выполните проверку КОУ- [x] ордера', error);

          if ( KatPodr.UchPrc = 0 )              // 0-по настр     1-с нал, 2-без нал.
            if ( wGetTune('Oper.FormUch') = 0 )  // уч.цена: 0-без налогов, 1-c налогами
              KatPodr.UchPrc:= 2                 // без нал.
            else
              KatPodr.UchPrc:= 1;                // с нал.

          if (   KatSopr.vhodNal = 1             //входят в цену услуг
             AND KatPodr.UchPrc = 2 )            //не входят в склад
            priceUsl:= SpSopr.price - if(KatSopr.cVal = 0, SpSopr.SumNDS, SpSopr.SumVNDS)/SpSopr.kolFact;

          if (   KatSopr.vhodNal <> 1            //не входят в цену услуг
             AND KatPodr.UchPrc = 1 )            //входят в склад
            priceUsl:= SpSopr.price + if(KatSopr.cVal = 0, SpSopr.SumNDS, SpSopr.SumVNDS)/SpSopr.kolFact;
          //------------------------------------------------------------------------------
          if ( Getfirst SpSoprOtp where (( SpOrder.cSpSopr == SpSoprOtp.nRec )) = tsOk )
            SpSoprOtpEd_ := SpSoprOtp.cOtpEd;

          case SpSopr.prMC of
            5:   sum_:= (KatMC.massa    *SpOrder.kol / totMas_) * SpSopr.kolFact*priceUsl;/*масса*/
            6:   sum_:= (KatMC.volume   *SpOrder.kol / totVol_) * SpSopr.kolFact*priceUsl;/*объем*/
            7:   sum_:= (priceUsl / totKol_) * (SpOrder.kol/fEdIzm.GetKoefOtpEd(SpSoprOtpEd_));/*количество*/
            8:   sum_:= (priceUsl / totKolPos_);/*количество позиций*/
            else sum_:= (SpOrder.srPrice*SpOrder.kol / totSum_) * SpSopr.kolFact*priceUsl;/*1..4: %, сум - как сум*/
          end;//c

          SpOrder.tipOrd   := 4;
          SpOrder.rSrPrice := sum_;
          SpOrder.rVPrice  := oValFunc.GetAnyCurrency(comp(0), SpOrder.rSrPrice, SpOrder.dOrd, SpOrder.cVal);
          SpOrder.srPrice  := FRoundRubOrd(1, SpOrder.rSrPrice);
          SpOrder.vPrice   := FRoundValOrd(1, SpOrder.rVPrice);
          SpOrder.cSklOrder:= cPereocOrd_; //не сбивает ключ
          SpOrder.dOrd     := dateF_;
          SpOrder.kol      := 0;
          SpOrder.cSpSopr  := SpSopr.nRec;//привязываем к к акту
          cSpOrder_        := SpOrder.nRec;//запоминаем
          SpOrder.nRec     := 0;
          OneSpOrder_Insert;//не сбивает ключ

          oMTRFun.CopySpecMTR(coSpOrder, cSpOrder_, coSpOrder, SpOrder.nRec);

          sumOrd := sumOrd  + SpOrder.srPrice;
          vSumOrd:= vSumOrd + SpOrder.vPrice ;
          cValOrd:= SpOrder.cVal;
        }//_L  SpOrder

        ModifySoprHoz(sumOrd, vSumOrd, cValOrd);
      }//_L  SklOrder
    }//_L  SpSopr

    StopVisual('',0);
  }
  else
    cPereocOrd_:= MakeDoocOrder; //LF_

  PopPos(#KSSopr);
  PopPos(#SpSopr);
  PopPos(#KatSopr);
  RereadRecord(#KatSopr);

  if ( cPereocOrd_ = 0 )
    Exit;

  Message('Сформированы ордера дооценки: '+sNum);

  if (coGetTune('Oper.Buy.AktUsl.AfterOrder')<>0)
    RunInterface('SimpleWayToRunAlgorithm', coGetTune('Oper.Buy.AktUsl.AfterOrder'),
                            word(2111), KatSopr.NRec, comp(0));

  #ifndef USE_ORDERS_INHERIT
  RunInterface('PrihOrd', cPereocOrd_, SklOrder.SP);
  #else
  RunInterface('DoocOrd', cPereocOrd_, SklOrder.SP);
  #end

}

//******************************************************************************
Procedure DeleteDooc;//LF_
var wasOp_: boolean;
{
  FlagDelDooc := True;

  if ( KatSopr.nRec = 0 )
  {
    Message('Акт не оформлен');
    Exit;
  }

  if ( GetFirst SklOrder where (( KatSopr.nRec == SklOrder.cSopr )) <> tsOk )
  {
    Message('По данному акту ордера дооценки не сформированы');
    Exit;
  }

  if ( Message('Удалить ордера дооценки, сформированные по данному акту ?', YesNo) <> Yes )
  {
    FlagDelDooc := False;
    Exit;
  }

  if (coGetTune('Oper.Buy.AktUsl.BeforeDelOrder')<>0)
    RunInterface('SimpleWayToRunAlgorithm', coGetTune('Oper.Buy.AktUsl.BeforeDelOrder'),
                            word(2111), KatSopr.NRec, comp(0));

  StartNewVisual(vtRotateVisual, vfTimer,'Удаление ордеров дооценки', 1);
  NextVisual;
  wasOp_:= false;

  external _LOOP SklOrder where (( KatSopr.nRec == SklOrder.cSopr ))
  {
    #ifdef _DSOPRHOZ_VIH
    var delord: DSoprHozObj1;
    GetVipRef(delord,'DSoprHoz');
    delord.DeleteSoprHoz(SklOrder.NRec, GetSoprHozTipDoc(SklOrder.SP, SklOrder.VidOrder));
    #end

    external _LOOP SpOrder where (( SklOrder.nRec == SpOrder.cSklOrder ))
    {
      if ( GetMethodSpis = 3 )  //LF_
        UpdateDooc_toRash_SpOrders(false);//в lf_dooc.vpp  LF_

      OneSpOrder_Delete;
      wasOp_:= true;
    }//_L

    Delete Current SklOrder;
  }

  RereadRecord(#KatSopr);

  StopVisual('',0);

  if ( wasOp_ )
    Message('Ордера дооценки удалены')
  else
    Message('По данному акту не созданы ордера дооценки');

  if (coGetTune('Oper.Buy.AktUsl.AfterDelOrder')<>0)
    RunInterface('SimpleWayToRunAlgorithm', coGetTune('Oper.Buy.AktUsl.AfterDelOrder'),
                            word(2111), KatSopr.NRec, comp(0));
}


//******************************************************************************

Procedure DelKatSoprDopr;
{
  if ( NOT oMakeOrder.IsDelOrder(KatSopr.NRec) )
    Exit;

  if ( GetFirst SklOrder where (( KatSopr.NRec == SklOrder.cSopr )) = tsOk )
    if ( oMakeOrder.CanDelOrdEx(KatSopr.NRec, True, False, 0) )  //проверка возможности удаления складского ордера
    {
      if ( DeleteOrders(True) )  //удаление складского ордера
      {
        KatSopr.dOpr := ZeroDate;
        oSDfuns.Set_dOprTTN(KatSopr.NRec, ZeroDate);   // pir 101.31632
        Update_Current_KatSopr;
      }
      else
        Exit;
    }

   if ( isValid(#Schfact) )
   {
     Update Current Schfact
       set Schfact.ds[2] := KatSopr.dOpr;

    _LOOP BookPrZk
      Update Current BookPrZk
        set BookPrZk.dReg := KatSopr.dOpr,
            BookPrZk.dOpr := KatSopr.dOpr;
   }
}

//******************************************************************************

Procedure SetEditOption2;//пир 102.57065
{
  if ( (KatSopr.VidSopr <> 111 AND KatSopr.VidSopr <> 117) or (SpSopr.PrMC < 3) )
  {
    SetFieldState(#OtpEd, sfVisible);
    SetFieldState(#SpSopr.KolFact, sfVisible);
    SetFieldState(#Prv, sfVisible);
    SetFieldState(#SumPrice, sfVisible);

    ClearFieldState(#SpSopr.Kol, sfVisible);
    ClearFieldState(#SpSoprPrSum, sfVisible);
  }
  else
  {
    SetFieldState(#SpSopr.Kol, sfVisible);
    SetFieldState(#SpSoprPrSum, sfVisible);

    ClearFieldState(#OtpEd, sfVisible);
    ClearFieldState(#SpSopr.KolFact, sfVisible);
    ClearFieldState(#Prv, sfVisible);
    ClearFieldState(#SumPrice, sfVisible);

    if ( SpSopr.PrMC > 3 )
    {
      SetFieldOption(#SpSoprPrSum, ofSelectable);

      if ( CurField = #SpSopr.Kol )
        SelectField(#SpSoprPrSum);

      ClearFieldOption(#SpSopr.Kol, ofSelectable);
    }
    else
    {
      SetFieldOption(#SpSopr.Kol, ofSelectable);

      if ( CurField = #SpSoprPrSum )
        SelectField(#SpSopr.Kol);

      ClearFieldOption(#SpSoprPrSum, ofSelectable);
    }
  }
}

//******************************************************************************

Procedure SetEditOption;//пир 101.12992
{
  if ( (KatSopr.cKatSopr = 0) or (KatSopr.VidSopr <> 111 AND KatSopr.VidSopr <> 117) )
  {
    ClearFieldState(#PrSopUsl, sfVisible);

    SetFieldState(#OtpEd, sfVisible);
    SetFieldState(#SpSopr.KolFact, sfVisible);
    SetFieldState(#Prv, sfVisible);
    SetFieldState(#SumPrice, sfVisible);

    ClearFieldState(#SpSopr.Kol, sfVisible);
    ClearFieldState(#SpSoprPrSum, sfVisible);

    Exit;
  }

  if ( (IsValid(#KSSopr)) and ((KSSopr.VidSopr = 101) or (KSSopr.VidSopr = 108)) )
  {
    SetFieldState(#PrSopUsl, sfVisible);
    SetEditOption2;
  }
  else
    ClearFieldState(#PrSopUsl, sfVisible);
}

//******************************************************************************
// Перекрытие абстаракта
Procedure OnAfterInsertSpSopr;
{
  NalogsFromSpStep;
}
//******************************************************************************

Procedure OnAfterInsertSpSoprFromPrice;
{
  RecalcNalogs(KatUsl.cGrNal, SpSopr.cGrNal);
  Update Current SpSopr;
}
//******************************************************************************

#include prnakts.vpp    // Печать акта, кроме акта выполненных работ
#include prnPIW.vpp
//******************************************************************************

Function AdvansedInsMC(Curse: double): boolean;
{
  AdvansedInsMC := FALSE;

  if (TypeSopr = 114)
    if (SpStep.PrMC <> 1)
      Exit;

  if (TypeSopr = 111)
    case SpStep.PrMC of
      1: Exit;// не работает для МЦ
      2: {};  //всегда работает
      3,4,5,6:
      {
         if (KatSopr.cKatSopr = 0)//усл.отн.на другого контрагента
           Exit;
      }
      end;

  AdvansedInsMC := TRUE;
}
//******************************************************************************

#include insstds.vpp   // Стандартная обработка вставки позиций
#include insmc.vpp     // Вставка услуг по счету
#include soprc00.vpp   // CheckSumma
#include soprc01.vpp   // CheckSumma
#include soprc04.vpp
#include insmc0.vpp    // заполнение накладной по договор-соглашение-кал.план
#include insmc2.vpp    // заполнение накладной по договор-соглашение-кал.план
#include soprc03.vpp

//******************************************************************************

Function OnSchFactSumm(Value: double): double;
begin
 OnSchFactSumm := Value;
end;
//******************************************************************************

#include schffun.vpp   // Функции счета-фактуры
#include soprc05.vpp
#include soprc02.vpp
#include gmckat.vpp    // Вставка услуг из каталога
#include copySopr.vpp  // Копирование документа
#include gmcprl.vpp    // Выбор услуг из прайса
#include gSmetKS.vpp   // Выбор МЦ/Усл из смет
//******************************************************************************

Procedure RecalcAktUslB;
var
  rksMarker: longint;
  i        : word;
  cNRec    : comp;
{
  rksMarker := InitMarker('RecalcKatSopr', 8, 10, 5);

  For (i := 0; i < GetMarkerCount(rksMarker); inc(i))
    if ( GetMarker(rksMarker, i, cNRec) )
      if (GetFirst KatSopr where ((cNRec == KatSopr.NRec)) = tsOk)
          CheckSumma(TRUE);

  DoneMarker(rksMarker, '');
}
//******************************************************************************

Function BeforeDeleteKatSopr(pNRec: comp; isWarnings, isVisual: boolean): boolean;
{
  BeforeDeleteKatSopr := FALSE;

  if ( GetFirst KatSopr where (( pNRec == KatSopr.NRec )) <> tsOk )
    Exit;

  TypeSopr := KatSopr.VidSopr;

  if (NOT oSDfuns.CanDeleteKS_GTD(KatSopr.NRec,isWarnings))
    Exit;

  _LOOP SpSopr where((KatSopr.NRec == SpSopr.cSopr))
     OnBeforeClearSpSopr;

  BeforeDeleteKatSopr := TRUE;
}
//******************************************************************************

#include wspdocn2.vpp // Обработка налогов к позиции спецификации
#include soprc06.vpp
#include soprc14.vpp
//******************************************************************************

Procedure InsertMcInAkt(isDel : boolean);
var
  tNrec    : comp;
  MarkerMC : longint;
  IndexMC  : longint;
begin
  MarkerMC := InitMarker('SpSopr_MC', 8, 100, 10);

  if ( GetMarkerCount(MarkerMC) = 1 )
    if ( NOT IsNew AND IsValid(#SpSopr) )
      if ( isDel )
        Delete Current SpSopr;

  For (indexMc := 0; indexMc < GetMarkerCount(MarkerMC); inc(indexMc))
  {
    ClearBuffer(#SpSopr);
    GetMarker(MarkerMC, indexMc, tNRec);

    if (GetFirst SpSopr where ((tNrec == SpSopr.NRec)) = tsOk)
    {
      SpSopr.NRec    := 0;
      SpSopr.cSopr   := KatSopr.NRec;
      SpSopr.VidSopr := KatSopr.VidSopr;
      SpSopr.dSopr   := KatSopr.dSopr;
      SpSopr.dOprTTN := KatSopr.dSopr;

      if ( GetFirst Pick where (( word(614) == Pick.wList AND
                                  tNrec     == Pick.cRec       )) = tsOk )
        SpSopr.KolFact := Pick.PickKol;

      if ( GetFirst SpOrder where (( tNRec  == SpOrder.cSpSopr )) = tsOk )
        SpSopr.cSpOrder := SpOrder.NRec;

      Insert Current SpSopr;
    }
  }//end for

  RereadRecord(#SpSopr);

  if (SpSopr.cMcUsl <> 0)
    CheckSumma(TRUE);

  DoneMarker(MarkerMC,'SpSopr_MC');

end;

//******************************************************************************
//Update статьи затрат для текущей позиции спецификаци
Procedure Update_Current_SpecZatr (aZatr: comp);
begin
  if ( IsValid(#SpecZatr) )
    Update Current SpecZatr set SpecZatr.cAddSumTune := aZatr
  else
  {
    ClearBuffer(#SpecZatr);
    SpecZatr.coTable     := coSpSopr;
    SpecZatr.cAddSumTune := aZatr;
    SpecZatr.cUKS        := SpSopr.cUKS;
    Insert Current SpecZatr;
  }
end;

//******************************************************************************
//синхронизация ссылок объекта строит. и статей затрат для работ связанных
//с материалами для текущей позиции спецификации
//aMode - 0: удаление,1 - объект, 2 - статья затрат
Procedure SynchUKSObj (aRec, aUks: comp; aMode: byte);
begin
  PushPos(#SpSopr);

  case aMode of
    0:
    {
      Update SpSopr where ((aRec == SpSopr.cSpSopr))
      set SpSopr.cSpSopr := comp(0);
    }
    1:
    {
      Update SpSopr where ((aRec == SpSopr.cSpSopr))
      set SpSopr.cUks := aUks;
    }
    2:
    {
      _LOOP SpSopr where ((aRec == SpSopr.cSpSopr))
        if (aUks <> comp(0))
          Update_Current_SpecZatr(aUks);
        else
          if ( IsValid(tnSpecZatr) )
            if (Delete Current SpecZatr <> tsOk) {};
    }
  end;

  PopPos(#SpSopr);
  RereadRecord(#SpSopr);
end;

//******************************************************************************

var sumOrd, vSumOrd: double;
var cValOrd: comp;

Function UpdateSoprHozAktUslB : boolean;
var cKatSopr: comp;
    vidSopr: word;
    iSH: ObjSHmanager;
{
  UpdateSoprHozAktUslB := true;

  if ( SklOrder.nRec = 0 )
    Exit;

  LoadVipRef(iSH, 'SHmanager');

  ResetBounds(#SoprHoz);
  oValFunc.InitVal;

  // хозоперация ордера:
  var oldSum, oldSumV: double; var oldVal: comp;//старые суммы из soprhoz ордера
  oldSum:= 0; oldSumV:= 0; oldVal:=0;

  var boExistsSH: boolean;
  var tipDoc_: word;
  tipDoc_:= GetSoprHozTipDoc(SklOrder.SP, SklOrder.vidOrder);
  boExistsSH := ( GetFirst SoprHoz where ((  tipDoc_ == SoprHoz.tipDoc
                                         and SklOrder.nRec == SoprHoz.cSoprDoc
                                         )) = tsOk );

  if ( NOT boExistsSH )
  {
    ClearBuffer(#SoprHoz);
      SoprHoz.tipDoc   := tipDoc_;
      SoprHoz.direct   := if(SklOrder.vidOrder=0, 1,2);
      SoprHoz.cStepDoc := KatSopr.cStepDoc;
      SoprHoz.cSoprDoc := SklOrder.nRec;
      SoprHoz.descr    := sGetTune('User.Descr');
      SoprHoz.desGr    := sGetTune('User.DesGr');
      SoprHoz.tiDkGal  := SoprHoz.tipDoc;
    }
  else
  {
    oldSum := SoprHoz.summaSp;
      oldSumV:= SoprHoz.sumValSp;
      oldVal := SoprHoz.kodValSp;
    }

  SoprHoz.noDoc    := SklOrder.nOrder;
  SoprHoz.filialNo := lGetTune('Konsolid.FilialNo');
  SoprHoz.datOb    := SklOrder.dOrd;
  SoprHoz.summaSp  := sumOrd;  //из ордера - вычисляется
  SoprHoz.sumValSp := vSumOrd; //из ордера - вычисляется
  SoprHoz.kodValSp := cValOrd; //из ордера - вычисляется
  //Update SoprHoz - после считывания и модиф. хозоперации по накладной (ниже)

  // хозоперация для накладной:
  var soprSum, soprVSum: double; var soprVal: comp; //по накладной
  soprSum:= 0;  soprVSum:= 0;  soprVal:= 0;

  cKatSopr:= KatSopr.nRec;  vidSopr:= KatSopr.vidSopr;

  if ( isValid(#KatSopr) )
  {
    if ( GetFirst SoprHoz2 where ((  vidSopr  == SoprHoz2.tipDoc
                                 And cKatSopr == SoprHoz2.cSoprDoc
                                 )) = tsOk )
    {
      SoprHoz2.summaSp := SoprHoz2.summaSp - oldSum + sumOrd; //по ордерам

      if ( SoprHoz2.kodValSp <> 0 )
      {
        SoprHoz2.sumValSp:= SoprHoz2.sumValSp -
                            oValFunc.GetAnyCurrency(oldVal, oldSumV, SklOrder.dOrd,  SoprHoz2.kodValSp);//-old - в валюту списания ордеров
        SoprHoz2.sumValSp:= SoprHoz2.sumValSp +
                            oValFunc.GetAnyCurrency(cValOrd, vSumOrd, SklOrder.dOrd, SoprHoz2.kodValSp);//+new - в валюту списания ордеров
      }
      else
        if ( cValOrd <> 0 )
        {
          SoprHoz2.sumValSp:= vSumOrd;
          SoprHoz2.kodValSp:= cValOrd;
        }
        else
          SoprHoz2.sumValSp:= 0;

      iSH.UpdByHan(SoprHoz2.BufferP);

      //суммы по накладной для переноса в soprhoz ордера
      soprSum := SoprHoz2.summa;
      soprVSum:= SoprHoz2.sumValut;
      soprVal := SoprHoz2.kodValut;
    }
  }

  //обновление хозоперации для ордера:
  SoprHoz.summa    := soprSum;   //из sh.soprhoz накладной
  SoprHoz.sumValut := soprVSum;  //из sh.soprhoz накладной
  SoprHoz.kodValut := soprVal;   //из sh.soprhoz накладной

  if ( boExistsSH )
    UpdateSoprHozAktUslB := ( iSH.UpdByHan(SoprHoz.BufferP) = tsOk );
  else
    UpdateSoprHozAktUslB := ( iSH.InsByHan(SoprHoz.BufferP) = tsOk );

  SetBounds(#SoprHoz);
}
//******************************************************************************
// из спецификации вышестоящего документа
Procedure GetMCUslDO;
{
  // Выбор из спецификации ДО
  if (KatSopr.cStepDoc <> 0)
    { // выбор из резерва
      GetMCUslSopr;
    }
  else
    { // выбор из спецификации договора/соглашения/кал.плана
    if ( (KatSopr.cCalPlan    <> 0) OR (KatSopr.cAppDogovor <> 0) OR
         (KatSopr.cDogovor    <> 0) )
      InsertPosDog;
      else
        { // выбора из каталога МЦ/услуг
            GetMCUSLKat
        }
    }
}
//******************************************************************************

#doc
  Окно редактирования спецификации акта на услуги
#end

Window SpecifInfo 'Перечень услуг' EscClose;
  Show at (1,2,105,28);
Panel panSpecifInfo
  show (,,,18)
  Table SpSopr;

Screen scrSpecifInfo ('',hcZakupWActUslEditSpec,)
Fields
#ifdef __DSD__
 KatUSL.Name   ('Наименование услуги.Выбирается из классификатора', , sci13478Esc): Protect, NoDel;
 KatUSL.Kod    ('Код услуги.Выбирается из классификатора', , sci13478Esc): Protect, NoDel;
#else
 KatUSL.Name   ('Наименование услуги.Выбирается из классификатора', , sci1378Esc): Protect, NoDel;
 KatUSL.Kod    ('Код услуги.Выбирается из классификатора', , sci1378Esc): Protect, NoDel;
#end
 TTNResOtgr.Name   ('Ресурс отгрузки', , sci1378Esc): Protect, QuickChoice;
 SpSopr.Kol    ('Количество услуг по акту',,sci178Esc):[prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
 SpSopr.KolFact('Фактически реализованное количество',,sci178Esc):[prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
 OtpEd         ('Наименование единицы измерения', , sci1378Esc): Protect, NoDel;
 StrCurse: Skip;
 SpSopr.rPrice ('Цена приобретения в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'];
 SpSopr.rVPrice('Цена приобретения в валюте',,sci1378Esc):[brForSopr_VPrice, '\2p[|-]36`666`666`666`666.88'];
 klVal.Simvolv ('Символ валюты.', , sci1378Esc): Protect;
 KatParty.Name ('Партия услуги', , sci1378Esc): Protect;
 AutoNalogs    ('Налоги рассчитываются автоматически или вручную?', , sci1378Esc): Protect;
 StrSumNal     ('Сумма налогов по позиции в НДЕ', , sci1378Esc): Skip;
 sumNalUch_s: Skip;
 sumNalUch      ('Сумма для налогового учета в НДЕ. F3 - просмотр составляющих суммы', hcI_sopprhSostSymmNalog, sci1378Esc): [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect;
Buttons
 cmAttrib ,,,'Просмотр/редактирование налогов к позиции документа',,sci178Esc;
<<
  Наименование услуги                           Номенклатурный номер
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@
 `Ресурс отгрузки`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Количество по документу`.@@@@@@@@@@@@@   `фактически`.@@@@@@@@@@@@@@
 `Единица измерения`      .@@@@@@@@@@@@@     .@@@@@@@@@@@@@@@@@@@@@@@@
 `Цена`  .@@@@@@@@@@@@@@@@`Цена в валюте`  .@@@@@@@@@@@@@@@@.@@@@@@@@@
 `Партия`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  Налоги .@@@@@@@@@@ на сумму.@@@@@@@@@@@@ .@@@@@@@@@@@.@@@@@@@@@@@@@@
                       <.~Н~алоги к позиции.>
>>
end; // Screen scrSpecifInfo

Screen scrSpecifInfo110 ('',hcuks1_Perech_Material,)
Fields
#ifdef __DSD__
 KatMc.Name    ('Наименование МЦ.Выбирается из классификатора', , sci13478Esc): Protect;
 KatMc.BarKod  ('Код МЦ.Выбирается из классификатора', , sci13478Esc): Protect;
#else
 KatMc.Name    ('Наименование МЦ.Выбирается из классификатора', , sci1378Esc): Protect;
 KatMc.BarKod  ('Код МЦ.Выбирается из классификатора', , sci1378Esc): Protect;
#end
 KatMCUKS.Name ('Наименование услуги', , sci1378Esc): Protect;
 SpSopr.ProcUb ('Процент нормативной убыли МЦ') : [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'];
 OtpEd         ('Наименование единицы измерения', , sci1378Esc): Protect;
 SpSopr.Kol    ('Количество МЦ по акту',,sci178Esc):[prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
 SpSopr.KolFact('Фактически реализованное количество',,sci178Esc):[prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
 SpSopr.KolOpl ('Подлежащее оплате по акту количество ', , sci178Esc): [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], NoProtect;
 baseCost      ('Цена базовая в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], NoProtect;
 TblBaseCost.DopSum2('Стоимость базовая в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], Protect, Skip;
 SpSopr.rPrice ('Цена приобретения в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'];
 SumPrice ('Стоимость приобретения в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], Protect, Skip;
 SpSopr.rVPrice('Цена приобретения в валюте',,sci1378Esc):[brForSopr_VPrice, '\2p[|-]36`666`666`666`666.88'];
 klVal.Simvolv ('Символ валюты.', , sci1378Esc): Protect;
 StrCurse: Skip;
 KatParty.Name ('Партия МЦ', , sci1378Esc): Protect;
 AutoNalogs    ('Налоги рассчитываются автоматически или вручную?', , sci1378Esc): Protect;
 StrSumNal     ('Сумма налогов по позиции в НДЕ', , sci1378Esc): Skip;
 sumNalUch_s: Skip;
 sumNalUch      ('Сумма для налогового учета в НДЕ. F3 - просмотр составляющих суммы', hcI_sopprhSostSymmNalog, sci1378Esc): [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect;
Buttons
 cmAttrib ,,,'Просмотр/редактирование налогов к позиции документа',,sci178Esc;
<<
  Наименование МЦ                               Номенклатурный номер
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@
 `Относится к позиции`    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Процент убыли` .@@@@@@@@@
  Количество:                        `Единица измерения`.@@@@@@@@@@@@@
   `по документу`.@@@@@@@@@@@@@@
                                        `фактически`   .@@@@@@@@@@@@@@
                                        `к оплате`     .@@@@@@@@@@@@@@

 `Цена базовая`  .@@@@@@@@@@@@@@@@`Стоимость базовая`.@@@@@@@@@@@@@@@@
 `Цена текущая`  .@@@@@@@@@@@@@@@@`Стоимость текущая`.@@@@@@@@@@@@@@@@
 `Цена в валюте` .@@@@@@@@@@@@@@@@.@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@

 `Партия`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  Налоги .@@@@@@@@@@ на сумму.@@@@@@@@@@@@ .@@@@@@@@@@@.@@@@@@@@@@@@@@
                       <.~Н~алоги к позиции.>
>>
end; // Screen scrSpecifInfo110

Screen scrSpecifInfoUsl ('',hcZakupWActUslEditSpec,)
Fields
#ifdef __DSD__
 KatUSL.Name   ('Наименование услуги.Выбирается из классификатора', , sci13478Esc): Protect, NoDel;
 KatUSL.Kod    ('Код услуги.Выбирается из классификатора', , sci13478Esc): Protect, NoDel;
#else
 KatUSL.Name   ('Наименование услуги.Выбирается из классификатора', , sci1378Esc): Protect, NoDel;
 KatUSL.Kod    ('Код услуги.Выбирается из классификатора', , sci1378Esc): Protect, NoDel;
#end
 UchPriceOrd   ('Учитывать ли стоимость услуги при расчете учетной цены',, sci1378Esc): Protect;
 OtpEd         ('Наименование единицы измерения', , sci1378Esc): Protect, NoDel;
 SpSopr.Kol    ('Количество услуг по акту',,sci178Esc):[prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
 SpSopr.KolFact('Фактически реализованное количество',,sci178Esc):[prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
 baseCost      ('Цена базовая в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], NoProtect;
 TblBaseCost.DopSum2('Стоимость базовая в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], Protect, Skip;
 SpSopr.rPrice ('Цена приобретения в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'];
 SumPrice ('Стоимость приобретения в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'], Protect, Skip;
 SpSopr.rVPrice('Цена приобретения в валюте',,sci1378Esc):[brForSopr_VPrice, '\2p[|-]36`666`666`666`666.88'];
 klVal.Simvolv ('Символ валюты.', , sci1378Esc): Protect;
 StrCurse      : skip, {font = {bold = TRUE}};
 KatParty.Name ('Партия услуги', , sci1378Esc): Protect;
 AutoNalogs    ('Налоги рассчитываются автоматически или вручную?', , sci1378Esc): Protect;
 StrSumNal     ('Сумма налогов по позиции в НДЕ', , sci1378Esc): Skip;
 sumNalUch_s: Skip;
 sumNalUch      ('Сумма для налогового учета в НДЕ. F3 - просмотр составляющих суммы', hcI_sopprhSostSymmNalog, sci1378Esc): [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect;
Buttons
 cmAttrib ,,,'Просмотр/редактирование налогов к позиции документа',,sci178Esc;
<<
  Наименование услуги                           Номенклатурный номер
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@
 `Уч. цена`      .@@@@@
  Количество:                        `Единица измерения`.@@@@@@@@@@@@@
   `по документу`.@@@@@@@@@@@@@@
   `фактически`  .@@@@@@@@@@@@@@

 `Цена базовая`  .@@@@@@@@@@@@@@@@`Стоимость базовая`.@@@@@@@@@@@@@@@@
 `Цена текущая`  .@@@@@@@@@@@@@@@@`Стоимость текущая`.@@@@@@@@@@@@@@@@
 `Цена в валюте` .@@@@@@@@@@@@@@@@.@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@

 `Партия`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  Налоги .@@@@@@@@@@ на сумму.@@@@@@@@@@@@ .@@@@@@@@@@@.@@@@@@@@@@@@@@
                       <.~Н~алоги к позиции.>
>>
end; // Screen scrSpecifInfoUsl

Screen scrSpecifInfo2 ('',hcSellWActPriemEditBottom,)
Fields
#ifdef __DSD__
 KatMc.Name    ('Наименование МЦ.Выбирается из классификатора', , sci13478Esc): Protect;
 KatMc.BarKod  ('Код МЦ.Выбирается из классификатора', , sci13478Esc): Protect;
#else
 KatMc.Name    ('Наименование МЦ.Выбирается из классификатора', , sci1378Esc): Protect;
 KatMc.BarKod  ('Код МЦ.Выбирается из классификатора', , sci1378Esc): Protect;
#end
 SpSopr.Kol    ('Количество МЦ по акту',,sci178Esc):[prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
 SpSopr.KolFact('Фактически реализованное количество',,sci178Esc):[prSignsInKol, '\3p[|-]36`666`666`666`666.888'];
 OtpEd         ('Наименование единицы измерения', , sci1378Esc): Protect;
 StrCurse: Skip;
 SpSopr.rPrice ('Цена приобретения в национальной валюте',,sci178Esc):[brForSopr_Price, '\2p[|-]36`666`666`666`666.88'];
 SpSopr.rVPrice('Цена приобретения в валюте',,sci1378Esc):[brForSopr_VPrice, '\2p[|-]36`666`666`666`666.88'];
 klVal.Simvolv ('Символ валюты.', , sci1378Esc): Protect;
 KatParty.Name ('Партия МЦ', , sci1378Esc): Protect;
 AutoNalogs    ('Налоги рассчитываются автоматически или вручную?', , sci1378Esc): Protect;
 StrSumNal     ('Сумма налогов по позиции в НДЕ', , sci1378Esc): Skip;
 sumNalUch_s: Skip;
 sumNalUch      ('Сумма для налогового учета в НДЕ. F3 - просмотр составляющих суммы', hcI_sopprhSostSymmNalog, sci1378Esc): [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect;
Buttons
 cmAttrib ,,,'Просмотр/редактирование налогов к позиции документа',,sci178Esc;
<<
  Наименование МЦ                               Номенклатурный номер
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@
 `Количество по документу`.@@@@@@@@@@@@@   `фактически`.@@@@@@@@@@@@@@
 `Единица измерения`      .@@@@@@@@@@@@@     .@@@@@@@@@@@@@@@@@@@@@@@@
 `Цена`  .@@@@@@@@@@@@@@@@`Цена в валюте`  .@@@@@@@@@@@@@@@@.@@@@@@@@@
 `Партия`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  Налоги .@@@@@@@@@@ на сумму.@@@@@@@@@@@@ .@@@@@@@@@@@.@@@@@@@@@@@@@@
                       <.~Н~алоги к позиции.>
>>
end; // Screen

//******************************************************************************

HandleEvent  // panSpecifInfo
#include soprc13.vpp
#include soprd07.vpp

cmPick:
{
  if (CurField = #KatMCUKS.Name)
    if ( IsValid(#SpSopr) )
    {
      var aZtr : comp;

      if ( RunInterface('GetMCFromKatSopr', KatSopr.NRec, SpSopr.cSpSopr,
                                            SpSopr.cUks, aZtr, word(2)) <> cmCancel )
      {
        Update Current SpSopr;
        Update_Current_SpecZatr(aZtr);
        RereadRecord(#SpSopr);
      }
    }
}

cmPositionChanged:
{
  if( KatSopr.VidSopr = 110 )
  {
    if ( IsValid(#SpDocSmeta) )
    {
      SetFieldOption(#SpSopr.rPrice, ofProtected);
    }
    else
    {
      ClearFieldOption(#SpSopr.rPrice, ofProtected);
    }

    ReReadRecord(#SpSopr);
  }
}

cmExprFieldChanged:
{
  case CurField() of
    #baseCost: // поле "цена базовая"
    {
      if( not NullVipRef( oBaseCostStorage ) )
      {
        // Обновить базовую цену, пересчитать базовую стоимость позиции спецификации АВР
        oBaseCostStorage.UpdateBaseCost( KatSopr.nRec, SpSopr.nRec, double( ExprFieldValue() ) );
      }
    }
  end;
}

end; // HandleEvent panSpecifInfo
end; // Panel panSpecifInfo

//******************************************************************************

Panel pnRaspred
  show (,19,,)
  Table SoprOrdB;

TabbedSheet Bottom tsKauEdit

Browse brRaspred 'Распределение по складам' ('',hcZakupWActUslEditSpec,)
  Table SoprOrdB;

Fields
  KatPodr2.Name #3'Подразделение' ('Наименование подразделения/склада выбранного разреза',,sci1378Esc):[24];
  KatMol2.Name  #3'МОЛ' ('Фамилия МОЛ выбранного разреза',,sci1378Esc):[24];
  PercentSumma  #3'Сумма' ('Часть стоимости, распределяемое на данный разрез', , sci178Esc): [17], [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], NoProtect, NoAutoSize;
  Percent       #3'Процент' ('Процент от общего количества МЦ, распределяемый на данный разрез', , sci178Esc): [8.3], NoProtect, NoAutoSize;
  SoprOrdB.kol  #3'Количество' ('Количество МЦ, распределяемое на данный разрез',,sci178Esc):[14.3],NoAutoSize;
end; // Browse brRaspred

Embedded scKauEdit 'Целевой учет' Interface;
end;

#include LongNameMC.pan

Embedded brRaspPlat 'Распределение платежей' Interface oRaspPlat;
end;

end; // TabbedSheet

HandleEvent
#include soprdb07.vpp

cmPositionChanged:
  SetTabbedSheetVisible(scLongName, boGetTune(if (SpStep.PrMC = 1, 'McUsl.VarNameMC_IsUse', 'McUsl.VarNameUsl_IsUse')));

end;
end; // Panel pnRaspred

//******************************************************************************

#ifdef __MTR_TO_SPEC__
#include lm2sautopick.vpp
#end

procedure DoChooseFromPrice; forward;
procedure DoChooseFromSmet; forward;
procedure DoViewEcitCalcUsl; forward;

HandleEvent  // window specifinfo
#include soprc13.vpp

#ifdef __MTR_TO_SPEC__
cmIerarchy :
{
  if ( (CurTable = #SpSopr) and (IsValid(#SpSopr)) )
    {
      if ( TypeSopr = 110 )
      {
        RunInterface('EditMtr2Spec', if(not OtkatToOldState(false, word(0)), 1, if(KatSopr.cUKS <> 0, 3, if(IsValid(#SmetaStroy), 2, 4))) + 100, GetLinkMTRAutoPick(CurField), word(coSpSopr), SpSopr.nRec);

        isCBDSensitiveModified := true; // см. описание в объявлении переменной
        isRFPSensitiveModified := true; // см. описание в объявлении переменной
      }
      else
        RunInterface('EditMtr2Spec', if(not OtkatToOldState(false, word(0)), 1, if(KatSopr.cUKS <> 0, 3, if(IsValid(#SmetaStroy), 2, 0))) + 100, GetLinkMTRAutoPick(CurField), word(coSpSopr), SpSopr.nRec);

      SetModified(true);
      UpdateTable;
    }
}
#end

cmHotKeys:
{
  if( KatSopr.VidSopr = 110 )
  {
    if( SpSopr.PrMc = 1 )
    {
      // материал
      if ( KatSopr.cOrgBase <> coGetTune('MyOrg') and KatSopr.TipSopr = 1 )
      {
        DisableCommand(cmSaveDoc);
        //DisableCommand(cmRestoreDoc);
      }

      PutHotCommand( RunMenu( 'mnuAktSpecifInfoMc' ) );

      EnableCommand(cmSaveDoc);
      EnableCommand(cmRestoreDoc);
    }
    else
    {
      // услуга
      PutHotCommand( RunMenu( 'mnuAktSpecifInfoUsl' ) );
    }
  }
  else
    PutHotCommand(RunMenu('SoprUslSpSoprExt_HotKeys'));
}

cmXchangeMCSetup :
{
  //Пункт лок. меню "Перечень серийных номеров"
#ifdef _USE_SERIAL_
  oSerialMove.SetSerialForSopr(SpSopr.nRec, true);
#end
}

cmValue17:
{
  // Пункт лок. меню "Просмотр и изменение параметров расчетной услуги"
  DoViewEcitCalcUsl();
}

cmValue20:
{
  // Пункт лок. меню "Отчет - Расчет стоимости услуги"
  oCalcFuns.RunCostUslRep(SpSopr.NRec, coSpSopr, 0);
}

cmMulSelDO: //Ctrl+I : Выбор из смет
{
  DoChooseFromSmet();
}

cmPickClass:
{
  //Установка внешней классификации к позиции SpSopr
  if( CurTable = #SpSopr )
  {
    if ( SpSopr.NRec <> 0 )
    {
      RunInterface(ExClassifier, coSpSopr/*word(CurTableCode)*/, SpSopr.NRec);
    }
  }
}

cmPickAttr:
{
  // внешние атрибуты
  if( CurTable = #SpSopr )
  {
    if ( SpSopr.NRec <> 0 )
    {
      RunInterface(Attribute, coSpSopr, SpSopr.NRec);
    }
  }
}

cmSetGrNal:
{
  if ( NOT IsValid (#SpSopr) )
  {
    Message('Не указана МЦ/услуга...', CancelButton);
    Abort;
     Exit;
  }

  if ( boGetTune('Doc.iNalogsFromSpStep') )
    if (KatSopr.cStepDoc <> 0)
       if (SpSopr.cSpStep <> 0)
       {
         Message('Для внесения несоответствия между налогами документа и ДО '#13#3 +
                 'необходимо переключить настройку: Налоги сопроводительных документов рассчитывать по ДО=нет');
         Exit;
       }

  if (NOT OtkatToOldState(TRUE, word(0)))
    Exit;

  var tGrNal: comp;

  if (RunInterface(GetGrNal,tGrNal, word(0)) <> cmCancel)
  {
    if ( KatSopr.cStepDoc <> 0 )
      if (Message('Вы согласны внести несоответствие'#13#3 +
                  'между налогами накладной и ДО ?', YesNo) = cmNo)
        Exit;

    if (NOT OtkatToOldState(TRUE, word(0)))
      Exit;

    Delete NoVisual SpDocNal where ((  SpSopr.NRec == SpDocNal.cSpDoc
                                   AND TypeSopr    == SpDocNal.TipDoc ));

    SpSopr.ManualTax := 0;

    RecalcNalogs(tGrNal,0);

    if ( GetFirst SpDocNal where ((  SpSopr.NRec == SpDocNal.cSpDoc
                                 AND TypeSopr    == SpDocNal.TipDoc )) <> tsOk )
      SpSopr.ManualTax := 1;//пир 101.30737

    SetModified(True);
    CheckSumma(FALSE);
  }
}

cmAttrib :
{
  RunWindowModal(EditNalogs);
}

cmRestoreDoc : // Ctrl+F3
{
  // Пункт локального меню "Выбор позиции из прайс-листа"
  // и "Выбор позиций текущих остатков" для МЦ
  DoChooseFromPrice();
}

cmInit:
{
  SelectField(if(KatSopr.cVal = 0, #SpSopr.rPrice, #SpSopr.rVPrice));

  if (KatSopr.VidSopr = 114)
    if (SpSopr.PrMc = 1)
    {
      SetWindowTitle(SpecifInfo,'Перечень МЦ');
      SetFormat(scrSpecifInfo2);
    }

  if ( KatSopr.VidSopr = 110 )
  {
    if ( SpSopr.PrMc = 1 )
    {
      SetWindowTitle(SpecifInfo,'Перечень МЦ');
      SetFormat(scrSpecifInfo110);

      if ( CurField <> #KatMC.BarKod )
        SelectField(#KatMC.Name)
    }
    else
    {
      SetWindowTitle(SpecifInfo,'Перечень услуг');
      SetFormat(scrSpecifInfoUsl);

      if ( CurField <> #KatUsl.Kod )
        SelectField(#KatUsl.Name);
    }
  }
}

cmOpenSearch:
{
  if (CurField = #TTNResOtgr.Name)
  {
    QuickChoiceName := 'qcTTNResOtgrName' ;
    ProcessCommand(cmPick);
  }
}
#ifdef __DSD__
cmEdit:
  case CurField of
    #KatMC.Name
  , #KatMC.BarKod
  , #KatUsl.Name
  , #KatUsl.Kod   :  RunInterface(iViewMCUslCatal,   SpSopr.PrMC,   SpSopr.cMcUsl, 0, coSpSopr, SpSopr.NRec);
  end;
#end
end; // HandleEvent Window SpecifInfo
end; // Window specifinfo

//******************************************************************************
#doc
  Расширенная информация акта на услуги
#end

Window ExtendetInfo 'Расширенная информация' EscClose;
//  Show at (5,4,75,24);
  Show at (,,110,22);
Panel panExtendetInfo
  Table KatSopr;
Screen scrExtendetInfo110 ('',hcZakupWActUslEditTopPanDop,)
Fields
  DogNoDoc      ('Номер договора', , sci1378Esc): Protect;
  Dogovor.dDoc  ('Дата заключения договора', , sci178Esc): [, 'DD/MM/YYYY'], Protect;
  AttrDogD.SUBJECT1 ('Предмет договора', , sci1Esc): Protect;
  AppDogovor.NoDoc ('Номер соглашения', , sci1378Esc): Protect;
  AppDogovor.dDoc ('Дата заключения соглашения', , sci178Esc): [, 'DD/MM/YYYY'], Protect;
  AttrDogS.SUBJECT1 ('Предмет соглашения', , sci1Esc): Protect;
  CalPlan.NoDoc  ('Номер пункта календарного плана', , sci1378Esc): Protect;
  CalPlan.dInput ('Дата ввода пункта календарного плана', , sci178Esc): [, 'DD/MM/YYYY'], Protect;
  piExtAttr.mGetAttr(coCalPlan, KatSopr.cCalPlan, 'НИОКР. Наименование этапа')
                 ('Наименование этапа', hcKouDocFDog, sci1Esc): Protect;
  KuratPodr.Name ('Курирующее подразделение', , sci178Esc): Protect, NoDel;
  StroyName ('Стройка',,sci178Esc);
  KatStroy.Name ('Объект строительства. Выбирается по <F3>',,sci1378Esc)
/*    {Font = {BackColor = if (KatSopr.cUKS = 0, ColorNeed, 0)}}*/, Protect;//, QuickChoice;
  KatOrg.Name   ('Подрядчик', , sci1378Esc): Protect,
  {Font = {BackColor = if (KatSopr.cOrgBase = 0,ColorNeed,0)}};
  KatStroy.tFinancier: [List 'подразделение',
                             'контрагент',
                             'центр ответственности'], Skip;
  FinStru ('финансирующая структура',,sci178Esc) : Protect;
  KatOrgT.Name   ('Заказчик', , sci1378Esc): Protect;
  OrgVzr.Name    ('Контрагент взаиморасчетов', , sci1378Esc): Protect;
  KatNazna.Name  ('Назначение', , sci1378Esc): Protect;
  Persons.FIO    ('Лицо, ответственное за проведение операции', , sci1378Esc): Protect;
  vhNal          ('Входимость налогов в цену услуг', , sci1378Esc): Protect;
  KatSopr.dPrice ('Дата оплаты по акту',,sci1378Esc);
  KatSopr.dOpr   ('Дата оказания услуги по акту',,sci1378Esc);
  OtvPodr.Name   ('Центр ответственности, ответственный за выполнение.',,sci1378Esc), PickButton, Protect;
Buttons
  cmTextWind,,, 'Примечание' ;
  cmValue1,,,   'Авизо сформированные по документу',,sci1Esc;// АВИЗО (Sanny ICQ-47012798)
  cmValFld2,,,'Группы платежных средств по акту',,sci1Esc;
<<

 `Договор`           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `от` .@@@@@@@@@@@ <.      Примечание        .>
 `Предмет договора`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Соглашение`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `от` .@@@@@@@@@@@ <.        Авизо           .>
 `Предмет соглашения`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Календарный план`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `от` .@@@@@@@@@@@ <.Группы платежных средств.>
 `Наименование этапа`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Курирующее подразделение`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 `Стройка`           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Объект`            .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Подрядчик`          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Инвестор`          .@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Заказчик`           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Контрагент взаиморасчетов`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Назначение`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Операцию провел`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                     .@@@@@@@@@@@@@@@@@@@@@@@@ `Дата цен`.@@@@@@@@@@@
                                        `Дата исполнения`.@@@@@@@@@@@
 `Центр ответственности`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

Screen scrExtendetInfo ('',hcZakupWActUslEditTopPanDop,)
Fields
  DogNoDoc      ('Номер договора', , sci1378Esc): Protect;
  Dogovor.dDoc  ('Дата заключения договора', , sci178Esc): [, 'DD/MM/YYYY'], Protect;
  AttrDogD.SUBJECT1 ('Предмет договора', , sci1Esc): Protect;
  AppDogovor.NoDoc ('Номер соглашения', , sci1378Esc): Protect;
  AppDogovor.dDoc ('Дата заключения соглашения', , sci178Esc): [, 'DD/MM/YYYY'], Protect;
  AttrDogS.SUBJECT1 ('Предмет соглашения', , sci1Esc): Protect;
  CalPlan.NoDoc  ('Номер пункта календарного плана', , sci1378Esc): Protect;
  CalPlan.dInput ('Дата ввода пункта календарного плана', , sci178Esc): [, 'DD/MM/YYYY'], Protect;
  piExtAttr.mGetAttr(coCalPlan, KatSopr.cCalPlan, 'НИОКР. Наименование этапа')
                 ('Наименование этапа', hcKouDocFDog, sci1Esc): Protect;
  KuratPodr.Name ('Курирующее подразделение', , sci178Esc): Protect, NoDel;
  KatPodr.Name   ('Подразделение, принимающее услуги', , sci1378Esc): Protect;
  KatMol.Name    ('Материально-ответственное лицо', , sci1378Esc): Protect;
  KatOrgF.Name   ('Подрядчик', , sci1378Esc): Protect;
  KatOrgT.Name   ('Заказчик', , sci1378Esc): Protect;
  OrgVzr.Name    ('Контрагент взаиморасчетов', , sci1378Esc): Protect;
  KatNazna.Name  ('Назначение', , sci1378Esc): Protect;
  KatSopr.sDover ('Доверенное лицо', , sci1378Esc): noprotect;
  KatSopr.nDover ('Номер доверенности, <Ctrl><F3> - выбор из доверенностей контрагентов', , sci1378Esc): noprotect;
  KatSopr.dDover ('Дата доверенности', , sci178Esc): [10, 'DD/MM/YYYY'];
  Persons.FIO    ('Лицо, ответственное за проведение операции', , sci1378Esc): Protect;
  vhNal          ('Входимость налогов в цену услуг', , sci1378Esc): Protect;
  KatSopr.dPrice ('Дата оплаты по акту',,sci1378Esc);
  KatSopr.dOpr   ('Дата оказания услуги по акту',,sci1378Esc);
  AttrVKaz.vString ('Код ОКЭД организации', , sci1378Esc), PickButton, Protect;
  OtvPodr.Name   ('Центр ответственности, ответственный за выполнение.',,sci1378Esc), PickButton, Protect;
Buttons
  cmTextWind,,, 'Примечание' ;
  cmValue1,,,   'Авизо сформированные по документу',,sci1Esc;// АВИЗО (Sanny ICQ-47012798)
  cmValFld2,,,'Группы платежных средств по акту',,sci1Esc;
<<

 `Договор`           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `от` .@@@@@@@@@@@ <.      Примечание        .>
 `Предмет договора`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Соглашение`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `от` .@@@@@@@@@@@ <.        Авизо           .>
 `Предмет соглашения`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Календарный план`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `от` .@@@@@@@@@@@ <.Группы платежных средств.>
 `Наименование этапа`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Курирующее подразделение`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 `Подразделение`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `МОЛ`               .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Подрядчик`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Заказчик`          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Контрагент взаиморасчетов`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Назначение`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Доверенное лицо`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `№ доверенности `   .@@@@@@@@@@@@@@@@`Дата доверенности`.@@@@@@@@@@@
 `Операцию провел`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                     .@@@@@@@@@@@@@@@@@@@@@@@@ `Дата цен`.@@@@@@@@@@@
                                        `Дата исполнения`.@@@@@@@@@@@
 `Код ОКЭД`          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Центр ответственности`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

Screen scrExtendetInfo2 ('',hcSellWActPriemEditTopDop,)
Fields
  DogNoDoc      ('Номер договора', , sci1378Esc): Protect;
  Dogovor.dDoc  ('Дата заключения договора', , sci178Esc): [, 'DD/MM/YYYY'], Protect;
  AttrDogD.SUBJECT1 ('Предмет договора', , sci1Esc): Protect;
  AppDogovor.NoDoc ('Номер соглашения', , sci1378Esc): Protect;
  AppDogovor.dDoc ('Дата заключения соглашения', , sci178Esc): [, 'DD/MM/YYYY'], Protect;
  AttrDogS.SUBJECT1 ('Предмет соглашения', , sci1Esc): Protect;
  CalPlan.NoDoc  ('Номер пункта календарного плана', , sci1378Esc): Protect;
  CalPlan.dInput ('Дата ввода пункта календарного плана', , sci178Esc): [, 'DD/MM/YYYY'], Protect;
  piExtAttr.mGetAttr(coCalPlan, KatSopr.cCalPlan, 'НИОКР. Наименование этапа')
                 ('Наименование этапа', hcKouDocFDog, sci1Esc): Protect;
  KuratPodr.Name ('Курирующее подразделение', , sci178Esc): Protect, NoDel;
  KatPodr.Name   ('Подразделение, принимающее МЦ', , sci1378Esc): Protect;
  KatMol.Name    ('Материально-ответственное лицо', , sci1378Esc): Protect;
  KatOrgF.Name   ('Подрядчик', , sci1378Esc): Protect;
  KatOrgT.Name   ('Заказчик', , sci1378Esc): Protect;
  OrgVzr.Name    ('Контрагент взаиморасчетов', , sci1378Esc): Protect;
  KatNazna.Name  ('Назначение', , sci1378Esc): Protect;
  Persons.FIO    ('Лицо, ответственное за проведение операции', , sci1378Esc): Protect;
  vhNal          ('Входимость налогов в цену МЦ', , sci1378Esc): Protect;
  KatSopr.dPrice ('Дата оплаты по акту',,sci1378Esc);
  KatSopr.dOpr   ('Дата приемки МЦ по акту',,sci1378Esc);
  OtvPodr.Name   ('Центр ответственности, ответственный за выполнение.',,sci1378Esc), PickButton, Protect;
Buttons
  cmTextWind,,, 'Примечание' ;
  cmValue1,,,   'Авизо сформированные по документу',,sci1Esc;// АВИЗО (Sanny ICQ-47012798)
  cmValFld2,,,'Группы платежных средств по акту',,sci1Esc;
<<

 `Договор`           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `от` .@@@@@@@@@@@ <.      Примечание        .>
 `Предмет договора`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Соглашение`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `от` .@@@@@@@@@@@ <.        Авизо           .>
 `Предмет соглашения`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Календарный план`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `от` .@@@@@@@@@@@ <.Группы платежных средств.>
 `Наименование этапа`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Курирующее подразделение`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 `Подразделение`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `МОЛ`               .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Подрядчик`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Заказчик`          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Контрагент взаиморасчетов`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Назначение`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Операцию провел`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                     .@@@@@@@@@@@@@@@@@@@@@@@@ `Дата цен`.@@@@@@@@@@@
                                        `Дата исполнения`.@@@@@@@@@@@
 `Центр ответственности`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

//******************************************************************************
Procedure ProcessDogAppPlan;
{
  set KatSopr.cDogovor    := KatSopr.cDogovor;
  set KatSopr.cAppDogovor := KatSopr.cAppDogovor;
  set KatSopr.cCalPlan    := KatSopr.cCalPlan;
  set KatSopr.cNZakaz     := 0;
  set KatSopr.cStepDoc    := 0;

  if (KatSopr.cAppDogovor = 0)
  {
    if (KatSopr.cDogovor <> 0)
      set KatSopr.cNazna := Dogovor.cProg;
  }
  else
    set KatSopr.cNazna := AppDogovor.cProg;

  if (TypeSopr = 110)
  {
    var OldOrg : comp;

    OldOrg := KatSopr.cOrg;

    set KatSopr.cOrgBase := Dogovor.cOrg;
    set KatSopr.cOrg := Dogovor.cOrg;

    if ( ChangeSpDocNalOrg(OldOrg, KatSopr.cOrg) )
        CheckSumma(TRUE);
  }
}
End; // Panel

//******************************************************************************
HandleEvent  // Extendetinfo
#define __Function_CanLinkDogovor__
#include soprc13.vpp

cmInit :
{
  case TypeSopr of
    114:
      SetFormat(scrExtendetInfo2)
    110:
      SetFormat(scrExtendetInfo110)
    111:
    {
      if ((KatSopr.wADoc = cgCustomAkt) and (Pos(csSymbol_NalAkt, KatSopr.NSopr) = 1))
        ClearFieldOption(#SchFactNum, ofSelectable)
      else
        SetFieldOption(#SchFactNum, ofSelectable);

      SetFormat(scrExtendetInfo);
    }
  end;

  if (NOT boGetTune('Doc.PickOtvPodr'))
    ClearFieldOption(#OtvPodr.Name, ofSelectable);
}

cmInit:
{
  //Казахстан
  var isKaz: boolean;

  isKaz := (wGetTune('Country') = 3);

  cfsSetCurrentContainer('ExtendetInfo');
  cfsSetProp('l_scrExtendetInfo_Код_ОКЭД',         'Visible', isKaz);
  cfsSetProp('i_scrExtendetInfo_AttrVKaz.vString', 'Visible', isKaz);

  if (IsNew)
    if (GetFirst AttrVKaz where (( comp(0) == AttrVKaz.NRec )) = tsOk) {};
}

cmOpenSearch:
{
   PutCommand(cmPick);
}

cmRestoreDoc:
{
  case CurField of
    #DogNoDoc, #Dogovor.dDoc,
    #AppDogovor.NoDoc, #AppDogovor.dDoc,
    #CalPlan.NoDoc, #CalPlan.dInput:
    {
      SaveMyDsk(word(2 + 4), 'GetDAK_Status'  ); // разрешен выбор только из исполняемых или приостановленных
      SaveMyDsk(byte(1 + 2), 'GetDAK_Status_e'); // К договорам и соглашениям

      if ( NullVipRef(pRunDSel) )
        if ( not(LoadVipRef(pRunDSel, 'RunDocSelections')) )
        {
          Message('Не удалось загрузить библиотеку RunDocSelObj', Error);
          Exit;
        }

      var isSelect : word;

      if ((CurField = #DogNoDoc        ) OR (CurField = #Dogovor.dDoc   )) isSelect := 1;
      if ((CurField = #AppDogovor.NoDoc) OR (CurField = #AppDogovor.dDoc)) isSelect := 2;
      if ((CurField = #CalPlan.NoDoc   ) OR (CurField = #CalPlan.dInput )) isSelect := 4;

      if (pRunDSel.Ctrl_F3(KatSopr.cDogovor,
                           KatSopr.cAppDogovor,
                           KatSopr.cCalPlan,
                           longint(vcGetDog_Status), // по умолчанию (=0) фильтр только по исполняемым
                           isSelect                  // откуда вызвали:
                                                      // 1 - договора
                                                      // 2 - соглашение
                                                      // 4 - календарный план
                          ) <> cmCancel)
      {
        var OldOrg: comp;
        OldOrg := KatSopr.cOrgBase;

        if (TypeSopr = 111 OR TypeSopr = 110)
        {
          set KatSopr.cDogovor    := KatSopr.cDogovor;
          set KatSopr.cAppDogovor := KatSopr.cAppDogovor;
          set KatSopr.cCalPlan    := KatSopr.cCalPlan;

          if (BaseDoc.cDogovor <> KatSopr.cDogovor)
            set KatSopr.cStepDoc := 0;

          if (NZakaz.cDogovor <> KatSopr.cDogovor)
            set KatSopr.cNZakaz := 0;

          if ( InsertMCProcess )  //формирование накладной по: договор-соглашение-кал.рлан
            if ( Curfield <> #CalPlan.noDoc and CurField <> #CalPlan.dInput )
              if ( KatSopr.cCalplan = 0 )
              {
                if ( KatSopr.cAppDogovor <> 0 )
                  set KatSopr.cNazna := AppDogovor.cProg;
                else
                  if ( KatSopr.cDogovor <> 0 )
                    set KatSopr.cNazna := Dogovor.cProg;
              }
        }
        else
          ProcessDogAppPlan;

        ChangeSpDocNalOrg(OldOrg, KatSopr.cOrgBase);
        CheckSumma(TRUE);
      }
    }
    #KatSopr.nDover :
      PicknDoverUsl(3);

  end;
}

cmTextWind:
{
  if (UpdateTable)
    if (KatSopr.NRec <> 0)
      RunWindowModal(EditTextRepr);
    else
      Message('Заполните документ.', Information);
}

cmValue1:// АВИЗО (Sanny ICQ-47012798)
{
  if (UpdateTable)
    RunInterface('AVIZO', TypeSopr, TypeSopr, KatSopr.NRec, 0);
}
/* по проблеме 102.80989
cmValue2:
{
  if (IsNew)
  {
    Insert Current KatSopr;
    SetNew(FALSE);

    iGrPl.InsSpGrPlD_Default(KatSopr.VidSopr,  // тип документа системный
                             KatSopr.NRec,     //ссылка на документ
                             KatSopr.cOrg      //ссылка на контрагента
                            );
   }

   Update_Current_KatSopr;

   do_Batch_Button (TypeSopr, KatSopr.NRec, KatSopr.dSopr);

   RereadRecord(#KatSopr);
}
*/
cmValFld2: // просмотр/редактирования привязанных групп платежных средств
{
  if (UpdateTable)
    RunInterface('LinkToGrPl', KatSopr.VidSopr, KatSopr.NRec);
}

cmHotKeys:
{
#ifdef __ObjEdit__
  var sNastr : string;

  case KatSopr.VidSopr of
    110: sNastr := 'UKS.DopFuncs.AktVypRabot.';
    111: sNastr := 'Oper.Buy.AktUsl.';
  end;

  if ( KatSopr.VidSopr = 110 or KatSopr.VidSopr = 111 )
    {
      var TuneSTR: string;

      TuneSTR:= sGetTune(sNastr + 'DopFunc01')
              + sGetTune(sNastr + 'DopFunc02')
              + sGetTune(sNastr + 'DopFunc03')
              + sGetTune(sNastr + 'DopFunc04');

      if ( Trim(TuneSTR) <> '' )
        {
          var MenuID : longint;

          case KatSopr.VidSopr of
            110: MenuID := LoadMenu(#AddComp('L_SOPRDOC')'AktUslDop110_HotKeys');
            111: MenuID := LoadMenu(#AddComp('L_SOPRDOC')'AktUslDop111_HotKeys');
          end;

          AddMenuItem(MenuID, 'separator', cmCheckSumma);

          if ( sGetTune(sNastr + 'DopFunc01') <> '' )
            AddMenuItem(MenuID, sGetTune(sNastr + 'DopFunc01'), cmVal3);

          if ( sGetTune(sNastr + 'DopFunc02') <> '' )
            AddMenuItem(MenuID, sGetTune(sNastr + 'DopFunc02'), cmVal4);

          if ( sGetTune(sNastr + 'DopFunc03') <> '' )
            AddMenuItem(MenuID, sGetTune(sNastr + 'DopFunc03'), cmVal5);

          if ( sGetTune(sNastr + 'DopFunc04') <> '' )
            AddMenuItem(MenuID, sGetTune(sNastr + 'DopFunc04'), cmVal6);

          PutHotCommand(RunLoadMenu(MenuID));
        }
    }
#end
}

#ifdef __ObjEdit__
cmVal3:
{
  var coNastr : comp;

  case KatSopr.VidSopr of
    110: coNastr := coGetTune('UKS.DopFuncs.AktVypRabot.DopFunc01');
    111: coNastr := coGetTune('Oper.Buy.AktUsl.DopFunc01')
  end;

  if ( KatSopr.VidSopr = 110 or KatSopr.VidSopr = 111 )
    {
      Update_Current_KatSopr;

      RunInterface('SimpleWayToRunAlgorithm', coNastr,
                                              word(2000 + KatSopr.VidSopr),
                                              KatSopr.nRec,
                                              comp(0));

      RereadRecord(#KatSopr);
      RereadRecord(#SpSopr);
    }
}

cmVal4:
{
  var coNastr : comp;

  case KatSopr.VidSopr of
    110: coNastr := coGetTune('UKS.DopFuncs.AktVypRabot.DopFunc02');
    111: coNastr := coGetTune('Oper.Buy.AktUsl.DopFunc02')
  end;

  if ( KatSopr.VidSopr = 110 or KatSopr.VidSopr = 111 )
    {
      Update_Current_KatSopr;

      RunInterface('SimpleWayToRunAlgorithm', coNastr,
                                              word(2000 + KatSopr.VidSopr),
                                              KatSopr.nRec,
                                              comp(0));

      RereadRecord(#KatSopr);
      RereadRecord(#SpSopr);
    }

}

cmVal5:
{
  var coNastr : comp;

  case KatSopr.VidSopr of
    110: coNastr := coGetTune('UKS.DopFuncs.AktVypRabot.DopFunc03');
    111: coNastr := coGetTune('Oper.Buy.AktUsl.DopFunc03')
  end;

  if ( KatSopr.VidSopr = 110 or KatSopr.VidSopr = 111 )
    {
      Update_Current_KatSopr;

      RunInterface('SimpleWayToRunAlgorithm', coNastr,
                                              word(2000 + KatSopr.VidSopr),
                                              KatSopr.nRec,
                                              comp(0));

      RereadRecord(#KatSopr);
      RereadRecord(#SpSopr);
    }
}

cmVal6:
{
  var coNastr : comp;

  case KatSopr.VidSopr of
    110: coNastr := coGetTune('UKS.DopFuncs.AktVypRabot.DopFunc04');
    111: coNastr := coGetTune('Oper.Buy.AktUsl.DopFunc04')
  end;

  if ( KatSopr.VidSopr = 110 or KatSopr.VidSopr = 111 )
    {
      Update_Current_KatSopr;

      RunInterface('SimpleWayToRunAlgorithm', coNastr,
                                              word(2000 + KatSopr.VidSopr),
                                              KatSopr.nRec,
                                              comp(0));

      RereadRecord(#KatSopr);
      RereadRecord(#SpSopr);
    }
}
#endif

cmPickClass:
{
  if (UpdateTable)
    case CurTable of
      #KatSopr:
      {
        if (KatSopr.NRec <> 0)
          RunInterface(ExClassifier, word(CurTableCode), KatSopr.NRec);
      }
      #SpSopr:
      {
        if (SpSopr.NRec <> 0)
          RunInterface(ExClassifier, word(CurTableCode), SpSopr.NRec);
      }
    end;
}

cmPickAttr:
{
  if (UpdateTable)
    case CurTable of
      #KatSopr:
      {
        if (KatSopr.NRec <> 0)
          RunInterface(Attribute, word(CurTableCode), KatSopr.NRec);
      }
      #SpSopr:
      {
        if (SpSopr.NRec <> 0)
          RunInterface(Attribute, word(CurTableCode), SpSopr.NRec);
      }
    end;
}

end;
End; // Window extendetinfo

//******************************************************************************
#include ctrldog.vpp
#include soprc26.vpp //окно выбора печати реестров

#doc
  Окно редактирования акта на услуги
#end

Window EditSopr 'Редактирование акта на прием услуг' EscClose;
  Show at (,,110,31);
Panel panHeader
  Table KatSopr;
Screen scrHeader ('',hcZakupWActUslEditTopPan,)
  Show at (,,,11)
Fields
  KatSopr.Descr('Дескриптор(идентификатор) пользователя.', , sci1378Esc): Protect;
  KatSopr.NSopr('Номер акта. Вводится путем набора',,sci178Esc);
  KatSopr.dSopr('Дата выписки акта. Вводится путем набора',,sci178Esc):[,'DD/MM/YYYY'];
  Dogovor.NoDoc('Номер договора',,sci1378Esc):Protect;
  KatOrg.Name  ('Организация-контрагент. Выбирается по <F3>',,sci1378Esc)
    {Font = {BackColor = if (KatSopr.cOrgBase = 0,ColorNeed,0)}};
  Sum ('Сумма по документу', , sci178Esc): [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect;
  Valut        ('Валюта, в которой производилась оплата. Выбирается из классификатора.', , sci1378Esc): Protect;
  DocNalSumma ('Сумма налогов по документу', , sci1378Esc): [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect;
  VhNal          ('Входимость налогов в цену услуг', , sci1378Esc): Protect;
  HozOperViewName ('Типовая хозяйственная операция.', , sci1378Esc): Protect;
  SchFactNum   ('Документ для учета НДС', , sci1378Esc): Protect;
Buttons
  cmRashBud,,,'Расходы будущих периодов',,sci178Esc;
<<
  `Дескр.`       `Номер`      `Выписан`                      `Договор`
 .@@@@@@@@   .@@@@@@@@@@@@@  .@@@@@@@@@                  .@@@@@@@@@@@@@@@  <. Расходы будущих периодов .>

`Контрагент`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`На сумму  `.@@@@@@@@@@@@@@@ .@@@@@@@@@@
`Налоги    `.@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`ТХО       `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Документ для учета НДС`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

Screen scrHeader2 ('',hcSellWActPriemEditTop,)
  Show at (,,,11)
Fields
  KatSopr.DesGr('Код группы пользователей', , sci1378Esc): Protect;
  KatSopr.Descr('Дескриптор(идентификатор) пользователя.', , sci1378Esc): Protect;
  KatSopr.NSopr('Номер акта. Вводится путем набора',,sci178Esc);
  KatSopr.dSopr('Дата выписки акта. Вводится путем набора',,sci178Esc):[,'DD/MM/YYYY'];
  KatNotesName ('Статус документа', , sci1378Esc): Protect;
  BDNomDes     ('Номер документа основания акта. Выбирается по <F3>', , sci1378Esc): Protect;
  RashNakl.NSopr ('Номер накладной из списка', , sci1378Esc): Protect;
  KatSopr.Name ('Примечание акта. Вводится путем набора.',,sci1378Esc);
  KatOrg.Name  ('Организация-контрагент. Выбирается по <F3>',,sci1378Esc)
    {Font = {BackColor = if (KatSopr.cOrgBase = 0,ColorNeed,0)}};
  Sum ('Сумма по документу', , sci178Esc): [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect;
  Valut        ('Валюта, в которой производилась оплата. Выбирается из классификатора.', , sci1378Esc): Protect;
  KatSopr.dPrice ('Дата оплаты по акту', , sci1378Esc);//, Skip;
  DocNalSumma  ('Сумма налогов по документу', , sci1378Esc): [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect;
  VhNal        ('Входимость налогов в цену МЦ', , sci1378Esc): Protect;
  myField1     : Skip;
  HozOperViewName ('Типовая хозяйственная операция.', , sci1378Esc): Protect;
  FormRas      : Skip;
  KatPayment.Name ('Форма расчета', , sci1378Esc): Protect;
  SchFactNum   ('Документ для учета НДС', , sci1378Esc): Protect;
Buttons
  cmExtendetInfo,,,'Вызов окна с расширенной информацией',,sci178Esc;
<<
 `Группа`  `Дескр.`     `Номер`      `Выписан`     `Статус`   `Основание`   `Номер накладной`
 .@@@@@@@@ .@@@@@@@@ .@@@@@@@@@@@@@ .@@@@@@@@@@ .@@@@@@@@@@@ .@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@
`Примечание`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Контрагент`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<.Расширенная информация.>
`На сумму ` .@@@@@@@@@@@@@@@ .@@@@@@@@@@ `Дата цен`.@@@@@@@@@@@@@@
`Налоги `   .@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Документ для учета НДС`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

Screen scrHeader110 ('', hcZakupWActUslEditTopPan, sci1378Esc)
  Show at (,,, 11);
Fields
  FieldDirect: Skip, Centered, {Font = {Bold = true; BackColor = ColorSysLime}};
  KatSopr.DesGr ('Код группы пользователей'): Protect;
  KatSopr.Descr ('Дескриптор (идентификатор) пользователя'): Protect;
  KatSopr.NSopr ('Номер акта выполненных работ',, sci178Esc);
  KatSopr.dSopr ('Дата выписки акта выполненных работ',, sci178Esc);
  BDNomDes      ('Номер документа-основания акта'): Protect;
  KatNotesName  ('Статус документа'): Protect;
  CalcFactModeField ('Определяет участие документа в расчетах факта'):
                  [List 'Участвует в расчете',
                        'Не участвует в расчете'], Protect;
  KatSopr.Name  ('Примечание к акту выполненных работ');
  CurrPriceCalcMethodField (
    'Включает режим автоматического расчета текущих цен на основе базовых с использованием коэффициентов пересчета цен и сметных коэффициентов'
    ), NoProtect;
  StroyName     ('Стройка',, sci178Esc);
  KatStroy.Name ('Объект строительства'), Protect;
  KatOrg.Name   ('Организация-подрядчик'), Protect, {Font = {BackColor = if(KatSopr.cOrgBase = 0, ColorNeed, 0)}};
  KatStroy.tFinancier: [List 'подразделение',
                             'контрагент',
                             'центр ответственности'], Skip;
  FinStru       ('Финансирующая структура',, sci178Esc): Protect;
  KatOrgT.Name  ('Заказчик'), Protect, {Font = {BackColor = if(KatSopr.cGruzTo = 0, ColorNeed, 0)}};
  Sum:          [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Skip;
  Valut         ('Валюта, в которой производилась оплата'): Protect;
  KatSopr.dPrice ('Дата оплаты по акту');
  KatPayment.Name ('Форма расчета'): Protect;
  DocNalSumma:  [14.2], Skip;
  VhNal         ('Входимость налогов в цену услуг и материалов'): Protect;
  myField1: Skip;
  HozOperViewName ('Типовая хозяйственная операция'): Protect;
  SchFactNum    ('Документ для учета НДС'): Protect;
  OtpuskSklad: Skip, Centered;
  FieldPodr: Skip;
  KatPodr.Name  ('Подразделение, выполняющее работу'): Protect;
  FieldMOL1: Skip;
  KatMol.Name   ('Материально-ответственное лицо в подразделении, выполняющем работу'): Protect;
  FieldSklad: Skip;
  KatPodrUKS.Name ('Наименование склада с которого списываются матценности'): Protect;
  FieldMOL: Skip;
  KatMolUKS.Name ('Материально-ответственное лицо на складе, с которого списываются матценности'): Protect;
Buttons
  cmExtendetInfo,,, 'Вызов окна с расширенной информацией',, sci178Esc;
  cmValue2,,,       'Формирование ДО по акту',, sci1Esc;
  cmMakePrih,,,     'Списание по акту матценностей на складе',, sci178Esc;
  cmValue15,,,      'Отмена списания (удаление связанных ордеров)',, sci1Esc;
<<
 Группа   &Дескр.  &Номер      & Выписан    & Основание № &Статус               .@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@.@@@@@@@@.@@@@@@@@@@ .@@@@@@@@@@@ .@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@  .@@@@@@@@@@@@@@@@@@@@@@@
`Примечание`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   [.] Расчет текущих цен`
`Стройка`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.Расширенная информация.>
`Объект`    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Подрядчик` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.   Формирование ДО    .>
`Инвестор`  .@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Заказчик`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`На сумму`  .@@@@@@@@@@@@@@@@@.@@@@@@@@@@`Дата цен`.@@@@@@@@@@@@`Форма расчета`.@@@@@@@@@@@@@@@@@@@@@@@@@@
`Налоги`    .@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    .@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Документ для учета НДС`      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.  Списание на складе  .>
 .@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.   Отмена списания    .>
 .@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

#include soprc42.vpp
#include fltfun.vpp

//******************************************************************************

Procedure SetSchem;
{
  if ( IsValid(#BaseDoc) )
    oChkSchem.CheckSchem(BaseDoc.NRec, word(41), KatSopr.NRec, KatSopr.VidSopr, TRUE)
  else
    if (KatSopr.cCalPlan <> 0)
      oChkSchem.CheckSchem(KatSopr.cCalPlan, word(403), KatSopr.NRec, KatSopr.VidSopr, TRUE)
    else
      if (KatSopr.cAppDogovor <> 0)
        oChkSchem.CheckSchem(KatSopr.cAppDogovor, word(401), KatSopr.NRec, KatSopr.VidSopr, TRUE)
      else
        if (KatSopr.cDogovor <> 0)
          oChkSchem.CheckSchem(KatSopr.cDogovor, word(400), KatSopr.NRec, KatSopr.VidSopr, TRUE);
}
//******************************************************************************

Procedure NullOrgs;
var
  OldOrg : comp;
{
  OldOrg := KatSopr.cOrg;

  ChangeSpDocNalOrg(OldOrg, KatSopr.cOrg);

  CheckSumma(TRUE);

  Update_Current_KatSopr;

  RescanPanel(#KatSopr);
  RescanPanel(#SpSopr);
}
//******************************************************************************

Procedure SetOrgsUKS;
var
  OldOrg : comp;
{
  OldOrg := KatSopr.cOrg;

  RereadRecord(#KatStroy);

  if (KatSopr.cDogovor <> 0)
    Exit;

  if ( KatStroy.cContractor <> 0 )
    {
      if ( not BoundActive(tbFiltrByOrgBaseDN) and not BoundActive(tbFiltrByOrgBase) )
        Set KatSopr.cOrgBase := KatStroy.cContractor;

      Set KatSopr.cGruzFrom := KatStroy.cContractor;
      Set KatSopr.cOrg      := KatStroy.cContractor;
    }

  if ( KatStroy.cCustomer <> 0 )
    Set KatSopr.cGruzTo := KatStroy.cCustomer;

  ChangeSpDocNalOrg(OldOrg, KatSopr.cOrg);

  CheckSumma(TRUE);

  Update_Current_KatSopr;

  RescanPanel(#KatSopr);
  RescanPanel(#SpSopr);
}

//******************************************************************************
// Возможность измеения разреза
Function CanChangeRazrez:boolean;
{
  CanChangeRazrez := TRUE;

  case  wGetTune('Reserv.PrSchSklad') of
    0: {};
    1: {}//CanChangeRazrez:=CanChSklad; используется в накладной на отпуск
    2:
    {
      _LOOP SpStep where ((KatSopr.cStepDoc == SpStep.cStepDoc))
        if (SpStep.Reserv > 0)
        {
          CanChangeRazrez := FALSE;
          Break;
        }

      if ( NOT CanChangeRazrez )
        if ( Message('Разрез СКЛАД-МОЛ-ПАРТИЯ не должен отличаться от разреза, указанного в ДО'#13#3 +
                     'при установленной настройке:'#13#3 +
                     '(Настройка=Оперативный контур=Резервирование)'#13#3 +
                     '"резервирование МЦ по складскому разрезу".Продолжить?', YesNo) = cmYes )
          CanChangeRazrez:=TRUE;
    }
  end;
}
//******************************************************************************
#include GETMOLSK.VPP

HandleEvent   // panHeader
#include soprc13.vpp

cmPick:
{
  case CurField of
    #OtvPodr.Name:
    {
      var tmp_OtvPodr_2 : comp;

      tmp_OtvPodr_2 := KatSopr.cOtvPodr;

      if ( RunInterface('GetCO', word(cgiPick), comp(0), comp(0), tmp_OtvPodr_2) <> cmCancel )
      {
        case TypeSopr of
          114,211:
          {
            if ( boGetTune('FN.isNumOtvPodr') )
            {
              DelLastNumD_(TypeSopr, string(KatSopr.cOtvPodr), KatSopr.NSopr);
              set KatSopr.NSopr := GetLastNumD_(TypeSopr, string(tmp_OtvPodr_2));
            }
          }
        end;

        set KatSopr.cOtvPodr := tmp_OtvPodr_2;
      }
    }

    #RashNakl.NSopr:
    {
      var tRec    : comp;
      var tNewRec : comp;

      tRec     := KatSopr.cKatSopr;
      tNewRec  := KatSopr.cKatSopr;

      if ( RunInterface(Spis_Nakl, KatSopr.cStepDoc, KatSopr.cOrgBase, tNewRec ) <> cmCancel )
        if ( RunInterface(Select_MC, tNewRec, Comp(0), Comp(0)) <> cmCancel )
        {
           if (tRec <> tNewRec)
           {
              ResetBounds(#SpSopr);

              if (GetFirst SpSopr where ((KatSopr.NRec == SpSopr.cSopr)) = tsOk)
                if (Message('Заменить спецификацию документа?', YesNo) = cmYes)
                {
                   StartNewVisual (vtNumericVisual, vfTimer+vfThread+vfBreak,
                                   'Очистка спецификации документа ...', 1);

                   While (GetFirst SpSopr where ((KatSopr.NRec == SpSopr.cSopr)) = tsOk)
                   {
                     DoDeleteSoprDop;
                     onBeforeClearSpSopr;
                     oSDfuns.SpSopr_Delete(SpSopr.NRec);
                     NextVisual;
                   }

                   StopVisual('',0)
                }
                else
                {
                   SetBounds(#SpSopr);
                   Exit;
                }

              SetBounds(#SpSopr);
              RereadRecord(#SpSopr);
           }

           RecalcSumm(FALSE);
           set KatSopr.cKatSopr := tNewRec;
           set KatSopr.cStepDoc := RashNakl.cStepDoc;
           set KatSopr.cPayment := RashNakl.cPayment;
           set KatSopr.cOtvPodr := RashNakl.cOtvPodr;
           set KatSopr.dOpr     := Cur_Date;

           if (KatSopr.cOrgBase = comp(0)) set KatSopr.cOrgBase := RashNakl.cOrgBase;

           Update_Current_KatSopr;

           RereadRecord(#KatSopr);
           InsertMcInAkt(FALSE);
        }
    }

    #DogNoDoc, #Dogovor.dDoc,
    #AppDogovor.NoDoc, #AppDogovor.dDoc,
    #CalPlan.NoDoc, #CalPlan.dInput:
    {
      var isSelect : word;

      if ((CurField = #DogNoDoc        ) OR (CurField = #Dogovor.dDoc   )) isSelect := 1;
      if ((CurField = #AppDogovor.NoDoc) OR (CurField = #AppDogovor.dDoc)) isSelect := 2;
      if ((CurField = #CalPlan.NoDoc   ) OR (CurField = #CalPlan.dInput )) isSelect := 4;

      if ( NullVipRef(pRunDSel) )
        if ( not(LoadVipRef(pRunDSel, 'RunDocSelections')) )
        {
          Message('Не удалось загрузить библиотеку RunDocSelObj', Error);
          Exit;
        }

      var MyDocDirect: word;
      MyDocDirect := 0;

      case KatSopr.TipSopr of
        1: MyDocDirect := 2;
        2: MyDocDirect := 1;
      end;

      var DSK_pKontr : comp;

      if (NOT ReadMyDsk(DSK_pKontr,'GetSDog_pKontr2', TRUE))
        DSK_pKontr := 0;

      SaveMyDsk(KatSopr.cOrg, 'GetSDog_pKontr2');
      SaveMyDsk(TRUE, 'GetSDog_NeedFilterOnKontr2');

      if (pRunDSel.F3(KatSopr.cDogovor,    // var cDogovor    : comp;
                      KatSopr.cAppDogovor, // var cAppDogovor : comp;
                      KatSopr.cCalPlan,    // var cCalPlan    : comp;
                      isSelect,            //     isSelect    : word; // откуда вызвали: 1 - договора 2 - соглашение 4 - календарный план
                      word(2 + 4),         //     _wMaska     : word  // 0FFFFh - все документы, иначе битовая маска РАЗРЕШЕННЫХ статусов документов
                                           // разрешен выбор только из исполняемых
                                           // или приостановленных договоров
                      MyDocDirect
                     ) <> cmCancel)
      {
        var OldOrg: comp;
        OldOrg := KatSopr.cOrgBase;

        if (TypeSopr = 111 OR TypeSopr = 110)
        {
          set KatSopr.cDogovor    := KatSopr.cDogovor;
          set KatSopr.cAppDogovor := KatSopr.cAppDogovor;
          set KatSopr.cCalPlan    := KatSopr.cCalPlan;

          if (BaseDoc.cDogovor <> KatSopr.cDogovor)
            set KatSopr.cStepDoc := 0;

          if (NZakaz.cDogovor <> KatSopr.cDogovor)
            set KatSopr.cNZakaz := 0;

          if ( OtkatToOldState(false, word(0)) )
            if ( InsertMCProcess )  //формирование накладной по: договор-соглашение-кал.рлан
              if ( Curfield <> #CalPlan.noDoc and CurField <> #CalPlan.dInput )
                if ( KatSopr.cCalplan = 0 )
                {
                  if ( KatSopr.cAppDogovor <> 0 )
                    set KatSopr.cNazna := AppDogovor.cProg;
                  else
                    if ( KatSopr.cDogovor <> 0 )
                      set KatSopr.cNazna := Dogovor.cProg;
                }
        }
        else
          ProcessDogAppPlan;

        if ( NOT CtrlSoprUnderDog(word(2), KatSopr.NRec, KatSopr.cDogovor, KatSopr.cAppDogovor, KatSopr.cCalPlan, FALSE) )
        {
          set KatSopr.cDogovor:= comp(0);
          set KatSopr.cAppDogovor:= comp(0);
          set KatSopr.cCalPlan:= comp(0);

          Update_Current_KatSopr;
        }

        ChangeSpDocNalOrg(OldOrg, KatSopr.cOrgBase);
        CheckSumma(TRUE);
      }

      SaveMyDsk(DSK_pKontr,'GetSDog_pKontr2');
      Stop;
    }
    #KatSopr.sDover :
      PickDoverUsl;

    #KatSopr.nDover :
      PicknDoverUsl(1);
  end;

  case CurField of
    #Valut, #VhNal:
    {
      if (IsNew)
      {
        Insert Current KatSopr;
        SetNew(FALSE);
        iGrPl.InsSpGrPlD_Default(KatSopr.VidSopr,  // тип документа системный
                                 KatSopr.NRec,     // ссылка на документ
                                 KatSopr.cOrg      // ссылка на контрагента
                                );
      }

      if (NOT CanChangeDoc(2))
      {
        RereadRecord(CurTable);
        Stop;
        Exit;
      }
    }
    #include soprc40.vpp // обработчик для поля #AttrVKaz.vString
  end;
}

#include soprc22.vpp //KatSopr.dprice
#include inpsopr.vpp

cmCheckRecord:
{
  if (NOT CheckDocument)
    Abort;
  else
    CheckSchFact(2);
}

cmPick :
{
  case CurField of
    #KatStroy.Name, #KatOrg.Name, #OrgVzr.Name, #KatOrgT.Name, #BDNomDes:
    {
      if (NOT CanChangeDoc(3))
      {
        RereadRecord(CurTable);
        Stop;
        Exit;
      }
    }
  end;

  case CurField of
    #DOCNALSUMMA:
    {
       MakeKatSoprNal;
    }
    #BDNomDes:
    {
      var OldOrg : comp;
      OldOrg := KatSopr.cOrgBase;

      if (NOT InsertMC(0))
      {
        CheckSumma(True);
        Exit;
      }

      if (KatSopr.VidSopr <> 110)
        if (GetFirst SpSopr <> tsOk)
          if ( KatSopr.VidSopr <> 114 )
            Message('В документе-основании услуги не найдены');

      if (KatSopr.VidSopr = 114)
      {
        var tKolNakl : word;
        var bSelMc   : boolean;

        set KatSopr.cKatSopr := IsNaklInDo (baseDoc.NRec, KatSopr.cKatSopr, 201,tKolNakl);

        if (KatSopr.cKatSopr <> comp(0))
        {
          set KatSopr.dOpr     := Cur_Date;
          bSelMC               := TRUE;

          Update_Current_KatSopr;

          if (tKolNakl > 1)
            if ( RunInterface(Spis_Nakl, KatSopr.cStepDoc, KatSopr.cOrgBase, KatSopr.cKatSopr) = cmCancel )
              bSelMC := FALSE;

          if ( bSelMC )
            if ( RunInterface(Select_MC, RashNakl.NRec, comp(0), comp(0)) <> cmCancel )
              InsertMcInAkt(FALSE);
        }
        else
          Message ('Нет накладных по выбранному ДО');
      }

      if (StepDoc.cBaseDoc <> 0)
        set KatSopr.cNazna := BaseDoc.cNazna;

      Update_Current_KatSopr;

      CheckSumma(TRUE);
    }

    #KatNotesName :
    {
      var tmpStatus: word;
      var tmpNote  : comp;
      var mask     : word;

      if ( KatSopr.Status = 0 )  // оформляемый
      {
        if ( NOT CtrlSoprUnderDog(word(2), KatSopr.NRec, KatSopr.cDogovor, KatSopr.cAppDogovor, KatSopr.cCalPlan, TRUE) )
        {
          Abort;
          Exit;
        }
      }

      tmpStatus := KatSopr.Status;
      tmpNote   := KatSopr.cNote;
      mask      := 0;
!     UpdateTable;

      if (IsNew)
      {
        Insert Current KatSopr;
        SetNew(FALSE);

        iGrPl.InsSpGrPlD_Default(KatSopr.VidSopr,  // тип документа системный
                                 KatSopr.NRec,     //ссылка на документ
                                 KatSopr.cOrg      //ссылка на контрагента
                                );
      }

      if (IsValid(#KatSopr))
      {
        Var cn1 : comp;
        Var vwVid : word;
        var wResult: word;
        cn1 := KatSopr.cNote;

        vwVid := KatSopr.VidSopr;

        Var calg : comp; calg := if(KatSopr.TipSopr = 2, coGetTune('Oper.Alg.Before.Sell')
                                                       , coGetTune('Oper.Alg.Before.Buy'));
        if ( calg <> 0 )
        {
          StartNewVisual(vtRotateVisual, vfScreenBottom, '', 0);

          wResult := RunInterface('SimpleWayToRunAlgorithm', calg
                                                           , word(2111)
                                                           , KatSopr.nRec
                                                           , tmpNote);

          StopVisual('', 0);

          if ( (wResult = cmNo) or (wResult = cmDefault) )
          {
            Message(''#3+'По результатам выполнения алгоритма'+''#13+
                    ''#3+'изменение статуса запрещено',Information);
            Exit;
          }

          if ( wResult = cmCancel )
            if ( Message(''#3+'В процессе выполнения алгоритма произошли ошибки!'+''#13+
                         ''#3+'Изменить статус?',YesNo) <> cmYes )
              Exit;
        }

        if ( RunInterface(StatLog, word(1024 + 1), KatSopr.NRec, vwVid, tmpStatus, tmpNote, mask) = cmCancel )
          Exit;

        set KatSopr.Status := tmpStatus;
        set KatSopr.cNote  := tmpNote;

        Update_Current_KatSopr;

        calg := if(KatSopr.TipSopr = 2, coGetTune('Oper.Alg.After.Sell')
                                      , coGetTune('Oper.Alg.After.Buy'));

        if ( calg <> 0 )
          {
            StartNewVisual(vtRotateVisual, vfScreenBottom, '', 0);

            RunInterface('SimpleWayToRunAlgorithm', calg
                                                  , word(2111)
                                                  , KatSopr.nRec
                                                  , cn1);

            StopVisual('', 0);
          }
      }
    }

    #KatStroy.Name :
    {
      if (KatSopr.VidSopr = 110)
      {
        if (GetFirst SklOrder where ((KatSopr.NRec == SklOrder.cSopr)) = tsOk)
          if (SklOrder.cSopr <> 0)
          {
            Message('По документу сформирован расходный складской ордер.'#13#3'Изменять нельзя!', Warning);
            Exit;
          }

        _LOOP SpSopr where (( KatSopr.NRec == SpSopr.cSopr ))
          if ( IsValid(#SpDocSmeta ))
          {
            Message('Часть спецификации сформирована по смете.'#13#3'Изменять нельзя!', Warning);
            Exit;
          }
      }

      if (CurCommand = cmOpenSearch)
        QuickChoiceName := 'qcKatStroyNameObj';

      if (RunInterface(KatStroy, 0, TRUE, KatSopr.cUKS, FALSE, FALSE, FALSE) = cmDefault)
      {
        PushPos(#SpSopr);
        ResetBounds(#SpSopr);

        _LOOP SpSopr where ((KatSopr.NRec == SpSopr.cSopr))
        {
          if (NOT IsValid(#SpDocSmeta))
#ifndef __MTR_TO_SPEC__
            Update Current SpSopr Set SpSopr.cUKS := KatSopr.cUKS;
#else
            oMTRFun.GenSpecMTRForUKS(coSpSopr, SpSopr.nRec, KatSopr.cUKS, 0);
#end
        }

        SetBounds(#SpSopr);
        PopPos(#SpSopr);
      }

      if (GetFirst KatStroy <> tsOk) {};

      SetOrgsUKS;
      RereadRecord(#SpSopr);
    }

    #KatPodrUKS.Name:
    {
      if (GetFirst SklOrder where ((KatSopr.NRec == SklOrder.cSopr)) = tsOk)
        if (SklOrder.cSopr <> 0)
        {
          Message('По документу сформирован расходный складской ордер.'#13#3'Изменять нельзя!', Warning);
          Exit;
        }

      if ( CanChangeRazrez )
        if ( RunInterface(GetAnyPodr, KatSopr.cPodrFrom, 0) <> cmCancel )
          if ( boGetTune('Pick.AvtoMol') )
          {
            set KatSopr.cMolFrom := GetMOL2Sklad(KatSopr.cPodrFrom);

            if ( KatSopr.cMolFrom = 0 )
              RunInterface(GetMol, KatSopr.cMolFrom, KatSopr.cPodrFrom);
          }
    }

    #KatMolUKS.Name:
    {
      if (GetFirst SklOrder where ((KatSopr.NRec == SklOrder.cSopr)) = tsOk)
        if (SklOrder.cSopr <> 0)
        {
          Message('По документу сформирован расходный складской ордер.'#13#3'Изменять нельзя!', Warning);
          Exit;
        }

      if (CanChangeRazrez)
        RunInterface(GetMol, KatSopr.cMolFrom, KatSopr.cPodrFrom);
  }

  #KatSopr.Descr:
  {
    RunInterface(GetDescr, KatSopr.Descr, KatSopr.DesGr, word(0));
  }

  #KatSopr.DesGr:
  {
    RunInterface(GetGrDescr, KatSopr.DesGr, FALSE, FALSE, comp(0));
  }

  #KatSopr.Name:
  {
    RunInterface('GetBDName', word(10111), KatSopr.Name);
  }

  #KatOrg.Name:
  {
    if (TypeSopr = 110)
      if (GetFirst SklOrder where ((KatSopr.NRec == SklOrder.cSopr)) = tsOk)
        if (SklOrder.cSopr <> 0)
        {
          Message('По документу сформирован расходный складской ордер.'#13#3'Изменять нельзя!', Warning);
          Exit;
        }

    PickKatOrgName;

    if (TypeSopr = 110)
      SetFieldSklad(scrHeader110);
  }

  #OrgVzr.Name:
  {
    PickOrgVzr;
  }

  #KatOrgF.Name:
  {
    RunInterface(GetKatOr, KatSopr.cGruzFrom, comp(0), FALSE, comp(0), comp(0));
  }

  #KatOrgT.Name:
  {
    RunInterface(GetKatOr, KatSopr.cGruzTo, comp(0), FALSE, comp(0), comp(0));
  }

  #VhNal:
  {
    set KatSopr.VhodNal := if (KatSopr.VhodNal = 1, 2, 1);

    CheckSumma(TRUE);

    if ( (IsValid(#KSSopr)) and ( (KSSopr.VidSopr = 101) or (KSSopr.VidSopr = 108)) )
      iRecalcK.RecalcAll(KSSopr.nRec, 0);
  }

  #Persons.FIO:
  {
    var pRec: comp;
    pRec := KatSopr.cPerson;

    iGetKau.GetCodeKau(cgiPick, cgKau_Persons, pRec);

    set KatSopr.cPerson := pRec;
  }

  #SchFactNum:
  {
    if (wGetTune('Country') <> 2)
    {
      var vlBou : longint;

      if (TypeSopr = 110)
      {
        vlBou := if (BoundActive(tbForUKSMC), tbForUKSMC, tbForUKSUsl);

        SubBounds(tbForUKSMC);
        SubBounds(tbForUKSUsl);
        RereadRecord(#SpSopr);
      }

      if (IsOneSpWithNDS(KatSopr.NRec))
        MakeSchFact;
      else
      {
        Message('Cогласно установленной форме расчета документ для учета НДС не может быть создан.', CancelButton);
        Exit;
      }

      if (TypeSopr = 110)
      {
        AddBounds(vlBou);
        RereadRecord(#SpSopr);
      }
    }
    else
      if (UpdateTable)
        if (IsValid(tnKatSopr))
         {
           RunInterface('NalNakl_View', word(coKatSopr), KatSopr.VidSopr, KatSopr.NRec, Date(0,0,0));
           RereadRecord;
         }
  }

  #KatPodr.Name:
  {
    if (RunInterface(GetAnyPodr, KatSopr.cPodrTo, 0) <> cmCancel)
      if (boGetTune('Pick.AvtoMol'))
      {
        set KatSopr.cMolTo := getMOL2Sklad(KatSopr.cPodrTo);

        if (KatSopr.cMolTo = 0)
          RunInterface(GetMol, KatSopr.cMolTo, KatSopr.cPodrTo);
      }
  }

  #KatMol.Name:
  {
    RunInterface(GetMol, KatSopr.cMolTo, KatSopr.cPodrTo);
  }

  #KatPayment.Name :
  { //-- данное событие сначала обрабатывается в inpsopr.vpp
    //-- а потом здесь пересчитываются налоги по документу
    CheckSumma(TRUE);
  }

  #BDNklDes:
  {
    var pNrec: comp;
    pNrec := KatSopr.cKatSopr;

    if (RunInterface('GetKatSopr101_201', pNRec) <> cmCancel)
      if (pNrec <> 0)
      {
        MakeNotNewKatSopr;

        if ( (KatSopr.cKatSopr <> 0) AND (KSSopr.dOpr <> Date(0,0,0)) )
          if ( Message('К акту уже привязана накладная,по которой сформирован ордер.Продолжить?', YesNo) = cmNo)
            Exit;

        KatSopr.cKatSopr := pNrec;

        Update_Current_KatSopr;

        RereadRecord(#KatSopr);
        SetEditOption;
      }
  }
  end; //case in cmPick
} // cmPick

cmDelOnProtect:
{
  case CurField of
    #BDNklDes:
    {
       if GetFirst SklOrder where ((KatSopr.nRec == SklOrder.cSopr and
                                 (SklOrder.TipOrd = 4) )) =tsOk
       {
         DeleteDooc;
         if (not FlagDelDooc)
           Exit;
       }
      else
       {
         if (KSSopr.dOpr <> Date(0, 0, 0))
         if Message('По накладной сформирован ордер.Удалить ссылку на накладную?', YesNo) = cmNo
            Exit;
        }

      set KatSopr.cKatSopr := 0;

      if (KatSopr.waDoc = cgPrihOrdAkt)
        set KatSopr.waDoc := 0;

      SetEditOption;
    }

    #OtvPodr.Name :
    {
      case TypeSopr of
        114, 211:
        {
          if (boGetTune('FN.isNumOtvPodr'))
          {
            DelLastNumD_(TypeSopr, string(KatSopr.cOtvPodr), KatSopr.NSopr);
            set KatSopr.NSopr := GetLastNumD_(TypeSopr, string(comp(0)));
          }
        }
       end;

       set KatSopr.cOtvPodr := comp(0);
    }

    #RashNakl.NSopr:
    {
      set KatSopr.cKatSopr := 0;

      Update SpSopr set cSpOrder := 0;
    }

    #KatPodrUKS.Name, #KatMolUKS.Name:
    {
      if ( NOT (CanChangeRazrez) )
      {
        Abort;
        Exit
      }

      if (GetFirst SklOrder where ((KatSopr.NRec == SklOrder.cSopr)) = tsOk)
        if (SklOrder.cSopr <> 0)
        {
          Message('По документу сформирован расходный складской ордер.'#13#3'Изменять нельзя!', Warning);
          Abort;
          Exit;
        }
    }

    #KatOrg.Name:
    {
      Abort;//поле обязательное,значит и незачем удалять
      Exit;
    }

    #BDNomDes, #OrgVzr.Name, #KatOrgT.Name:
    {
      if (NOT CanChangeDoc(3))
      {
        RereadRecord(CurTable);
        Stop;
        Exit;
      }

      var OldOrg : comp;
      OldOrg := KatSopr.cOrg;

      if (CurField = #KatOrg.Name)
      {
        if (KatSopr.VidSopr = 110 AND KatSopr.cDogovor <> 0) //ПиР 101.19773
        {
          Message('С актом связан договор.'+ chr(13) + 'Изменять нельзя !' , Information);
          Abort;
          Exit;
        }

        ChangeSpDocNalOrg(OldOrg, KatSopr.cOrg);
      }

      if ( CurField = #OrgVzr.Name )
        if ( KatSopr.VHODNAL <> 1 ) //налоги не входят в цену
          if ( ChangeSpDocNalOrg(OldOrg, KatSopr.cOrg) )
            CheckSumma(TRUE);

      if (CurField = #KatStroy.Name)
        NullOrgs;
    }

    #SchFactNum:
    {
      if (wGetTune('Country') <> 2)
        DelSchFact;
      else
        if (UpdateTable)
          if (IsValid(tnKatSopr))
          {
            RunInterface('NalNakl_View', word(coKatSopr), KatSopr.VidSopr, KatSopr.NRec, Date(0,0,0));
            RereadRecord;
          }

      Abort;
    }

    #DogNoDoc
  , #Dogovor.dDoc
  , #AppDogovor.NoDoc
  , #AppDogovor.dDoc
  , #CalPlan.NoDoc
  , #CalPlan.dInput:
    {
      var pDogovor, pAppDog, pCalPlan : comp;

      pDogovor := KatSopr.cDogovor;
      pAppDog  := KatSopr.cAppDogovor;
      pCalPlan := KatSopr.cCalPlan;

      case CurField of
        #DogNoDoc, #Dogovor.dDoc:
          {
            pDogovor := 0;
            pAppDog  := 0;
            pCalPlan := 0;
          }
        #AppDogovor.NoDoc, #AppDogovor.dDoc:
          {
            pAppDog := 0;

            if ( CalPlan.cDogovor = KatSopr.cAppDogovor )
              pCalPlan := 0;
          }
        #CalPlan.NoDoc, #CalPlan.dInput:
          pCalPlan := 0;
      end;

      var str : string;

      str := if (pDogovor <> KatSopr.cDogovor, 'договор',
               if(pAppDog <> KatSopr.cAppDogovor, 'соглашение',
                 if(pCalPlan <> KatSopr.cCalPlan, 'календарный план', '')));

      if (str = '')
        {
          Abort;
          Exit;
        }

      if (Message('Отвязать ' + str + '?', Confirmation + YesNo) <> cmYes)
        {
          Abort;
          Exit;
        }

      set KatSopr.cDogovor    := pDogovor;
      set KatSopr.cAppDogovor := pAppDog ;
      set KatSopr.cCalPlan    := pCalPlan;

      UnBindSpDocs;
    }

    #AttrVKaz.vString:
    {
      UpdateTable;

      if (Delete Current AttrVKaz = tsOk)
      {
        RereadRecord(#AttrVKaz);
        RereadRecord;
      }

      Stop;
      Exit;
    }

    #KatPayment.Name:
    {
      set KatSopr.cPayment := 0;
      CheckSumma(TRUE);
    }
  end;

  if (CurField = #BDNomDes)
  {
    set KatSopr.cStepDoc := 0;
    PushPos(#SpSopr);

    _LOOP SpSopr
    {
      SpSopr.cSpStep := 0;
      Update Current SpSopr;
    }

    PopPos(#SpSopr);
    RescanPanel(#SpSopr);
  }
}

cmSetCurField:
{
  if ( NOT OtkatToOldState(FALSE, word(0)) )
    Exit;

  if (Target = #KatOrg.Name)
    if (KatSopr.cOrgBase = 0)
      PutCommand(cmPick);

  if (NOT boGetTune('Pick.AutoPickinInterface'))
    Exit;

  case Target of
    #KatUsl.Name, #KatUsl.Kod, #KatMC.Name, #KatMC.BarKod:
    {
      if (NOT (isValid(#SpSopr)))
        PutCommand(cmPick);
    }

    #OrgVzr.Name:
    {
      if (KatSopr.cOrg = 0)
        PutCommand(cmPick);
    }

    #KatPayment.Name:
    {
      if ( KatSopr.cPayment = 0 )
        PutCommand(cmPick);
    }
  end; // case
}

cmCheckField:
{
  case CurField of
    #KatSopr.dSopr:
    {
      if (CheckdSopr)
        SetSchFactFlag;

      isCBDSensitiveModified := true; // см. описание в объявлении переменной
    }

    #KatSopr.dOpr:
    {
      CheckdSopr2;
    }
  end;
}

//обновление данных
cmPick:
{
  Update_Record_KatSopr;
}

cmCheckField:
{
  Update_Record_KatSopr;
}

cmDelOnProtect:
{
  Update_Record_KatSopr;
}

cmSetDefault:
{
  if (TypeSopr = 110)
    SetFieldSklad(scrHeader110);
}

cmExprFieldChanged:
{
  case CurField() of
    #CalcFactModeField:
      SetCalcFactMode( word( ExprFieldValue() ) ); // Сохранить значение режима участия документа в расчете факта

    #CurrPriceCalcMethodField:
      SetCurrPriceCalcMethod( word( ExprFieldValue() ) ); // Сохранить значение режима расчета текущих цен

  end;
}

end; // HandleEvent panHeader
end; // Panel panHeader

//******************************************************************************

#include ShowKau.vpp

Function GetKAUField(pNum : integer) : string;
{
  GetKAUField := #ShowKau(if(pNum = 1, SaldTune.wObj, SaldTune.wKau[pNum - 1]), if(pNum = 1, SpecMTR.cObj, SpecMTR.cKau[pNum - 1]));
}

//******************************************************************************

Panel panSpecif
  Show at (,12)
  Table SpSopr;
Browse brSpecif ('',hcZakupWActUslEditSpec,)
Fields
  PrSopUsl ('Признак сопутствующей услуги', , sci1378Esc): [3], NoAutoSize, Protect;
#ifdef __DSD__
  KatUsl.Kod     #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc)           : [12], NoAutoSize, Protect, NoDel;
#else
 KatUsl.Kod     #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)           : [12], NoAutoSize, Protect, NoDel;
#end
  strOwnMC       #3'С/Н' ('С-собственная, Н-несобственная МЦ/услуга', , sci1378Esc): [1], Protect, NoPickButton;
#ifdef __DSD__
  KatUSL.Name    #3'Наименование услуги' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc): [19], NoAutoSize, Protect, NoDel;
#else
  KatUSL.Name    #3'Наименование услуги' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc): [19], NoAutoSize, Protect, NoDel;
#end
  OtpEd          #3'ЕдИзм' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)         : [4], NoAutoSize, Protect, NoDel;
  SpSopr.KolFact #3'Количество' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [10], [prSignsInKol], NoAutoSize, NoProtect;
  Prv            #3'Цена' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)       : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SumPrice       #3'Стоимость' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)      : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SpSopr.Kol     #3'Процент' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [18], [prSignsInKol], NoAutoSize, NoProtect;
  SpSoprPrSum    #3'Сумма' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)      : [18, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SumSpNalog     #3'Налоги' ('<Ctrl><Enter> - расширенная информация', , sci178Esc) : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, Protect;
  KatParty.Name  #3'Партия' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)        : [17], NoAutoSize, Protect;
  UchPriceOrd    #3'Уч.цена' ('Учитывать ли стоимость услуги при расчете учетной цены', , sci1378Esc): [7], NoAutoSize, Protect;
  SaldTune.Name   #3'Объект ЦУ' ('',, sci1378Esc): [10], Protect, NoAutoSize, PickButton;
  vsKau1          #3'КАУ 1' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau2          #3'КАУ 2' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau3          #3'КАУ 3' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau4          #3'КАУ 4' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau5          #3'КАУ 5' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau6          #3'КАУ 6' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau7          #3'КАУ 7' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau8          #3'КАУ 8' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau9          #3'КАУ 9' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau10         #3'КАУ 10' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  SmetaMy         #3'Смета' ('Локальная смета: "Номер": "Наименование"', , sci1378Esc): [20], NoAutoSize, Protect, PickButton;
 SmetaSpMy       #3'Спецификация сметы'
  ('Спецификация сметы: "№ п/п" ("Код") "Наименование"', , sci1378Esc): [20], NoAutoSize, Protect, PickButton;
end; // Browse
//------------------------------------------------------------------------------
Browse brSpecif1 ('',hcZakupWActUslEditSpec,)
Fields
  KatUSL.Name    #3'Наименование услуги' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc): [24], Protect, NoDel;

  SpSopr.KolFact #3'Количество' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [10], [prSignsInKol], NoAutoSize, NoProtect;
  OtpEd          #3'ЕдИзм' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)         : [4], NoAutoSize, Protect, NoDel;
  Prv            #3'Цена' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)       : [12], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SumPrice       #3'Стоимость' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)      : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;

  SumSpNalog     #3'Налоги' ('<Ctrl><Enter> - расширенная информация', , sci178Esc) : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, Protect;
  Attr_SchetZatr #3'Счёт' ('Счёт затрат', , sci1378Esc)                                          : [9],  NoAutoSize, Protect;
  Attr_ElemZatr  #3'Элемент' ('Элемент затрат', , sci1378Esc)                                    : [15], NoAutoSize, Protect;

end; // Browse
//------------------------------------------------------------------------------
Browse brSpecif3 ('',hcSellWActPriemEditBottom,)
Fields
#ifdef __DSD__
  KatMc.BarKod   #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc)           : [14], Protect;
  KatMc.Name     #3'Наименование МЦ' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc): [19], Protect;
#else
  KatMc.BarKod   #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)           : [14], Protect;
  KatMc.Name     #3'Наименование МЦ' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc): [19], Protect;
#end
  strOwnMC       #3'С/Н' ('С-собственная, Н-несобственная МЦ/услуга', , sci1378Esc): [1], Protect, NoPickButton;
  OtpEd          #3'ЕдИзм' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)         : [ 7], NoAutoSize, Protect;
  SpSopr.KolFact #3'Количество' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [10], [prSignsInKol], NoAutoSize, NoProtect;
  KatDopEd1.ShortName  #3'ДЕИ 1' ('', , sci178Esc) : [5], protect, NoAutoSize, NoPickButton;
  SpDopEd1.Kol         #3'Количество' ('')         : [10], [prSignsInKol], Protect, NoAutoSize, NoPickButton;
  KatDopEd2.ShortName  #3'ДЕИ 2' ('', , sci178Esc) : [5], protect, NoAutoSize, NoPickButton;
  SpDopEd2.Kol         #3'Количество' ('')         : [10], [prSignsInKol], Protect, NoAutoSize, NoPickButton;
  Prv            #3'Цена' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)       : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SumPrice       #3'Стоимость' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)      : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  KatParty.Name  #3'Партия' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)        : [17], NoAutoSize, Protect;
  UchPriceOrd    #3'Уч.цена' ('Учитывать ли стоимость услуги при расчете учетной цены', , sci1378Esc): [7], NoAutoSize, Protect;
end; // Browse

// спецификация налогового акта регистрации ГТД
Browse brSpecifNAkt ('',hcGTDTaxAct,)
Fields
  PrSopUsl ('Признак сопутствующей услуги', , sci1378Esc): [3], NoAutoSize, Protect;
#ifdef __DSD__
  KatUSL.Name     #3'Наименование услуги' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc): [19], NoAutoSize, Protect, NoDel;
  KatUsl.Kod      #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc)           : [12], NoAutoSize, Protect, NoDel;
#else
  KatUSL.Name     #3'Наименование услуги' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc): [19], NoAutoSize, Protect, NoDel;
  KatUsl.Kod      #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)           : [12], NoAutoSize, Protect, NoDel;
#end
  OtpEd           #3'ЕдИзм' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)         : [4], NoAutoSize, Protect, NoDel;
  SpSopr.KolFact  #3'Количество' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [10], [prSignsInKol], NoAutoSize, NoProtect;
  Prv             #3'Цена' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)       : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SumPrice        #3'Стоимость' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)      : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SpSopr.Kol      #3'Процент' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [17], [prSignsInKol], NoAutoSize, NoProtect;
  SpSoprPrSum     #3'Сумма' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)      : [17, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  UchPriceOrd     #3'Уч.цена' ('Учитывать ли стоимость услуги при расчете учетной цены', , sci1378Esc): [7], NoAutoSize, Protect;
  GrNal2NAkt.Name #3'Группа', #3'налогов' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)        : [10], NoAutoSize, Protect;
  SpSopr.rVPrice  #3'Сумма в валюте', #3'налога' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [12], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  [Val2NAktTxt] if(IsValid(tnKlVal2NAkt),KlVal2NAkt.SimVolV, if (s_SimvRub <> '',s_SimvRub,'руб.'))
                  #3'Валюта', #3'налога' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)         : [4], NoAutoSize, Protect;
end; // Browse

TabbedSheet BOTTOM tbsh

Browse brSpecif110 'Работы' ('',hcZakupWActUslEditSpec,)
Table SpSopr
Fields
  {Font =
    {
      Color = if(IsValid(#SpDocSmeta), if(SpDocSmeta.TipRes = 5 or SpDocSmeta.TipRes = 6 or SpDocSmeta.TipRes = 7, ColorSysMaroon, 0), 0)
      Italic = if(IsValid(#SpDocSmeta), if(SpDocSmeta.TipRes = 5 or SpDocSmeta.TipRes = 6 or SpDocSmeta.TipRes = 7, TRUE, FALSE), FALSE)
    }
  };
  SpSopr.NPP     #3'№' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [3], NoAutoSize, NoProtect;
#ifdef __DSD__
  KatUsl.Kod     #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc)           : [ 7], Protect, NoDel;
  KatUSL.Name    #3'Наименование работы' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc): [26], NoAutoSize, Protect, NoDel;
#else
  KatUsl.Kod     #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)           : [ 7], Protect, NoDel;
  KatUSL.Name    #3'Наименование работы' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc): [26], NoAutoSize, Protect, NoDel;
#end
  strOwnMC       #3'С/Н' ('С-собственная, Н-несобственная МЦ/услуга', , sci1378Esc): [1], Protect, NoPickButton;
  OtpEd          #3'ЕдИзм' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)         : [4], NoAutoSize, Protect, NoDel;
  SpSopr.KolFact #3'Количество' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [10], [prSignsInKol], NoAutoSize, NoProtect;
  Prv            #3'Цена текущая' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)       : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SumPrice       #3'Стоимость текущая' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)      : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  KatParty.Name  #3'Партия' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)        : [17], NoAutoSize, Protect;
  UchPriceOrd    #3'Уч.цена' ('Учитывать ли стоимость услуги при расчете учетной цены', , sci1378Esc): [7], NoAutoSize, Protect;
  SaldTune.Name  #3'Объект ЦУ' ('',, sci1378Esc): [10], Protect, NoAutoSize, PickButton;
  vsKau1          #3'КАУ 1' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau2          #3'КАУ 2' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau3          #3'КАУ 3' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau4          #3'КАУ 4' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau5          #3'КАУ 5' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau6          #3'КАУ 6' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau7          #3'КАУ 7' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau8          #3'КАУ 8' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau9          #3'КАУ 9' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau10         #3'КАУ 10' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  SmetaMy        #3'Смета' ('Локальная смета: "Номер": "Наименование"', , sci1378Esc): [20], NoAutoSize, Protect, PickButton;
 SmetaSpMy       #3'Спецификация сметы'
  ('Спецификация сметы: "№ п/п" ("Код") "Наименование"', , sci1378Esc): [20], NoAutoSize, Protect, PickButton;
 SmetaResMy      #3'Тип ресурса' ('Тип ресурса', , sci178Esc): [20], NoAutoSize, Protect;
end; // Browse
//------------------------------------------------------------------------------
Browse brSpecif1101 'Работы' ('',hcZakupWActUslEditSpec,)
Table SpSopr
Fields
  {Font =
    {
      Color = if(IsValid(#SpDocSmeta), if(SpDocSmeta.TipRes = 5 or SpDocSmeta.TipRes = 6 or SpDocSmeta.TipRes = 7, ColorSysMaroon, 0), 0)
      Italic = if(IsValid(#SpDocSmeta), if(SpDocSmeta.TipRes = 5 or SpDocSmeta.TipRes = 6 or SpDocSmeta.TipRes = 7, TRUE, FALSE), FALSE)
    }
  };
  SpSopr.NPP     #3'№' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [3], NoAutoSize, NoProtect;
#ifdef __DSD__
  KatUSL.Name    #3'Наименование работы' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc): [26], Protect, NoDel;
  KatUsl.Kod     #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc)           : [ 7], Protect, NoDel;
#else
  KatUSL.Name    #3'Наименование работы' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc): [26], Protect, NoDel;
  KatUsl.Kod     #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)           : [ 7], Protect, NoDel;
#end
  strOwnMC       #3'С/Н' ('С-собственная, Н-несобственная МЦ/услуга', , sci1378Esc): [1], Protect, NoPickButton;
  OtpEd          #3'ЕдИзм' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)         : [4], NoAutoSize, Protect, NoDel;
  SpSopr.KolFact #3'Количество' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [10], [prSignsInKol], NoAutoSize, NoProtect;
  Prv            #3'Цена текущая' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)       : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SumPrice       #3'Стоимость текущая' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)      : [12, '\2p[|-]3666`666`666`666`666.88'], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  KatParty.Name  #3'Партия' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)        : [17], NoAutoSize, Protect;
  UchPriceOrd    #3'Уч.цена' ('Учитывать ли стоимость услуги при расчете учетной цены', , sci1378Esc): [7], NoAutoSize, Protect;
  SaldTune.Name  #3'Объект ЦУ' ('',, sci1378Esc): [10], Protect, NoAutoSize, PickButton;
  vsKau1         #3'КАУ 1' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau2         #3'КАУ 2' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau3         #3'КАУ 3' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau4         #3'КАУ 4' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau5         #3'КАУ 5' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau6         #3'КАУ 6' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau7         #3'КАУ 7' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau8         #3'КАУ 8' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau9         #3'КАУ 9' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau10        #3'КАУ 10' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  SmetaMy        #3'Смета' ('Локальная смета: "Номер": "Наименование"', , sci1378Esc): [20], NoAutoSize, Protect, PickButton;
  SmetaSpMy      #3'Спецификация сметы'
  ('Спецификация сметы: "№ п/п" ("Код") "Наименование"', , sci1378Esc): [20], NoAutoSize, Protect, PickButton;
  SmetaResMy     #3'Тип ресурса' ('Тип ресурса', , sci178Esc): [20], NoAutoSize, Protect;
end; // Browse
//------------------------------------------------------------------------------
Browse brSpecif1102 'Материалы' ('',hcUKSAktRabotVklMat,)
Table SpSopr
Fields
  SpSopr.NPP     #3'№' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [3], NoAutoSize, NoProtect;
#ifdef __DSD__
  KatMc.BarKod   #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc)           : [14], NoAutoSize, Protect;
  KatMc.Name     #3'Наименование МЦ' ('<Ctrl><Enter> - расширенная информация', , sci13478Esc): [19], NoAutoSize, Protect;
#else
  KatMc.BarKod   #3'Код' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)           : [14], NoAutoSize, Protect;
  KatMc.Name     #3'Наименование МЦ' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc): [19], NoAutoSize, Protect;
#end
  strOwnMC       #3'С/Н' ('С-собственная, Н-несобственная МЦ/услуга', , sci1378Esc): [1], Protect, NoPickButton;
  OtpEd          #3'ЕдИзм' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)         : [4], NoAutoSize, Protect;
  SpSopr.KolFact #3'Количество' ('<Ctrl><Enter> - расширенная информация', , sci178Esc): [10], [prSignsInKol], NoAutoSize, NoProtect;
  Prv            #3'Цена текущая' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)       : [12], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  SumPrice       #3'Стоимость текущая' ('<Ctrl><Enter> - расширенная информация', , sci178Esc)      : [12], [brForSopr_RVPrice], NoAutoSize, NoProtect;
  KatParty.Name  #3'Партия' ('<Ctrl><Enter> - расширенная информация', , sci1378Esc)        : [17], NoAutoSize, Protect;
  SaldTune.Name  #3'Объект ЦУ' ('',, sci1378Esc): [10], Protect, NoAutoSize, PickButton;
  vsKau1         #3'КАУ 1' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau2         #3'КАУ 2' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau3         #3'КАУ 3' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau4         #3'КАУ 4' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau5         #3'КАУ 5' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau6         #3'КАУ 6' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau7         #3'КАУ 7' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau8         #3'КАУ 8' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau9         #3'КАУ 9' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau10        #3'КАУ 10' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  SmetaMy        #3'Смета' ('Локальная смета: "Номер": "Наименование"', , sci1378Esc): [20], NoAutoSize, Protect, PickButton;
  SmetaSpMy      #3'Спецификация сметы'
  ('Спецификация сметы: "№ п/п" ("Код") "Наименование"', , sci1378Esc): [20], NoAutoSize, Protect, PickButton;
  SmetaResMy     #3'Тип ресурса' ('Тип ресурса', , sci178Esc): [20], NoAutoSize, Protect;
end; // Browse*/

// для встроенного интрерфейса представления спецификации документа в виде иерархии по затратам.
Embedded scSpecif 'Спецификация' interface;
end; //Embedded scSpecif

end; // TabbedSheet tbsh

//******************************************************************************
// Процедуры, вызываемые из нижеследующего HandleEvent panSpecif


procedure DeleteBaseCost( docType: word; pSpSoprRec: tNRec ); forward;
procedure SetSpecifPositionInTree( pKatSoprRec, pSpSoprRec: tNRec ); forward;
procedure RebuildSpecifTree( pKatSoprRec, pSpSoprRec: tNRec ); forward;


// обработчик события cmDeleteRecord для таблицы SpSopr
function DoDeleteRecordSpSopr: boolean;
{
  if ( Message('Удалить текущую позицию?', YesNo) <> cmYes )
    result := false;
  else
  {
    // улаление базовой цены АВР, связанной с позицией спецификации, если таковая имеется.
    DeleteBaseCost( KatSopr.VidSopr, SpSopr.NRec );

    SynchUKSObj(SpSopr.NRec, comp(0), 0);
    DoDeleteCurrentSpSopr;
    procDocAutoCalcUsl;

    RebuildSpecifTree( KatSopr.nRec, SpSopr.NRec );

    result := true;
  }
}


HandleEvent   // panSpecif
#include soprc13.vpp

cmPick: {
 case CurField of
    #Attr_SchetZatr : {
        if (SpSopr.nRec <> 0) {
            if (refAttrTablePick.PickValue(coSpSopr, c_AttrSchetZatr, SpSopr.nRec)) {
              piExtAttr.coGetAttrID(coSpSopr, SpSopr.nRec, c_AttrSchetZatr);
              }
        }
    }

    #Attr_ElemZatr : {
        if (SpSopr.nRec <> 0) {
            if (refAttrTablePick.PickValue(coSpSopr, c_AttrElemZatr, SpSopr.nRec)) {
              piExtAttr.coGetAttrID(coSpSopr, SpSopr.nRec, c_AttrElemZatr);
              }
        }
    }
  end;

ReScanPanel(CurTable);
}


cmDelonProtect:
{
  case CurField of
   #Attr_SchetZatr: {
     piExtAttr.coSetAttrID( coSpSopr, SpSopr.nRec, c_AttrSchetZatr,  comp(0), '' );
   }

   #Attr_ElemZatr: {
     piExtAttr.coSetAttrID( coSpSopr, SpSopr.nRec, c_AttrElemZatr,   comp(0), '' );
   }

   #KatMc.BarKod, #KatMc.Name:
   {
     Stop;
   }

   #KatParty.Name:
   {
     if (SpSopr.cParty <> comp(OldFieldValue) AND KatSopr.cSchFact <> 0)
       SchFactFlag := TRUE; //надо редактировать счет-фактуру
   }
  end;
ReScanPanel(CurTable);
}

cmExprFieldChanged:
{
  if (IsValid(#SpDocSmeta) and TypeSopr = 110)
    case SpDocSmeta.TipRes of
      5, 6, 7:
      {
        ReReadRecord(#SpSopr);
        Exit;
      }
    end;

  case CurField of
    #prv, #SpSoprPrSum:
    {
      if (KatSopr.cVal = 0)
        set SpSopr.rPrice := double(ExprFieldValue);
      else
        set SpSopr.rVPrice := double(ExprFieldValue);
    }
    #SumPrice:
    {
      MakeSumPrice;
    }
  end;
}

cmCheckSumma:
{
  CheckSumma(FALSE);
  Stop;
}

#include SpSopr_e.vpp

cmDelOnProtect:
{
  case CurField of
    #SmetaMy,
    #SmetaSpMy:
    {
      Delete SpDocSmeta where ((  coSpSopr    == SpDocSmeta.coTable
                                and SpSopr.nRec == SpDocSmeta.cSpec
                                ));

      Delete SpStepRem where ((  SpSopr.nRec == SpStepRem.cSpStep
                               and word(1)     == SpStepRem.TipDoc
                               ));

        if ( KatSopr.VidSopr = 110 )
          ClearFieldOption(#Prv, ofProtected);

        ReScanPanel(#SpSopr);
      }
  //--------------
    #SaldTune.Name
  , #vsKau1
  , #vsKau2
  , #vsKau3
  , #vsKau4
  , #vsKau5
  , #vsKau6
  , #vsKau7
  , #vsKau8
  , #vsKau9
  , #vsKau10 :
      {
        PutCommand(cmIerarchy);
        RereadRecord;
      }
    #KatMCUKS.Name:
    {
      set SpSopr.cSpSopr := 0;
      Update Current SpSopr;
    }
  end;
}

cmPick :
  case CurField of
    #strOwnMc :
    {
      set SpSopr.wMcProp := SpSopr.wMcProp xor 1;
    }

    #prSopUsl :
    {
      Var oldprmc : word;
      oldprmc := SpSopr.PrMC;

      case RunMenu('PrihUsl111') of
        cmCancel  : Exit;
        cmAllVo   : set SpSopr.PrMC := 3;
        cmAllVos  : set SpSopr.PrMC := 4;
        cmAllVosM : set SpSopr.PrMC := 5;
        cmAllVosV : set SpSopr.PrMC := 6;
        cmValue1  : set SpSopr.PrMC := 7;
        cmValue2  : set SpSopr.PrMC := 8;
        else        set SpSopr.PrMC := 2;
      end;

      if ( SpSopr.PrMC > 2 )
        {
          set SpSopr.KolFact := 1;
          set SpSopr.KolOpl  := 1;

          if ( oldprmc = 2 )
            {
              set SpSopr.Kol     := 0;
              set SpSopr.rPrice  := 0;
              set SpSopr.rVPrice := 0;
            }
        }
      else
        {
          set SpSopr.KolFact := 0;
          set SpSopr.KolOpl  := 0;
          set SpSopr.Kol     := 0;
          set SpSopr.rPrice  := 0;
          set SpSopr.rVPrice := 0;
        }

      if ( not IsNew )
        CheckSumma(FALSE);

      SetEditOption2;
    }
   //--------------------------
    #SmetaMy,
    #SmetaSpMy:
      {
        RunInterface(iVSmeta, SpSopr.nRec, word(coSpSopr));

        if ( KatSopr.VidSopr = 110 )
          if ( IsValid(#SpDocSmeta) )
            SetFieldOption(#Prv, ofProtected);
          else
            ClearFieldOption(#Prv, ofProtected);

        ReReadRecord(#SpSopr);
      }
   //--------------------------
    #SaldTune.Name
  , #vsKau1
  , #vsKau2
  , #vsKau3
  , #vsKau4
  , #vsKau5
  , #vsKau6
  , #vsKau7
  , #vsKau8
  , #vsKau9
  , #vsKau10 :
      {
        PutCommand(cmIerarchy);
      }

   #KatUSL.Name, #KatUsl.Kod:
   {
     if ( wGetTune('Doc.RasNeotgUsl') = 1 ) and
        ( SpSopr.cSpStep <> 0 )
       GetMCUslDO;
     else
       case wGetTune('Pick.AktUslBF3') of
         0: // из каталога
           {
             if wGetTune('Pick.SelKatMc') = 1
               {
                 Message('Выбор из каталога услуг недоступен!');
                 Exit;
               }

             GetMCUSLKat;
           }
         1: // из прайс-листа
           {
             GetMCUSLPrl;
           }
         3: // из спецификации вышестоящего документа
           {
             GetMCUslDO;
           }

       end;

       if (KatSopr.VidSopr = 110 AND KatSopr.cUKS <> 0)
         Set SpSopr.cUKS := KatSopr.cUKS;

       if (SpSopr.cMcUsl <> 0)
         CheckSumma(TRUE);

       if ( SpSopr.PrMC > 2 )
         iRecalcK.RecalcOne(KSSopr.nRec, SpSopr.Buffer);

       // необходима проверка и установка дат объектов строительства, ссылающихся на данный акт
       isCBDSensitiveModified := true;

   }

   #KatMc.Name, #KatMc.BarKod :
    {
      //Приоритер выбора спецификации:
      // 1. по накладной, 2. по ДО, 3 из каталога или прайс листа

      if (KatSopr.VidSopr = 114)
      {
        if KatSopr.cKatSopr <> comp(0)
        {
          if RunInterface(Select_MC, RashNakl.NRec, SpSopr.NRec, SpOrder.cSpSopr) <> cmCancel
            InsertMcInAkt(TRUE);
        }
        else
        {
          if KatSopr.cStepDoc <> 0
          {
            GetMCUslSopr;
          }
          else
          {
            SpSopr.PrMc := 1;
            GetMCUSLKat;

            if (SpSopr.cMcUsl <> 0)
              CheckSumma(TRUE);
          }
        }
      }

      if (KatSopr.VidSopr = 110)
      {
        if KatSopr.cStepDoc <> 0
        {
          TMCUSL := 1;  //выбор мц из док-основания

          GetMCUslSopr;
        }
        else
        {
          SpSopr.PrMC := 1;
          TMCUSL      := 1;

          GetMCUSLKat;

          if (KatSopr.VidSopr = 110 AND KatSopr.cUKS <> 0)
            Set SpSopr.cUKS := KatSopr.cUKS;
        }
      }
    }

    #OtpEd:
    {
      ChangeOtpEd;
      CheckSumma(FALSE);
    }

    #KatParty.Name:
    {
      RunInterface(GetPar__, SpSopr.cParty, if (SpSopr.PrMC = 1, SpSopr.cMCUSL, comp(0)));

      if (SpSopr.cParty <> comp(OldFieldValue) AND KatSopr.cSchFact <> 0)
      {
        SchFactFlag:=TRUE; //надо редактировать счет-фактуру
      }
    }

    #KlVal.SimvolV:
    {
      ChangeSpSoprVal;
      CheckSumma(FALSE);
    }

    #UchPriceOrd:
    {
      if (SpSopr.PrVoz = 0)
        set SpSopr.PrVoz := 1;
      else
        set SpSopr.PrVoz := 0;
    }

    #TTNResOtgr.Name:
    {
      RunInterface( GetResOtgr, SpSopr.cResOtgr);
    }

    #SpSopr.KolFact:
    {
      Var nKol: double;
      nKol := SpSopr.KolFact;

      RunInterface('KolDopEd',
                    word(coSpSopr), // coTable,  код таблицы спецификации
                    SpSopr.NRec,    // cRec,     ссылка на спецификацию
                    1,              // wTipKol,  тип количества
                    'Ввод фактического количества', // sTitle,   заголовок интерфейса по шаблону: "Ввод количества ..."
                    SpSopr.cMCUSL,  // cMCUsl,   NRec МЦ/услуги
                    SpSopr.PrMC,    // PrMC,     1- МЦ, 2 - услуга, 3 - группа МЦ, 4 - группа услуг
                    SpSopr.Price,   // Price,    цена за 1-у отпускную единицу
                    Cena_Pr,        // ForPrice, кол-во знаков после запятой в цене
                    Cena_Pr,        // ForSumma, кол-во знаков после запятой в стоимости
                    KatSopr.cValut, // cVal,     валюта переданной цены
                    SpSopr.cOtpEd,  // cOtpEd,   ссылка на отпускную единицу измерения
                    nKol,           // fKol      количество в отпускных единицах (возвращаемый параметр)
                    longint(0),
                    SpSopr.VidSopr
                  );

      set SpSopr.KolFact := nKol;

      ProcessCommand(cmCheckField);
    }

  end; //case //cmPick

cmCheckField:
{
  if (SpSopr.cMcUsl = 0)
  {
    Message('Не указана услуга.');
    ReReadRecord(#SpSopr);
    Exit;
  }

  var tmpMyIsSmetPos, vbProport   : boolean;
  var tmpMyIsSmetPosKf : double;
  var MySm_SmetDoc     : comp;
  var MySm_SmetJob     : comp;
  var MySm_SmetSpec    : comp;

  tmpMyIsSmetPos := FALSE;

  if (KatSopr.VidSopr = 110 OR KatSopr.VidSopr = 111)
    if (CurField = #SpSopr.KolFact)
      if (GetFirst SpDocSmeta = tsOk)
      {
        if ( TypeSopr = 110 )
          case SpDocSmeta.TipRes of
            5, 6, 7:
            {
              ReReadRecord(#SpSopr);
              Exit;
            }
          end;

        if ( SpSopr.KolFact = 0 )
        {
          Message('Кол-во для сметной позиции не может быть нулевым !'
              +''#13#3+'Для отмены изменений нажмите <Alt><Backspace>',Information);
          Abort;
          Exit;
        }

        //корректировка кол-ва по другим сметным позициям для этой же работы
        vbProport := TRUE;

        if ( TypeSopr = 110 )
          if ( not boGetTune('Oper.Smeta.Proport') )
            vbProport := FALSE;

        if ( vbProport )
        {
          if ( Message('Сметная позиция связана с другими позициями спецификации.'
                      +''#13' При изменении кол-ва необходимо будет модифицировать кол-во'
                      +''#13' по другим позициям спецификации текущей сметной работы.'
                      +''#13#13' Продолжить?',YesNo) = Yes )
          {
            tmpMyIsSmetPosKf := SpSopr.KolFact / double(OldFieldValue);
            tmpMyIsSmetPos   := TRUE;
            MySm_SmetDoc     := SpDocSmeta.cDoc;
            MySm_SmetJob     := SpDocSmeta.cPosition;
            MySm_SmetSpec    := SpDocSmeta.cSpec;

            if ( Update Current SpSopr = tsOk )
            {
            }
          }
          else
            set SpSopr.KolFact := double(OldFieldValue);
        }
        else
          if ( Update Current SpSopr = tsOk )
          {
          }
      }

    if (KatSopr.VidSopr = 114)
      if (RashNakl.NRec <> comp(0))
        case CurField of
        //==============================================================================
          #SpSopr.KolFact:
            {
              var tkoef: double;
              var tkol: double;  tkol  := MaxKolVZ(SpOrder.cSpSopr, SpSopr.NRec, FALSE, tkoef);
              tKoef := tKoef / fEdIzm.GetKoefOtpEd(SpSopr.cOtpEd);

            if ( NOT f_FirstKolIsGreater(SpSopr.KolFact, tkol * tkoef) )
              fEdIzm.CheckKolDiskret(SpSopr.KolFact, KatOtpEd.NRec, TRUE, TRUE);
            else
            {
              set SpSopr.KolFact := tkol * tkoef;

              if ( SpSopr.KolFact > 0 )
                Message('Количество установлено равное доступному.');
              else
              {
                Message ('Нет доступного количества МЦ!');
                set SpSopr.KolFact := 0;
              }

              fEdIzm.CheckKolDiskret(SpSopr.KolFact, KatOtpEd.NRec, TRUE, TRUE);

              if ( SpSopr.KolFact < 0 )
                set SpSopr.KolFact := 0;
            }
          }
        //==============================================================================
        end;

   case CurField of
     #SpSopr.rPrice, #SpSopr.rVPrice, #SpSoprPrSum:
     {
       if (CurField <> #SpSoprPrSum)
       {
         set SpSopr.Price  := SpSopr.rPrice;
         set SpSopr.vPrice := SpSopr.rvPrice;
       }

       if ( (IsValid(#SpDocSmeta) and TypeSopr = 110) )
         case SpDocSmeta.TipRes of
           5, 6, 7:
           {
             ReReadRecord(#SpSopr);
             Exit;
           }
         end;

       if ( SpSopr.PrMC > 2 )
         iRecalcK.RecalcOne(KSSopr.nRec, SpSopr.Buffer);
     }

     #SpSopr.Kol, #SpSopr.ProcUb,
     #SpSopr.KolFact, #SpSopr.KolOpl:
     {
       if ( (IsValid(#SpDocSmeta) and TypeSopr = 110) )
         case SpDocSmeta.TipRes of
           5, 6, 7:
           {
             ReReadRecord(#SpSopr);
             Exit;
           }
         end;

       Var
         tKol, SumKol: double;

       if ( KatSopr.VidSopr = 111 OR KatSopr.VidSopr = 117 )
         if ( wGetTune('Doc.RasNeotgUsl') = 1 )
           if ( GetFirst SpStep where (( SpSopr.cSpStep == SpStep.NRec )) = tsOk )
             {
               tKol   := oRasNeotg.RecalcNeotgr(SpSopr.cSpStep, SpSopr.nRec);
               SumKol := SpStep.KolSkl - tKol;
               SumKol := SumKol * fEdIzm.GetKoefOtpEd(SpStep.cOtpEd) / fEdIzm.GetKoefOtpEd(SpSopr.cOtpEd);

               if ( SumKol < SpSopr.KolFact )
                 set SpSopr.KolFact := SumKol;

               if ( SumKol < SpSopr.KolOpl )
                 set SpSopr.KolOpl := SumKol;
             }

       if ( SpSopr.PrMC > 2 )
         iRecalcK.RecalcOne(KSSopr.nRec, SpSopr.Buffer);
       else
         CheckAndMakeKol;

       Update Current SpSopr;

       // пересчет кол-ва в распределении позиции
       if (CurField = #SpSopr.KolFact)
         oSDfuns.CheckKolSoprOrdB(SpSopr.NRec, Double(OldFieldValue));
     }

     // для обработки конфигуратором
     #SpDocNal.Summa, #SpDocNal.SumVal, #SpDocNal.SumNal:
       {
         if (Not isValid(#SpDocNal))
           Exit;

         set SpSopr.ManualTax := 1;
         Update Current SpSopr;

         case CurField of
           #SpDocNal.Summa:
             {
               set SpDocNal.SumVal := SpDocNal.Summa / GetCursPrice;
               set SpDocNal.SumNal := SpDocNal.Summa / CurseNalog;
             }

           #SpDocNal.SumVal:
             {
               set SpDocNal.Summa  := SpDocNal.SumVal * GetCursPrice;
               set SpDocNal.SumNal := SpDocNal.Summa  / CurseNalog;
             }

           #SpDocNal.SumNal:
             {
               set SpDocNal.Summa  := SpDocNal.SumNal * CurseNalog;
               set SpDocNal.SumVal := SpDocNal.Summa  / GetCursPrice;
             }
         end;

         Update Current SpDocNal;

         CalcSumNalogs;
         Update Current SpSopr;
       }
   end;

   if (tmpMyIsSmetPos)
     _LOOP SpDocSmeta where ((coSpSopr     == SpDocSmeta.coTable
                          AND MySm_SmetDoc == SpDocSmeta.cDoc
                          AND MySm_SmetJob == SpDocSmeta.cPosition))
     {
       if (SpDocSmeta.TipRes = 7)
           Continue;
       //корректировка спецификации дока
       if (MySm_SmetSpec <> SpDocSmeta.cSpec)
         if ( GetFirst FastFirstRow SpSoprSmet where (( SpDocSmeta.cSpec == SpSoprSmet.NRec )) <> tsOk )
           Continue;
         else
         {
           SpSoprSmet.KolFact := SpSoprSmet.KolFact * tmpMyIsSmetPosKf;

           if (KatSopr.VidSopr = 110)
           {
             if ( not boGetTune('OPER.Smeta.KontrolNedVelich') )
               fEdIzm.CheckKolDiskret(SpSoprSmet.KolFact, SpSoprSmet.cOtpEd, TRUE, FALSE);
           }
           else
           {
             fEdIzm.CheckKolDiskret(SpSoprSmet.KolFact, SpSoprSmet.cOtpEd, TRUE, FALSE);
           }

           //fEdIzm.CheckKolDiskret(SpSoprSmet.KolFact, SpSoprSmet.cOtpEd, TRUE, FALSE);

           CheckSpSoprKolRet(2, SpSoprSmet.ProcUb, SpSoprSmet.KolFact,
                                SpSoprSmet.KolOpl, SpSoprSmet.Kol);

           Update Current SpSoprSmet;
         }

       //корректировка объема работы (SpDocSmeta)
       SpDocSmeta.Kol := SpDocSmeta.Kol * tmpMyIsSmetPosKf;
       Update Current SpDocSmeta;
     }

   if (KatSopr.VidSopr = 110 and IsValid(#SpDocSmeta))
   {
     oRaschAct.SchetPrice(KatSopr.nRec);
     ReReadRecord(#SpSopr);
   }

   CheckSumma(FALSE);
   procDocAutoCalcUsl;
}

cmDeleteRecord:
{
  /* ПИР 106.8854
  if (IsValid(#SpDocSmeta) and TypeSopr = 110)
    case SpDocSmeta.TipRes of
      5, 6, 7:
      {
        Message('Позиция является одним из сметных коэффициентов. Нельзя удалить!', Information)
        Abort;
        Exit;
      }
    end;
  */

  if( not DoDeleteRecordSpSopr() )
  {
    Abort;
  }
}

cmSetCurField :
{
  if (NOT boGetTune('Pick.AutoPickinInterface'))
    Exit;

  if (NOT OtkatToOldState(FALSE, word(0)))
    Exit;

  case Target of
    #KatUsl.Name, #KatUsl.Kod, #KatMC.Name, #KatMC.BarKod:
    {
      if (SpSopr.cMCUsl = 0)
        PutCommand(cmPick);
    }

    #TTNResOtgr.Name:
    {
      if (SpSopr.cResOtgr = 0)
        PutCommand(cmPick);
    }
  end;
}

cmSetDefault :
{
  if (CurTable = #SpSopr)
    if NOT OtkatToOldState(FALSE, word(0))
    {
      Stop;
      Exit;
    }

  SpSoprDefault;

  case KatSopr.VidSopr of
    114:
    {
      SpSopr.PrMc := 1;

      if (CurField <> #KatMC.BarKod)
        SelectField(#KatMC.Name);
    }

    110:
    {
      SpSopr.PrMc := if (CurFormatInArea(brSpecif1102) = brSpecif1102, 1, 2);

      if (CurFormatInArea(brSpecif1102) = brSpecif1102)
      {
        if (CurField <> #KatMC.BarKod)
          SelectField(#KatMC.Name)
      }
      else
      {
        if (CurField <> #KatUsl.Kod)
          SelectField(#KatUsl.Name);
      }

      if ( boGetTune('CelUchForModul.UKS') )
        oLinkMTR2Spec.SetValU(word(coSpSopr), SpSopr.nRec, 0, true);
    }

    else
    {
      if (CurField <> #KatUsl.Kod)
        SelectField(#KatUsl.Name);

      oLinkMTR2Spec.SetValU(word(coSpSopr), SpSopr.nRec, coGetTune('CelUchForModul.BUY'), false);
    }
  end;

  if ( KatSopr.VidSopr = 110 )
    ClearFieldOption(#Prv, ofProtected);
}

cmPositionChanged:
{
  if ( KatSopr.VidSopr = 110 )
    if ( IsValid(#SpDocSmeta) )
      SetFieldOption(#Prv, ofProtected);
    else
      ClearFieldOption(#Prv, ofProtected);


  // Установить в дереве спецификации указатель на соответствующую позицию спецификации
  SetSpecifPositionInTree( KatSopr.nRec, SpSopr.nRec );
}

cmUpdateRecord:
{
  RebuildSpecifTree(  KatSopr.nRec, SpSopr.nRec );
}

cmInsertRecord:
{
  RebuildSpecifTree(  KatSopr.nRec, SpSopr.nRec );
}

end; // HandleEvent panSpecif
end; // Panel panSpecif


// Обработчик пункта локального меню "Расширенная информация" таблицы SpSopr
procedure DoAttribSpSopr;
{
  GetCursPrice();

  oLinkMTR2Spec.SetObjParam( word(coSpSopr)
                           , SpSopr.nRec
                           , if(not OtkatToOldState(false, word(0))
                               , 1
                               , if( KatSopr.cUKS <> 0
                                   , 3
                                   , if(IsValid(#SmetaStroy), 2, if(TypeSopr = 110, 4, 0))
                                   )
                               )
                           );

  oLinkMTR2Spec.SelFormat(IsValid(#SpSopr));
  oRaspPlat.SetObjParam(SpSopr.nRec);

  RunWindow(SpecifInfo);

  isCBDSensitiveModified := true; // см. описание в объявлении переменной
  isRFPSensitiveModified := true; // см. описание в объявлении переменной
}


// Установка ограничений на таблицу SpSopr (спецификация) для в зависимости
// от того, что нужно видеть в спецификации: МЦ или Услуги, либо и то, и другое
// Параметр prMcUsl: 0 - нет ограничений; 1 - МЦ; больше 1 - услуги
procedure SetSpSoprBoundsByPrMc( prMcUsl: word );
{
  if( prMcUsl = 0 )
  {
    if( BoundActive( tbForUKSUsl ) )
      SubBounds( tbForUKSUsl );

    if( BoundActive( tbForUKSMC ) )
      SubBounds(tbForUKSMC);
  }
  if( prMcUsl = 1 )
  {
    // матценности
    if( BoundActive( tbForUKSUsl ) )
      SubBounds( tbForUKSUsl );

    if( not BoundActive( tbForUKSMC ) )
      AddBounds(tbForUKSMC);
  }
  else
  {
    // услуги
    if( BoundActive( tbForUKSMC ) )
      SubBounds(tbForUKSMC);

    if( not BoundActive( tbForUKSUsl ) )
      AddBounds(tbForUKSUsl);
  }
}


//******************************************************************************
// Обработчики событий и процедуры обслуживания интерфейса oSpecifAsSmeta
//******************************************************************************

// Перестроить дерево спецификации, установить указатель.
procedure RebuildSpecifTree( pKatSoprRec, pSpSoprRec: tNRec );
{
  if( not NullVipRef( oSpecifAsSmeta ) )
  {
    oSpecifAsSmeta.SetParamSpecif( pKatSoprRec );
    oSpecifAsSmeta.SetPosition( pSpSoprRec );
  }
}

// Установить в дереве указатель на соответствующую позицию спецификации
procedure SetSpecifPositionInTree( pKatSoprRec, pSpSoprRec: tNRec );
{
  if( not NullVipRef( oSpecifAsSmeta ) )
  {
    if( pKatSoprRec = 0 )
    {
      exit;
    }

    if( not oSpecifAsSmeta.SetPosition( pSpSoprRec ) )
    {
      // не удалось установить указатель. Возможно это новая запись. Перестроим дерево.
      RebuildSpecifTree( pKatSoprRec, pSpSoprRec );
    }
  }
}


// улаление базовой цены АВР, связанной с позицией спецификации, если таковая имеется.
procedure DeleteBaseCost( docType: word; pSpSoprRec: tNRec );
{
  if( not NullVipRef( oBaseCostStorage ) )
  {
    oBaseCostStorage.DeleteBaseCost( docType, pSpSoprRec );
  }
}


// Обработчик события EventAttrib интерфейса SpecifAsSmeta (SAS)
procedure OnSASEventAttrib( spSoprNrec: tNRec );
{
  // Перед позиционированием в SpSopr нужно снять все ограничения, т.к. неизвестно, в какие из них попадет
  // запись spSoprNrec
  SetSpSoprBoundsByPrMc( 0 );

  if( GetFirst SpSopr where(( spSoprNrec == SpSopr.NRec )) = tsOk )
  {
    // Теперь необходимо установить ограничения на МЦ или услуги, т.к. DoAttribSpSopr
    // запускает окно редактирования, которое имеет разное содержимое в зависимости
    // от текущего содержимого SpSopr.PrMc. Но в окошке можно жать PgUp, PgDn для
    // навигации по SpSopr, и возможна была бы ситуация, когда в окне ред. МЦ видим услугу

    // Значения этих переменных на всякий случай устанавливаю подобно всему остальному коду.
    UslOrMC := (SpSopr.PrMc = 1);
    TMCUSL  := if( SpSopr.PrMc = 1, 1, 2 );

    SetSpSoprBoundsByPrMc( SpSopr.PrMc );
    DoAttribSpSopr();

    RebuildSpecifTree( KatSopr.nRec, spSoprNrec );
  }
}


// Обработчик события UpdateVisibleInfo интерфейса SpecifAsSmeta (SAS)
procedure OnSASEventUpdateVisibleInfo;
{
  RereadRecord( #KatSopr );
  RereadRecord( #SpSopr );
}


// Обработчик события EventCBDSensitiveModified интерфейса SpecifAsSmeta (SAS)
// Событие возникает, если модифицировались чувствительные для процедур контроля сроков строительства поля -
// объект строительства, связанный с позицией спецификации
procedure OnSASEventCBDSensitiveModified;
{
  isCBDSensitiveModified := true; // см. описание в объявлении переменной
  isRFPSensitiveModified := true; // см. описание в объявлении переменной
}

// Обработчик события EventChooseFromPrice интерфейса SpecifAsSmeta (SAS)
// Генерируется интерфейсом SpecifAsSmeta при необходимости выбора из каталога МЦ/услуг.
procedure OnSASEventChooseFromPrice( spSoprNrec: tNRec );
{
  PushBounds( #SpSopr );
  _try
  {
    if( GetFirst SpSopr where(( spSoprNrec == SpSopr.NRec )) = tsOk )
    {
      // Значения этих переменных на всякий случай устанавливаю подобно всему остальному коду.
      UslOrMC := (SpSopr.PrMc = 1);
      TMCUSL  := if( SpSopr.PrMc = 1, 1, 2 );

      DoChooseFromPrice();

      RebuildSpecifTree( KatSopr.nRec, spSoprNrec );
    }
  }
  _finally
  {
    PopBounds( #SpSopr );
  }
}

// Обработчик события EventAddNewMCUsl интерфейса SpecifAsSmeta (SAS)
// Интерфейс SpecifAsSmeta просит добавить новую МЦ\Услугу в спецификацию
function OnSASEventAddNewMCUsl( prMcUsl: word ): comp;
{
  result := 0;

  if( not CanEditDocument() )
    exit;

  // необходимо установить ограничения на МЦ или услуги, т.к. DoAttribSpSopr
  // запускает окно редактирования, которое имеет разное содержимое в зависимости
  // от текущего содержимого SpSopr.PrMc. Но в окошке можно жать PgUp, PgDn для
  // навигации по SpSopr, и возможна была бы ситуация, когда в окне ред. МЦ видим услугу
  SetSpSoprBoundsByPrMc( prMcUsl );

  // Значения этих переменных на всякий случай устанавливаю подобно всему остальному коду.
  UslOrMC := (prMcUsl = 1);
  TMCUSL  := prMcUsl;

  SpSoprDefault();

  insert current SpSopr;

  if ( boGetTune('CelUchForModul.UKS') )
    oLinkMTR2Spec.SetValU(word(coSpSopr), SpSopr.nRec, 0, true);

  ClearFieldOption(#Prv, ofProtected);

  DoAttribSpSopr();

  result := SpSopr.nRec;
}

// Обработчик пункта локального меню "Выбор из смет Ctrl+I"
procedure DoChooseFromSmet;
{
  if ( TypeSopr <> 110 AND TypeSopr <> 111 AND TypeSopr <> 117 )
    Exit;

  if ( CurTable <> #SpSopr )
    Exit;

  if ( NOT OtkatToOldState(TRUE, word(0)) )
    Exit;

  GetSmetMCUSL;

  if ( KatSopr.VidSopr = 110 )
  {
    oRaschAct.SchetPrice(KatSopr.nRec);
    ReReadRecord(#SpSopr);
    CheckSumma(TRUE);
    ReReadRecord(#SpSopr);

    isCBDSensitiveModified := true; // см. описание в объявлении переменной
    isRFPSensitiveModified := true; // см. описание в объявлении переменной
  }
}


// Обработчик пункта локального меню "Выбор позиции из прайс-листа"
// Реально - обработчик выбора МЦ/Услуг по Ctrl+F3 из каталога или прайс-листа,
// в зависимости от настройки "Настройки Галактики \ Управление капстроительством \
//  Документы \ Акты выполненных работ \ <Ctrl><F3> в спецификации актов выполненных работ"
procedure DoChooseFromPrice;
{
  if( NOT OtkatToOldState(TRUE, word(0)) )
    Exit;

  if ( wGetTune('Doc.RasNeotgUsl') = 1 ) and ( SpSopr.cSpStep <> 0 )
    GetMCUslDO;
  else
    case wGetTune('Pick.AktUslBCtrlF3') of
      0: // из каталога
        {
          if wGetTune('Pick.SelKatMc') = 1
            {
              Message('Выбор из каталога услуг недоступен!');
              Exit;
            }

          GetMCUSLKat;
        }
      1: // из прайс-листа
        {
          GetMCUSLPrl;
        }
      3: // из спецификации вышестоящего документа
        {
          GetMCUslDO;
        }

    end;

  if( SpSopr.cMCUSL <> 0 )
    CheckSumma(TRUE);

  isCBDSensitiveModified := true; // см. описание в объявлении переменной
  isRFPSensitiveModified := true; // см. описание в объявлении переменной
}


// Обработчик пункта локального меню "Просмотр и изменение параметров расчетной услуги"
procedure DoViewEcitCalcUsl;
{
  if ( KatUsl.TYPEUSL = 1 )
  {
    if ( KatSopr.cVal = 0 )
      RunInterface('GETPAR2', 1, SpSopr.NRec, KatUsl.NRec,
                                 SpSopr.rPrice, SpSopr.KolFact, word(coSpSopr))
    else
      RunInterface('GETPAR2', 1, SpSopr.NRec, KatUsl.NRec,
                                 SpSopr.rVPrice, SpSopr.KolFact, word(coSpSopr));
    CheckSumma(FALSE);
  }
}


// сбросить флаги о необходимости пересчета фактических показателей
procedure ResetRecalcFactPerfsFlags;
{
  saveSumDoc := Sum; // описание см. в объявлении переменной
  isRFPSensitiveModified := false; // см. описание в объявлении переменной
}

// Пересчет фактических показателей по объектам строительства и локальным сметам для АВР
procedure RecalcFactPerfs( _katSoprNRec: comp );
{
  // процедура предназначена только для АВР
  if( KatSopr.VidSopr != 110 )
    exit;

  StartNewVisual(vtRotateVisual, vfTimer + vfBreak + vfConfirm, 'Пересчет фактических показателей', 1);
  _try
  {
    // Пересчет показателей по объектам строительства, на которые ссылается данный АВР

    // Получить перечень объектов строительства, упоминаемых в текущем АВР
    // и пересчитать показатели по каждому из них
    _loop SpSchem where(( _katSoprNRec == SpSchem.cDoc and cgDoc_0110 == SpSchem.TiDk ))
    {
      if( GetFirst DocSchem where(( SpSchem.cSchem == DocSchem.nRec and 454 == DocSchem.TiDkGal (NoIndex) )) = tsOk )
      {
        // Код пересчета показателей взял из процедуры RaschForOneObj интерфейса KatStroy.vip
        AddSum.MinusSumma(DocSchem.cDoc, 0);
        Docs.SetParamDocs(DocSchem.cDoc);
        Docs.SchetSum;
        AddSum.PlusSumma(DocSchem.cDoc, 0);
      }
    }

    // Пересчет показателей по локальным сметам, на которые ссылается данный АВР

    delete all mtSmetList;

    // Получить перечень смет, на которые ссылается АВР (проход по спецификации и заполнение таблицы в памяти)
    _loop SpSoprSmet where(( _katSoprNRec == SpSoprSmet.cSopr ))
    {
      if( GetFirst SpDocSmetaFree where(( coSpSopr == SpDocSmetaFree.coTable and SpSoprSmet.nRec == SpDocSmetaFree.cSpec )) = tsOk )
      {
        if( GetFirst mtSmetList where(( SpDocSmetaFree.cSmeta == mtSmetList.cSmeta )) != tsOk )
        {
          insert mtSmetList set mtSmetList.cSmeta := SpDocSmetaFree.cSmeta;
        }
      }
    }

    // Для каждой ЛС осуществить пересчет показателей
    _loop mtSmetList
    {
      Serv.SmetaRaschet( mtSmetList.cSmeta );
    }
  }
  _finally
  {
    StopVisual('', 0);
  }
}

const
  // значения настройки "Пересчет фактических показателей при редактировании акта выполненных работ"
  constRFP_none = 0; // нет
  constRFP_automatic = 1; // автоматически
  constRFP_request = 2; // по запросу
end;

// Возвращает true, если необходим пересчет фактических показателей
// по объектам строительства и локальным сметам для АВР
//   Пересчет необходим, если изменилась сумма по документу (предполагается, что изменение суммы говорит в т.ч.
// об изменении спецификации, количества ресурсов.
function IsNeedRecalcFactPerfs( _katSoprNRec: comp ): boolean;
{
  result := false;

  var sumDoc: double; // сумма по документу _katSoprNRec

  // найти сумму по документу _katSoprNRec
  if( _katSoprNRec = KatSopr.nRec ) // проверочка на случай вызова из cmPositionChanged
  {
    sumDoc := Sum;
  }
  else
  {
    if( GetFirst KSopr where (( _katSoprNRec == KSopr.nRec )) != tsOk )
      exit;

    sumDoc := if( KSopr.cVal = 0, KSopr.Summa, KSopr.SumVal );
  }

  if( TypeSopr = 110 and (sumDoc != saveSumDoc or isRFPSensitiveModified) )
    result := true;

  var recalcFactPerfsMode: word;
  // В ПОСЛЕДСТВИИ УДАЛИТЬ (доп. проверочный код нужен был из-за выхода спецпатча для L_UKS (ver 38.01)
  // УДАЛИТЬ КОД ПРОВЕРКИ НАЛИЧИЯ НАСТРОЙКИ ПОСЛЕ ВЫХОДА  L_Uks_Res_810390
  if( ExistTune( 'UKS.Raschet.RecalcFactPerfs' ) )
    recalcFactPerfsMode := wGetTune( 'UKS.Raschet.RecalcFactPerfs' ); // настройка "Пересчет фактических показателей при редактировании акта выполненных работ"
  else
    recalcFactPerfsMode := constRFP_none; // режим по умолчанию.

  case recalcFactPerfsMode of
    constRFP_none: // настройка запрещает пересчет показателей
    {
      result := false;
    }

    constRFP_automatic: // ничего делать не надо. result уже содержит правильное значение
    {}

    constRFP_request:
    {
      if( result ) // если есть необходимость пересчета - зададим еще и вопрос :))
      {
        var userAnswer: word;
        userAnswer := MessageWithHelp(
          'Пересчитать фактические показатели по объектам строительства и локальным сметам ?',
          yesNo + HelpButton,
          hcUKS_LokMenuEditAVR
        );

        if( userAnswer != cmYes )
          result := false;
      }
    }
  end;
}


HandleEvent // window EditSopr?
#include soprc13.vpp

cmInit:
{
  if (TypeSopr = 114)
  {
    SetWindowTitle(EditSopr, 'Редактирование акта приемки');
    SetFormat(scrHeader2);
    SetFormat(brSpecif3);

    if ( not ExistTune('Doc.DEI.ViewDoc') or (not DopEd_Used2(TypeSopr)) )
      {
        SetFieldVisible(#KatDopEd1.ShortName, false);
        SetFieldVisible(#KatDopEd2.ShortName, false);
        SetFieldVisible(#SpDopEd1.Kol, false);
        SetFieldVisible(#SpDopEd2.Kol, false);
      }
    else
      case wGetTune('Doc.DEI.ViewDoc') of

        0:
          {
            SetFieldVisible(#KatDopEd1.ShortName, false);
            SetFieldVisible(#KatDopEd2.ShortName, false);
            SetFieldVisible(#SpDopEd1.Kol, false);
            SetFieldVisible(#SpDopEd2.Kol, false);
          }

        1:
          {
            SetFieldVisible(#KatDopEd1.ShortName, true);
            SetFieldVisible(#KatDopEd2.ShortName, false);
            SetFieldVisible(#SpDopEd1.Kol, true);
            SetFieldVisible(#SpDopEd2.Kol, false);
          }

        2:
          {
            SetFieldVisible(#KatDopEd1.ShortName, true);
            SetFieldVisible(#KatDopEd2.ShortName, true);
            SetFieldVisible(#SpDopEd1.Kol, true);
            SetFieldVisible(#SpDopEd2.Kol, true);
          }

      end;
  }
  else
  {
    SetFieldVisible(#KatDopEd1.ShortName, false);
    SetFieldVisible(#KatDopEd2.ShortName, false);
    SetFieldVisible(#SpDopEd1.Kol, false);
    SetFieldVisible(#SpDopEd2.Kol, false);
  }

  if (TypeSopr = 110)
  {
    isCBDSensitiveModified := false; // см. описание в объявлении переменной
    saveKatSoprNrec := KatSopr.nRec; // запомнить текущее значение nrec

    SetSpSoprBoundsByPrMc( 2 ); // Установить фильтр спецификации на услуги

    RereadRecord(#SpSopr);

    UslOrMC := FALSE;

    SetWindowTitle(EditSopr, 'Редактирование акта выполненных работ');

    SetFormat(scrHeader110); // "Шапка" акта выполненных работ

    // включить режим работы отображения спецификации АВР в виде сметы и хранения базовых цен
    // Режимы использования базовых цен в АВР см. в BaseCostStorage.inc
    if( wGetTune( 'UKS.Raschet.BasPrice' ) = bcmUseStored )
    {
      // Методы для работы с базовыми ценами, хранимыми в спецификации документа.
      if( not GetVipInterface( oBaseCostStorage ) )
      {
        Abort;
        exit;
      }

      // сделать видимыми поля и закладки, содержащие базовую цену и базовую стоимость позиций спецификации АВР
      SetFieldAndLabelVisible( #baseCost, true );
      SetFieldAndLabelVisible( #TblBaseCost.DopSum2, true );
    }
    else
    {
      // Спрятать поля и закладки, содержащие базовую цену и базовую стоимость позиций спецификации АВР
      SetFieldAndLabelVisible( #baseCost, false );
      SetFieldAndLabelVisible( #TblBaseCost.DopSum2, false );
    }

    // Режим хранимых базовых цен работает только совместно с иерархическим представлением спецификации АВР
    // Режимы использования базовых цен в АВР см. в BaseCostStorage.inc
    // Значения констант режимов отображения см. в SpecifAsSmeta.inc
    if( wGetTune( 'UKS.Raschet.BasPrice' ) = bcmUseStored and wGetTune( 'UKS.Doc.AktVR.ViewSpec' ) = vsmFlat )
    {
      Message(
        'Режим хранимых базовых цен работает только совместно с иерархическим представлением спецификации АВР.' + chr(13) +
        'Измените настройку:' + chr(13) +
        GetTuneName('UKS.Doc.AktVR.ViewSpec')
        );

      Abort;
      Exit;
    }

    if( wGetTune( 'UKS.Doc.AktVR.ViewSpec' ) = vsmHierarchy or wGetTune( 'UKS.Doc.AktVR.ViewSpec' ) = vsmHierarchyAndFlat ) // значения констант см. в SpecifAsSmeta.inc
    {
      if( NullVipRef( oSpecifAsSmeta ) )
      {
        LoadVipInterface( oSpecifAsSmeta ) ;
      }

      if( not NullVipRef( oSpecifAsSmeta ) )
      {
        BindEmbeddedInterface(scSpecif, oSpecifAsSmeta);
        BindEvent( OnSASEventAttrib, oSpecifAsSmeta.EventAttrib );
        BindEvent( OnSASEventUpdateVisibleInfo, oSpecifAsSmeta.EventUpdateVisibleInfo );
        BindEvent( OnSASEventCBDSensitiveModified, oSpecifAsSmeta.EventCBDSensitiveModified);
        BindEvent( OnSASEventChooseFromPrice, oSpecifAsSmeta.EventChooseFromPrice ); // Выбор из прайса, каталога МЦ/услуг
        BindEvent( OnSASEventAddNewMCUsl, oSpecifAsSmeta.EventAddNewMCUsl );

        RebuildSpecifTree( KatSopr.nRec, SpSopr.nRec );
      }
      else
      {
        Message('Ошибка загрузки интерфейса представления спецификации в виде иерархии.', Error );
        Abort;
        Exit;
      }
    }

    // Настройка видимости вкладок. Значения констант режимов отображения см. в SpecifAsSmeta.inc
    case wGetTune( 'UKS.Doc.AktVR.ViewSpec' ) of

      vsmHierarchy: // Режим иерархического предсталения спецификации. Остальные вкладки нужно спрятать.
      {
        SetTabbedSheetVisible(scSpecif, true); // Этот код нужен на случай переключения режимов без переоткрытия окна списка АВР

        SetTabbedSheetVisible(brSpecif110, false);
        SetTabbedSheetVisible(brSpecif1101, false);
        SetTabbedSheetVisible(brSpecif1102, false);

        SetFormat( scSpecif );
      }

      vsmHierarchyAndFlat: // Иерархия + плосское представление. Активная по умолчанию вкладка - иерархия.
      {
        SetTabbedSheetVisible(brSpecif1102, true); // Этот код нужен на случай переключения режимов без переоткрытия окна списка АВР
        SetTabbedSheetVisible(scSpecif, true); // Этот код нужен на случай переключения режимов без переоткрытия окна списка АВР

        if( wGetTune('Pick.SortUSL') = 0 ) // настройка "Сортировка услуг по"...
        {
          // ... наименованию
          SetTabbedSheetVisible(brSpecif1101, true); // Этот код нужен на случай переключения режимов без переоткрытия окна списка АВР
          SetTabbedSheetVisible(brSpecif110, false);
        }
        else
        {
          // ... номенклатурному номеру
          SetTabbedSheetVisible(brSpecif110, true); // Этот код нужен на случай переключения режимов без переоткрытия окна списка АВР
          SetTabbedSheetVisible(brSpecif1101, false);
        }

        SetFormat( scSpecif );
      }

      vsmFlat: // Только "плосское" представление спецификации. Присутствуют вкладки "работы" и "материалы". Активная вкладка "работы"
      {
        SetTabbedSheetVisible(brSpecif1102, true); // Этот код нужен на случай переключения режимов без переоткрытия окна списка АВР
        SetTabbedSheetVisible(scSpecif, false);

        if( wGetTune('Pick.SortUSL') = 0 ) // настройка "Сортировка услуг по"...
        {
          // ... наименованию
          SetTabbedSheetVisible(brSpecif1101, true); // Этот код нужен на случай переключения режимов без переоткрытия окна списка АВР
          SetTabbedSheetVisible(brSpecif110, false);
          SetFormat(brSpecif1101);
        }
        else
        {
          // ... номенклатурному номеру
          SetTabbedSheetVisible(brSpecif110, true); // Этот код нужен на случай переключения режимов без переоткрытия окна списка АВР
          SetTabbedSheetVisible(brSpecif1101, false);
          SetFormat(brSpecif110);
        }
      }

    else
      {
        var tuneName: string;
        if( ExistTune( 'UKS.Doc.AktVR.ViewSpec' ) )
          tuneName := GetTuneName( 'UKS.Doc.AktVR.ViewSpec' );
        else
          tuneName := 'Настройки\УКС\Документы\Акты выполненных работ\Способ отображения спецификации';

        Message('Проверьте настройку' + chr(13) +
          tuneName + chr(13) +
          'Допустимые значения: иерархия, плосское представление, иерархия+плосское представление.',
          Error );

        Abort;
        Exit;
      }
    end; // case wGetTune( 'UKS.Doc.AktVR.ViewSpec' )
  }
  else
  {
    // Спрятать поля и закладки, содержащие базовую цену и базовую стоимость позиций спецификации АВР
    SetFieldAndLabelVisible( #baseCost, false );
    SetFieldAndLabelVisible( #TblBaseCost.DopSum2, false );
    SetTabbedSheetVisible(scSpecif, false);
  }

  if (TypeSopr = 111)
  {
    if ((KatSopr.wADoc = cgCustomAkt) and (Pos(csSymbol_NalAkt, KatSopr.NSopr) = 1))
    {
      if ( NOT BoundActive(tbForGrNal2NAkt) )
        AddBounds(tbForGrNal2NAkt);

      if ( NOT BoundActive(tbForKlVal2NAkt) )
        AddBounds(tbForKlVal2NAkt);

      SetWindowTitle(EditSopr, 'Редактирование налогового акта регистрации ГТД');
      SetFormat(brSpecifNAkt);
    }
    else
    {
      if ( BoundActive(tbForGrNal2NAkt) )
        SubBounds(tbForGrNal2NAkt);

      if ( BoundActive(tbForKlVal2NAkt) )
        SubBounds(tbForKlVal2NAkt);

      if ((TypeSopr = 111) and
          (((wGetTune('Country') = ccBel) and (KatSopr.cNote = coGetTune('Nalog.Bel.GTD_Status'))) or
           ((wGetTune('Country') = ccUkr) and (KatSopr.cNote = coGetTune('Nalog.Ukr.GTD_Status')))))
        SetWindowTitle(EditSopr, 'Редактирование налогового акта регистрации ГТД');
      else
        SetWindowTitle(EditSopr, 'Редактирование акта на прием услуг');

      SetFormat(brSpecif1);
    }
  }
}

cmValue9:
  if (CurTable=#SpSopr)
  {
    if ( not OtkatToOldState(true, word(0)) )
      Exit;

    CopySpSopr;
    CheckSumma(true);
    procDocAutoCalcUsl;
  }

cmValue20:
{
  oCalcFuns.RunCostUslRep(SpSopr.NRec, coSpSopr, 0);
}

cmValue17:
{
  // Просмотр и изменение параметров расчетной услуги
  DoViewEcitCalcUsl();
}

cmChangeViewMode:
{
  if (UpdateTable)
  {
    iKB.SaveInfoforBal(KatSopr.VidSopr, KatSopr.NRec);
    RunInterface('iGetKauDK', SoprHoz.NRec, KatSopr.cOrg, KatSopr.cVal);
    iKB.ModiKontrBal(KatSopr.VidSopr, KatSopr.NRec);
  }
}

cmHotKeys:
{
  if (KatSopr.VidSopr = 110)
    DisableCommand(cmLegend);

  case CurTable of
    #KatSopr:
    {
      // Вызов контекстного меню
      var sDynMenu : string; sDynMenu  := '';
      var pExtParam: comp;   pExtParam := 0; //битовый параметр для доп. пунктов меню

      if (KatSopr.cOrgBase <> coGetTune('MyOrg') and KatSopr.TipSopr = 1 or CurFormatInArea(brSpecif1102) <> brSpecif1102)
        DisableCommand(cmDocBas);

      sDynMenu := oSoprMenu.MakeSoprEditMenu(KatSopr.Buffer, pExtParam);
      PutHotCommand(RunDynMenu(sDynMenu));
      EnableCommand(cmDocBas);
    }

    #SpSopr:
    {
      case KatSopr.VidSopr of
        114:
        {
          PutHotCommand(RunMenu('mnuSoprUslSpSoprPri'))
        }

        110:
        {
          SetCommandEnabled(cmAccording, Not ((KatSopr.cOrgBase <> coGetTune('MyOrg')) and (KatSopr.TipSopr = 1)));

          if ( CurFormatInArea(brSpecif1102) = brSpecif1102 ) // материалы
          {
            if ( KatSopr.cOrgBase <> coGetTune('MyOrg') and KatSopr.TipSopr = 1 )
            {
              DisableCommand(cmSaveDoc);
              //DisableCommand(cmRestoreDoc);
            }

            PutHotCommand(RunMenu('mnuSoprUslSpSoprPriUKS'));
            EnableCommand(cmSaveDoc);
            EnableCommand(cmRestoreDoc);
          }
          else // услуги
            if (CurFormatInArea(brSpecif1101) = brSpecif1101) OR
               (CurFormatInArea(brSpecif110)  = brSpecif110)
              PutHotCommand(RunMenu('mnuSoprUslSpSopr1BUKS'))
            else
              PutHotCommand(RunMenu('mnuSoprUslSpSopr1B'));
        }
        else
          PutHotCommand(RunMenu('mnuSoprUslSpSopr1B'));
      end;
    }
  end;
}

cmValue18 :
  ProcessCommand(cmValue18);

cmValue16 :
  ProcessCommand(cmValue16);

cmVrem:
  ProcessCommand(cmVrem);

cmAttrib:
{
  case CurTable of
    #KatSopr:
    {
      RunWindowModal(ExtendetInfo);
    }
    #SpSopr:
    {
      DoAttribSpSopr();
    }
  end;
}

cmMulSelDO: //Ctrl+I : Выбор из смет
{
  DoChooseFromSmet();
}

#ifdef __MTR_TO_SPEC__
cmIerarchy :
{
  if ( (CurTable = #SpSopr) and (IsValid(#SpSopr)) )
    {
      if ( TypeSopr = 110 )
      {
        RunInterface('EditMtr2Spec', if(not OtkatToOldState(false, word(0)), 1, if(KatSopr.cUKS <> 0, 3, if(IsValid(#SmetaStroy), 2, 4))) + 100, GetLinkMTRAutoPick(CurField), word(coSpSopr), SpSopr.nRec);

        isCBDSensitiveModified := true; // см. описание в объявлении переменной
        isRFPSensitiveModified := true; // см. описание в объявлении переменной
      }
      else
        RunInterface('EditMtr2Spec', if(not OtkatToOldState(false, word(0)), 1, if(KatSopr.cUKS <> 0, 3, if(IsValid(#SmetaStroy), 2, 0))) + 100, GetLinkMTRAutoPick(CurField), word(coSpSopr), SpSopr.nRec);

      SetModified(true);
      UpdateTable;
    }
}
#end

cmRestoreDoc:  // Ctrl+F3
{
  if (CurFormatInArea(brSpecif1102) <> brSpecif1102)
  {
    // Пункт локального меню "Выбор позиции из прайс-листа"
    DoChooseFromPrice();
  }
  else
  {
    if (KatSopr.cOrgBase = coGetTune('MyOrg') or KatSopr.TipSopr = 2)
    {
      #INCLUDE gteks.vpp
    }

    if (SpSopr.cMcUsl <> 0)
      CheckSumma(TRUE);
  }
}

cmRecalcFactAVR:
{
  // Пункт локального меню
  // "Пересчет фактических показателей по объекту строительства и локальной смете"
  RecalcFactPerfs( KatSopr.nRec );
}

cmXchangeMCSetup :
{
#ifdef _USE_SERIAL_
  oSerialMove.SetSerialForSopr(SpSopr.nRec, true);
#end
}

cmSaveDoc :
{
  if (NOT OtkatToOldState(TRUE, word(0)))
    Exit;

  if (CurFormatInArea(brSpecif1102) = brSpecif1102)
    if (KatSopr.cOrgBase = coGetTune('MyOrg') or KatSopr.TipSopr = 2)
      if (RunGtekOst)
      {
        // привязка объектов строительства и статей затрат
        if (UKS_Used)
        {
          var vcKatStroynRec, vcAddSumTunenRec: comp;

          Update Current SpSopr;

          if (not ReadMyDsk(vcKatStroynRec, 'GTekOst_KatStroy', FALSE))
            vcKatStroynRec := 0;

          oMTRFun.SaveKitKauForKit(vcKatStroynRec);
          oMTRFun.InsSpecMTR(coSpSopr, SpSopr.nRec);
        }

        // установка партии для позиций с тарой
        oSoprTara.SetPartyTara (SpSopr.cSopr, SpSopr.cOtpEd, SpSOpr.NRec, SpSopr.cParty);

        // пересчет сумм по документу
        if (MakeAveragePrice)
          CheckSumma(false);

        ReReadRecord(#SpSopr);
      }
}

cmSeeDopInfo:
{
  if (NOT OtkatToOldState(TRUE, word(0)))
    Exit;

  MakeKatSoprNal;
}

cmOpenSearch:
{
  // Нельзя редактировать цены спецификации в АВР, которые были импортированы из СТ-Смета и Гранд-Смета
  if ( (KatSopr.VidSopr <> 110) or (KatSopr.wADoc <> 0) )
    {
      Abort;
      Exit;
    }

  if ( not IsValid(#SpDocSmeta) )
    {
      Abort;
      Exit;
    }

  if ( (CurField = #Prv) and (SpDocSmeta.TipRes < 5) )
    {
      RunWindowModal(EditPriceSmet);

      oRaschAct.SchetPrice(KatSopr.nRec);

      ReReadRecord(#SpSopr);
      CheckSumma(TRUE);
      ReReadRecord(#SpSopr);
    }
}

cmManagerId:
{
  if (CurTable = #KatSopr)
    SetDescriptor;
}
cmRashBud: {
     RunInterface('F_NalogReg::NalogRegDoc_STN', cgiNo, 1058, 0, KatSopr.nRec);
}

cmValue2:
{
  if (IsNew)
  {
    Insert Current KatSopr;
    SetNew(FALSE);

    iGrPl.InsSpGrPlD_Default(KatSopr.VidSopr,  // тип документа системный
                             KatSopr.NRec,     //ссылка на документ
                             KatSopr.cOrg      //ссылка на контрагента
                            );
   }

   Update_Current_KatSopr;

   do_Batch_Button (TypeSopr, KatSopr.NRec, KatSopr.dSopr);

   RereadRecord(#KatSopr);
}

cmExtendetInfo:
{
  RunWindowModal(ExtendetInfo);
}

cmShowUKSPrice:
{
  RunInterface(ShowUksSoprPrice, KatSopr.NRec);
}

cmValue21:
{
  VidReport := 1;
  putCommand(cmPrintDoc);
}

cmPrintDoc:
{
  if (TypeSopr = 110)
  {
    var b : boolean;
    var c, c1 : comp;
    b := BoundActive(tbForUKSMC);

    PushPos(#SpSopr);

    if (b)
    {
      c  := SpSopr.NRec;
      c1 := KatSopr.NRec;

      SubBounds(tbForUKSMC);
      AddBounds(tbForUKSUsl);
    }

    if (NOT BoundActive(tbForUKSUsl))
      AddBounds(tbForUKSUsl);

    var VidKS : word;
    VidKS := 0;

    UpdateTable;

    if (RunDialog('GetVidKS', VidKS) <> cmCancel)
      case VidKS of
        0:
        {
          if ( RunInterface('FormaKS3', KatSopr.NRec, 0) = cmDefault )
          {
            var wFormKS, wSmet: word;

            if (not ReadMyDsk(wFormKS, 'KS_3_wFormKS', FALSE))
              wFormKS := 0;

            if (not ReadMyDsk(wSmet, 'KS_3_wType', FALSE))
              wSmet := 0;

            // КС-2 с группировкой по объектам строительства
            if ((wSmet AND 1) = 0)
              if (wFormKS = 0)
                RunInterface('PrintAkt100', KatSopr.NRec, if (CurWindow = wnMainWindow, MarkerNZ, 0), word(0));
              else
                if (wFormKS = 2)
                  Runinterface('Print_KS_With_KAU3', KatSopr.NRec, MarkerNZ, 0)

          }
        }
        1:
        {
          PrintAktPIW;
        }
        2:
        {
          RunInterface(Print_M29, KatSopr.NRec, MarkerNZ, 0);
        }
      end;

    if (b)
    {
      SubBounds(tbForUKSUsl);
      AddBounds(tbForUKSMC);

      if (GetFirst KatSopr where ((c1 == KatSopr.NRec)) = tsOk) {};
      if (GetFirst SpSopr where ((c == SpSopr.NRec)) = tsOk) {};

      RereadRecord(#SpSopr);
    }

    PopPos(#SpSopr);
  }
  else
    PrintDocument;
}

cmValue6:
{
  if (NOT OtkatToOldState(TRUE, word(0)))
    Exit;

  PickcBuilding;
}

cmValue10:
{
  if (NOT OtkatToOldState(TRUE, word(0)))
    Exit;

  PickcZatr;
}

cmValue60:
{
  RunInterface('ShowSpesHowSmeta', KatSopr.NRec, word(coKatSopr));
}

cmVal8: // обработчик пункта локального меню "Разноска Объектов целевого учета по спецификации"
{
  if (NOT OtkatToOldState(TRUE, word(0)))
    Exit;

  if (NOT UpdateTable)
  {
    Abort;
    Exit;
  }

  if (CurTable <> #KatSopr)
    SelectPanel(#KatSopr);

  RunInterface('GetSpDocsMTR', word(coKatSopr), KatSopr.NRec);

  RereadRecord(#SpSopr);

  isCBDSensitiveModified := true; // см. описание в объявлении переменной
  isRFPSensitiveModified := true; // см. описание в объявлении переменной
}

cmDocBas:
{
  if ( not OtkatToOldState(true, word(0)) )
    Exit;

  if (KatSopr.cOrgBase <> coGetTune('MyOrg') and KatSopr.TipSopr = 1 or CurFormatInArea(brSpecif1102) <> brSpecif1102)
    Exit;

  if ( Message('Рассчитать средние цены для всего документа?', YesNo) = cmYes )
    {
      CalcSrPrice;
      oRaschAct.SchetPrice(KatSopr.nRec);
      ReReadRecord(#SpSopr);
      CheckSumma(TRUE);
      ReReadRecord(#SpSopr);
    }
}

cmVal7: // Редактирование сметных коэффициентов акта выполненных работ
{
  RunInterface('SmetKoeffForAct', KatSopr.NRec, if(NOT OtkatToOldState(TRUE, word(0)), 1, 0));
  oRaschAct.SchetPrice(KatSopr.nRec);
  ReReadRecord(#SpSopr);
  CheckSumma(TRUE);
  ReReadRecord(#SpSopr);
  RebuildSpecifTree( KatSopr.nRec, SpSopr.nRec ); // обновить данные в дереве спецификации
}

cmValFld16:
{
  Update_Current_KatSopr;

  RunInterface('MakeAkt110', KatSopr.NRec);

  ReReadRecord(#SpSopr);
  CheckSumma(TRUE);
  ReReadRecord(#SpSopr);
}

cmValFld7: // Обновление сметных коэффициентов акта выполненных работ из смет
{
  var vbRes : boolean;
  vbRes := (GetFirst Koeff4Act where ((KatSopr.nRec == Koeff4Act.cDoc)) = tsOk);

  if (vbRes)
    vbRes := (Message('Для акта есть сметные коэффициенты.' + chr(13) +
                      'При обновлении не вставятся коэффициенты' + chr(13) +
                      '"Сметная прибыль" и "Нормативные расходы"' + chr(13) + chr(13) +
                      'Обновить?', Confirmation + YesNo) = cmYes)
  else
    vbRes := TRUE;

  if (vbRes)
  {
    StartNewVisual(vtRotateVisual, vfTimer, 'Вставка сметных коэффициентов', 1);

    _Loop Koeff4Act where ((KatSopr.nRec == Koeff4Act.cDoc))
      if (GetFirst SpSopr where ((Koeff4Act.cMCUsl == SpSopr.nRec)) = tsOk)
        oSDfuns.SpSopr_Delete(Koeff4Act.cMCUsl);

    Delete all Koeff4Act where (( KatSopr.nRec == Koeff4Act.cDoc ));

    PushPos(#SpSopr);
    ReSetBounds(#SpSopr);
    _Loop SpSopr where ((KatSopr.nRec == SpSopr.cSopr))
      RunInterface('CopyKoeffToAct', SpSopr.nRec, word(1));

    SetBounds(#SpSopr);
    PopPos(#SpSopr);
    ReReadRecord(#SpSopr);
    oRaschAct.SchetPrice(KatSopr.nRec);
    CheckSumma(TRUE);
    RebuildSpecifTree( KatSopr.nRec, SpSopr.nRec ); // обновить данные в дереве спецификации
    StopVisual('',0);
  }
}

cmPickClass:
{
  if (UpdateTable)
    case CurTable of
      #KatSopr:
      {
        if (KatSopr.NRec <> 0)
        {
          SaveMyDsk((not OtkatToOldState(FALSE, word(0))), '_CanEditClassifier_');
          RunInterface(ExClassifier, word(CurTableCode), KatSopr.NRec);
        }
      }
      #SpSopr:
      {
        if (SpSopr.NRec <> 0)
        {
          SaveMyDsk((not OtkatToOldState(FALSE, word(0))), '_CanEditClassifier_');
          RunInterface(ExClassifier, word(CurTableCode), SpSopr.NRec);
        }
      }
    end;
}

cmPickAttr:
{
  if (UpdateTable)
    case CurTable of
      #KatSopr:
      {
        if (KatSopr.NRec <> 0)
        {
          SaveMyDsk((not OtkatToOldState(FALSE, word(0))), '_CanEditAttribute_');
          RunInterface(Attribute, word(CurTableCode), KatSopr.NRec);
        }
      }
      #SpSopr:
      {
        if (SpSopr.NRec <> 0)
        {
          SaveMyDsk((not OtkatToOldState(FALSE, word(0))), '_CanEditAttribute_');
          RunInterface(Attribute, word(CurTableCode), SpSopr.NRec);
        }
      }
    end;
}

cmExClassRepl:
{
  if (UpdateTable)
    case curtable of
      #KatSopr:
      {
        if ( KatSopr.Nrec <> 0 )
          RunInterface('ExClassRepl', word(CurTableCode), word(0), KatSopr.nRec, MarkerNZ);
      }
    end;
}

cmShowAll:
{
  RunInterface('GSaldDat'
             , KatSopr.dSopr
             , word(0)
             , SpSopr.cMCUSL
             , if(KatSopr.VidSopr = 110, KatSopr.cPodrTo, KatSopr.cPodrFrom)
             , if(KatSopr.VidSopr = 110, KatSopr.cMOLTo , KatSopr.cMOLFrom)
             , SpSopr.cParty
             , SpSopr.cOtpEd
              );
}

cmNal:
{
  RunInterface('GetSaldoMC', SkPr, KatSopr.dSopr, SpSopr.cMCUSL, 0, 0, 0);
}

cmAccording:
{
  if (CurFormatInArea(brSpecif1102) = brSpecif1102)
    if (UpdateTable)
    {
      RunInterface(ShowOrderForSopr, KatSopr.NRec);
      RereadRecord(#KatSopr);
    }
}

cmVal3:
{
  RunWindowModal(ReestrWin);
}

cmInit:
{
  //пир 102.29165
  if (KatSopr.cKatSopr <> 0)
    if (GetFirst KSSopr <> tsOk)
      set KatSopr.cKatSopr := 0;

  SetEditOption;

  isEditSoprVisible := TRUE;

  if (NOT UKS_Used)
  {
    SetColumnTitle(brSpecif,  #Prv,      ''#3'Цена');
    SetColumnTitle(brSpecif1, #Prv,      ''#3'Цена');
    SetColumnTitle(brSpecif,  #SumPrice, ''#3'Стоимость');
    SetColumnTitle(brSpecif1, #SumPrice, ''#3'Стоимость');
  }

  if ( Lic_ItemExists('CEL_UCH') )
    BindEmbeddedInterface(scKauEdit, oLinkMtr2Spec);
  else
    SetTabbedSheetVisible(scKauEdit, false);

  if ( (not Lic_ItemExists('CEL_UCH')) or (not boGetTune('Oper.CelUch.ShowKAU')) )
    {
      SetFieldVisible(#SaldTune.Name, false);
      SetFieldVisible(#vsKau1, false);
      SetFieldVisible(#vsKau2, false);
      SetFieldVisible(#vsKau3, false);
      SetFieldVisible(#vsKau4, false);
      SetFieldVisible(#vsKau5, false);
      SetFieldVisible(#vsKau6, false);
      SetFieldVisible(#vsKau7, false);
      SetFieldVisible(#vsKau8, false);
      SetFieldVisible(#vsKau9, false);
      SetFieldVisible(#vsKau10, false);
    }

  if ( not Lic_ItemExists('SmetaDocs') )
    {
      ClearFieldState(#SmetaMy,    sfVisible);
      ClearFieldState(#SmetaSpMy,  sfVisible);
      ClearFieldState(#SmetaResMy, sfVisible);
      DisableCommand(cmMulSelDO);
    }

  if ( DopEd_Used2(TypeSopr) )
    {
      SetHelpAndStatusContext(brSpecif3,      #SpSopr.KolFact, sci1378Esc, 'SoprDocFKolFact');
      SetHelpAndStatusContext(scrSpecifInfo2, #SpSopr.KolFact, sci1378Esc, 'SoprDocFKolFact');
    }

#ifdef __MTR_TO_SPEC__
  Var wKauCount, i1: word;
  Var fKau         : array [1..10] of longint;

  if ( TypeSopr = 110 )
    if ( oLinkMTR2Spec.InitKauU(0, true, wKauCount) )
      {
        fKau[1]  := #vsKau1;
        fKau[2]  := #vsKau2;
        fKau[3]  := #vsKau3;
        fKau[4]  := #vsKau4;
        fKau[5]  := #vsKau5;
        fKau[6]  := #vsKau6;
        fKau[7]  := #vsKau7;
        fKau[8]  := #vsKau8;
        fKau[9]  := #vsKau9;
        fKau[10] := #vsKau10;

        for ( i1 := 1; i1 <= wKauCount; i1 := i1 + 1 )
          {
            SetColumnTitle(brSpecif110 , fKau[i1], ''#3 + oLinkMTR2Spec.GetRole(i1));
            SetColumnTitle(brSpecif1101, fKau[i1], ''#3 + oLinkMTR2Spec.GetRole(i1));
            SetColumnTitle(brSpecif1102, fKau[i1], ''#3 + oLinkMTR2Spec.GetRole(i1));
          }

        for ( i1 := wKauCount + 1; i1 <= 10; i1 := i1 + 1 )
          ClearFieldState(fKau[i1], sfVisible);

        //ClearFieldOption(#SaldTune.Name, ofSelectable);
      }
#end
}

cmDone:
{
  FreeVipInterface( oSpecifAsSmeta );

  isEditSoprVisible := FALSE;

  oUKSfuns.JoinAkt(KatSopr.NRec, KatSopr.VidSopr);

  // Пересчитать фактические показатели по объектам строительства и локальным сметам для АВР, если это
  // необходимо.
  if( IsNeedRecalcFactPerfs( KatSopr.Nrec ) )
    RecalcFactPerfs( KatSopr.Nrec );
  ResetRecalcFactPerfsFlags(); // сбросить флаги о необходимости пересчета

  // если были модифицированы поля, чувствительные для процедур контроля сроков строительства
  // - выполнить такой контроль (выполняется только для актов выполненных работ)
  if( TypeSopr = 110 and isCBDSensitiveModified )
  {
    // oUKSfuns.JoinAkt(KatSopr.NRec, KatSopr.VidSopr); - предшествующий вызов такой ф-ции или аналогичной необходим, т.к.
    // т.к. iChkBuildDates использует DocSchem и SpSchem для работы,
    // а JoinAkt заполняет указанные таблицы актуальными данными (в частности, дата выписки АВР)

    // проверка и установка дат объектов строительства, ссылающихся на данный акт
    oChkBuildDates.CheckBuildingDatesByAkt( KatSopr.NRec );

    isCBDSensitiveModified := false; // см. описание в объявлении переменной
  }
}

cmChangeTabbedSheetFormat:
{
  if( Target = brSpecif1102 ) // материалы
  {
    UslOrMC := TRUE;
    TMCUSL  := 1;

    SetSpSoprBoundsByPrMc( 1 ); // Установить в спецификации фильтр на МЦ
  }
  else if( Target = brSpecif1101 or Target = brSpecif110 )// услуги
  {
    UslOrMC := FALSE;
    TMCUSL  := 2;

    SetSpSoprBoundsByPrMc( 2 ); // Установить в спецификации фильтр на услуги
  }
  else if( Target = scSpecif ) // Спецификация
  {
    if( not NullVipRef( oSpecifAsSmeta ) )
    {
      SetSpSoprBoundsByPrMc( 0 ); // снять все ограничения на SpSopr
      // Установить в дереве указатель на соответствующую позицию спецификации
      SetSpecifPositionInTree( KatSopr.nRec, SpSopr.nRec);
    }
  }

  RereadRecord(#SpSopr);

  if (NOT IsValid(#SpSopr))
    SpSopr.PrMc := TMCUSL;
}

cmValue15:
{
  if (IsValid(#KatSopr))
    DelKatSoprDopr;
}

cmMakePrih:
{
  if (TypeSopr = 110)
  {
    if (NOT OtkatToOldState(TRUE, word(0)))
      Exit;

    MakeNotNewKatSopr;

   #ifdef _CheckKon_VIH_
    if ( NullVipRef(oCheckKon) )
      GetVipRef(oCheckKon, 'KatOrg');

    if (NOT oCheckKon.CheckDolgKon(if (KatSopr.cOrg <> 0, KatSopr.cOrg, KatSopr.cOrgBase),
                                   KatSopr.dsopr,
                                   if (KatSopr.cVal = 0, KatSopr.Summa, KatSopr.SumVal),
                                   KatSopr.cVal))
   #else
    if (NOT CheckDolgKon(if (KatSopr.cOrg <> 0, KatSopr.cOrg, KatSopr.cOrgBase),
                         KatSopr.dsopr,
                         if (KatSopr.cVal = 0, KatSopr.Summa, KatSopr.SumVal),
                         KatSopr.cVal))
   #end
    {
      Exit;
    }

    case wGetTune('Doc.Sell.AutoRasp') of

      1:
        {
          RunInterface('RemakeSpSoprOnTeksaldo', KatSopr.nRec, 1 + 2 + 4 + if(KatSopr.VidSopr = 110, 8, 0));
          CheckSumma(true);
        }
      2:
        {
          RunInterface('RemakeSpSoprOnTeksaldo', KatSopr.nRec, 4 + if(KatSopr.VidSopr = 110, 8, 0));
          CheckSumma(true);
        }

    end;

    MakeRashOrd(TRUE, 0);

    // Вставка ордера в схему связей документов капстроя
    if (GetFirst SklOrder where ((KatSopr.NRec == SklOrder.cSopr)) = tsOk)
      if ( UpdateTable )
        oUKSfuns.JoinAkt(KatSopr.NRec, KatSopr.VidSopr);
  }
}

cmMakeOrder:
{
  DoMakeDooc;
}

cmValue30:
  DeleteDooc;

cmValue31:
  SetEditOption2;

#include lnkdocks.vpp

cmValue5:
{
  if (NOT OtkatToOldState(TRUE, word(0)))
    Exit;

  AssingPrlPrices1;

  if (katSopr.VidSopr = 110)
  {
    oRaschAct.SchetPrice(KatSopr.nRec);
    ReReadRecord(#SpSopr);
    CheckSumma(TRUE);
    ReReadRecord(#SpSopr);
  }
}

cmValue38:
{
  if (NOT OtkatToOldState(TRUE, word(0)))
    Exit;

  RunInterface('GetMCSoprSinhr', KatSopr.nRec, KatSopr.cStepDoc);
  ReReadRecord(#KatSopr);
  ReReadRecord(#SpSopr);
}

cmAlt2:
{
  if ( not OtkatToOldState(true, word(0)) )
    Exit;

  Update_Current_KatSopr;

  if ( CurTable = #KatSopr )
    RunInterface('RemakeSpSoprOnTeksaldo', KatSopr.nRec, 4 + if(KatSopr.VidSopr = 110, 8, 0));

  CheckSumma(true);
  RereadRecord(#KatSopr);
}
#ifdef __DSD__
cmEdit:
  case CurField of
    #KatMC.Name
  , #KatMC.BarKod
  , #KatUsl.Name
  , #KatUsl.Kod:  RunInterface(iViewMCUslCatal,   SpSopr.PrMC,   SpSopr.cMcUsl, 0, coSpSopr, SpSopr.NRec);
  end;
#end
end; // HandleEvent
end; // Window


//******************************************************************************

Panel panSelect Table KatSopr
Browse brSelectNakl ('<Enter> - редактирование, <Ctrl><P> - печать',hcAktUslbVMain,sci178InsPM)
Fields {Font = {Color = if (Picked = '√', ColorMark, 0)}};
  picked            #13#3'V'                 : [ 1], Skip, NoAutoSize, Centered;
  ''+KatNotesName   #3'Статус'               : [14], skip, NoAutoSize, Centered;
  KatSopr.dSopr     #3'Дата'#13#3'выписки'   : [10, 'DD/MM/YYYY'], Protect, NoAutoSize, Centered;
  KatSopr.DesGr     #3'Группа'               : [ 5], Protect, NoAutoSize, Centered;
  KatSopr.Descr     #3'Дескр.'               : [ 6], Protect, NoAutoSize, Centered;
  KatSopr.NSopr     #3'Номер'#13#3'документа': [10], Protect, NoAutoSize;
  ''+KatOrg.Name    #3'Контрагент'           : [28], Protect;
  Sum               #3'Сумма'                : [17], [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect, LessNull, NoAutoSize;
  ''+Valut          #3'Вал.'                 : [ 3], Skip, NoAutoSize, Centered, { Font = { Italic = TRUE } };
  PrSF              #3'С'#13#3'Ф'            : [ 1], Skip, NoAutoSize, Centered, {Font = {Bold = (PrSF = '+')}};
  if(isValid(#SklOrderDooc),'+','')   #3'Д', ('Наличие ордеров дооценки по акту. Для редактирования акта нажмите <ENTER>',,sci178InsPM):[1],protect,
     {Font = {Color = if (Picked = '√',ColorMark,0)}}; // LF_
  if (IsValid(#Oborot), '+', '')
                    #3'П'                    : [ 1], skip, NoAutoSize, Centered;
end; // Browse

Browse brSelectAkt ('<Enter> - редактирование, <Ctrl><P> - печать',hcAktUslbVMain,sci178InsPM)
Fields
  { Font = {
    Color = if(Picked = '√', ColorMark, if( not oKatSoprFunc.IsAvrFlagSet( KatSopr.Buffer, bfCalcFactUsed ), ColorSysMaroon, 0))
    Italic = not oKatSoprFunc.IsAvrFlagSet( KatSopr.Buffer, bfCalcFactUsed )
    }
  };
  picked            #13#3'V'                 : [ 1], Skip, NoAutoSize, Centered;
  ''+KatNotesName   #3'Статус'               : [14], skip, NoAutoSize, Centered;
  fsDirect          #3'<->'                  : [3], Skip, NoAutoSize, Centered, { Font = {Bold = TRUE; Color = ColorSysRed; Italic = TRUE }};
  KatSopr.dSopr     #3'Дата'#13#3'выписки'   : [10, 'DD/MM/YYYY'], Protect, NoAutoSize, Centered;
  KatSopr.DesGr     #3'Группа'               : [ 5], Protect, NoAutoSize, Centered;
  KatSopr.Descr     #3'Дескр.'               : [ 6], Protect, NoAutoSize, Centered;
  KatSopr.NSopr     #3'Номер'#13#3'документа': [10], Protect, NoAutoSize;
  ''+KatStroy.Name  #3'Объект'#13#3'строительства': [22], Protect;
  ''+KatOrg.Name    #3'Контрагент'           : [28], Protect;
  Sum               #3'Сумма'                : [17], [brForSopr_RVPrice, '\2p[|-]36`666`666`666`666.88'], Protect, LessNull, NoAutoSize;
  ''+Valut          #3'Вал.'                 : [ 3], Skip, NoAutoSize, Centered, { Font = { Italic = TRUE } };
  PrSF              #3'С'#13#3'Ф'            : [ 1], Skip, NoAutoSize, Centered, {Font = {Bold = (PrSF = '+')}};
  if(isValid(#SklOrderDooc),'+','')   #3'О', ('Наличие складских ордеров по акту. Для редактирования акта нажмите <ENTER>',,sci178InsPM):[1],protect,
     {Font = {Color = if (Picked = '√',ColorMark,0)}}; // LF_
  if (IsValid(#Oborot), '+', '')
                    #3'П'                    : [ 1], skip, NoAutoSize, Centered;
end; // Browse
//******************************************************************************
HandleEvent

#include soprc13.vpp

cmPositionChanged:
{
  if (isEditSoprVisible)
    SetEditOption;
}

cmPositionChanged:
{
  SaveMyDsk(comp(0), '_KatSoprnRec_');

  SetRoundFormat(TypeSopr);//-- классы точности

   if oSDfuns.boNoEditCena(TypeSopr, coKatSopr)
  {
    //По настройке нельзя менять вручную цену
    ClearFieldOption(#PrV,           ofSelectable);
    ClearFieldOption(#SumPrice,      ofSelectable);
    ClearFieldOption(#SpSopr.rPrice, ofSelectable);
    ClearFieldOption(#SpSopr.rVPrice,ofSelectable);
    ClearFieldOption(#KlVal.Simvolv, ofSelectable);
  }

  if (TypeSopr = 110)
  {
    // Пересчитать фактические показатели по объектам строительства и локальным сметам для АВР, если это
    // необходимо. Проверку осущ. для документа, с которого ушли.
    if( IsNeedRecalcFactPerfs( saveKatSoprNrec ) )
      RecalcFactPerfs( saveKatSoprNrec );

    ResetRecalcFactPerfsFlags(); // сбросить флаги о необходимости пересчета

    if( isCBDSensitiveModified )
    {
      // данный вызов необходим, т.к. iChkBuildDates использует DocSchem и SpSchem
      // для работы, а JoinAkt заполняет указанные таблицы актуальными данными (в частности, дата выписки АВР)
      oUKSfuns.JoinAkt( saveKatSoprNrec, 110 );

      oChkBuildDates.CheckBuildingDatesByAkt( saveKatSoprNrec );

      isCBDSensitiveModified := false;
    }

    saveKatSoprNrec := KatSopr.nRec; // запомнить текущее значение nrec, чтобы использовать его при следующем cmPositionChanged

/* ovk: не уверен, что этот код здесь нужен.
    if (wGetTune('Pick.SortUSL') = 0)
    {
      //SetFormat(brSpecif1101);
      SetTabbedSheetVisible(brSpecif110, FALSE);
    }
    else
    {
      //SetFormat(brSpecif110);
      SetTabbedSheetVisible(brSpecif1101, FALSE);
    }

    SubBounds(tbForUKSMC);
    SubBounds(tbForUKSUsl);
    AddBounds(tbForUKSUsl);

    UslOrMC := FALSE;
*/
    // Установка видимости полей "подразделение",  "МОЛ", "Склад", др. элементов управления
    // для АВР подрядчика/заказчика  при перемещении по списку АВР ( например по PgUp, PgDn ).
    if ( TypeSopr = 110 )
      SetFieldSklad(scrHeader110);

    RereadRecord(#SpSopr);

    // построить иерархическое дерево спецификации АВР для нового АВР
    RebuildSpecifTree( KatSopr.nRec, SpSopr.nRec );

    SetCurrPriceCalcMethodFieldVisibility();
  }

  if (TypeSopr = 111)
  {
    SetFormat(brSpecif1);

    if ((KatSopr.wADoc = cgCustomAkt) and (Pos(csSymbol_NalAkt, KatSopr.NSopr) = 1))
    {
      if ( NOT BoundActive(tbForGrNal2NAkt) )
        AddBounds(tbForGrNal2NAkt);

      if ( NOT BoundActive(tbForKlVal2NAkt) )
        AddBounds(tbForKlVal2NAkt);

      ClearFieldState(#FormRas        ,        sfVisible);
      ClearFieldState(#KatPayment.Name,        sfVisible);

      SetWindowTitle(EditSopr, 'Редактирование налогового акта регистрации ГТД');
      SetFormat(brSpecifNAkt);
    }
    else
    {
      if ( BoundActive(tbForGrNal2NAkt) )
        SubBounds(tbForGrNal2NAkt);

      if ( BoundActive(tbForKlVal2NAkt) )
        SubBounds(tbForKlVal2NAkt);

      SetFieldState(#FormRas        ,        sfVisible);
      SetFieldState(#KatPayment.Name,        sfVisible);

      if ((TypeSopr = 111) and
          (((wGetTune('Country') = ccBel) and (KatSopr.cNote = coGetTune('Nalog.Bel.GTD_Status'))) or
           ((wGetTune('Country') = ccUkr) and (KatSopr.cNote = coGetTune('Nalog.Ukr.GTD_Status')))))
        SetWindowTitle(EditSopr, 'Редактирование налогового акта регистрации ГТД');
      else
        SetWindowTitle(EditSopr, 'Редактирование акта на прием услуг');

      SetFormat(brSpecif1);
    }
  }
}

cmMarkUnMark:
{
  if (SearchMarker(MarkerNZ, KatSopr.NRec, IndexNZ))
  {
    DeleteMarker(MarkerNZ, KatSopr.NRec);

    RedrawCurrentAndGo(GetCurrentFormat, TRUE);
  }
  else
  {
    InsertMarker(MarkerNZ, KatSopr.NRec);

    RedrawCurrentAndGo (GetCurrentFormat,TRUE);
  }
}
cmSelectAll:
{
  PushPos(#KatSopr);
  ClearMarker(MarkerNZ);

  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm, 'Помечаю документы: ', 1);

  _LOOP KatSopr
    if (NOT NextVisual)
      Break;
    else
      if (NOT SearchMarker (MarkerNZ, KatSopr.NRec, IndexNZ))
        InsertMarker(MarkerNZ, KatSopr.NRec);

  PopPos(#KatSopr);
  RescanPanel(#KatSopr);
  StopVisual('',0);
}

cmUnselectAll:
{
  ClearMarker(MarkerNZ);
  RescanPanel(#KatSopr);
}

cmSetDefault:
{
  if (_KatSoprNrec <> 0)
  {
    var wDateInp: word;
    if (ReadMyDsk(wDateInp,'SoprDocB_Date_Inp', FALSE))
      if (wDateInp = 1)
      {
        KatSopr.dSopr    := Date(0,0,0);
        KatSopr.YearSopr := 0;
      }

      if (boGetTune('Oper.Buy.Nakl.DogFromNakl'))
      {
        KatSopr.cDogovor    := KKSopr.cDogovor;
        KatSopr.cAppDogovor := KKSopr.cAppDogovor;
        KatSopr.cCalPlan    := KKSopr.cCalPlan;
      }

      KatSopr.cGruzTo     := KKSopr.cGruzTo;
      KatSopr.cVal        := KKSopr.cVal;
      KatSopr.cKatSopr    := KKSopr.NRec;
      KatSopr.dPrice      := KKSopr.dPrice;
      KatSopr.cValut      := KKSopr.cValut;
      KatSopr.DesGr       := KKSopr.DesGr;
      KatSopr.VidSopr     := TypeSopr;
      KatSopr.YearSopr    := Year(Cur_Date);
      KatSopr.VhodNal     := KKSopr.VhodNal;
      KatSopr.Reserved    := 0;
      KatSopr.dOpr        := KatSopr.dSopr;
  }

  SetEditOption;
}

cmDefault:
{
  PutCommand(cmEditSopr);
}

cmEditSopr:
{
  if ( TypeSopr = 110 )
    RunWindowModal(EditSopr);
  else
    RunWindow(EditSopr);
}
end; // HandleEvent
end; // Panel

//******************************************************************************
HandleEvent

#include soprc13.vpp

cmInit:
{
  var sAttrrGTD : String;

  VidReport := 0;

  #include ModifSalInit.vpp // для корректной работы объекта ModifSal.vih
  if (TypeSopr = 0)
    TypeSopr := 111;

  if (DemoMode)
  {
    var pRecChecker : RecChecker;

    if (NOT pRecChecker.CheckKatSoprRecords(typeSopr))
    {
      Abort;
      Exit;
    }
  }

  isEditSoprVisible := FALSE;

  SaveMyDsk(comp(0), '_KatSoprnRec_');

  MarkerNZ := InitMarker('KatSopr', 8, 100, 10, FALSE);
  ClearMarker(MarkerNZ);

  SetRoundFormat(TypeSopr);//-- классы точности
  TMCUSL := 2;
#include soprdes3.vpp

  if (TypeSopr = 110)
  {
    if (NOT UKS_Used)
    {
      Message('В вашей поставке отсутствует лицензия на модуль "Управление строительством"' + chr(13) + chr(13) +
              'или запрещено с ним работать в настройке' + chr(13) + chr(13) +
              GetTuneName('User.UKS'), Information);
      Abort;
      Exit;
    }

    SetTitle('Акты выполненных работ');
    DisableCommand(cmMakeOrder);
    DisableCommand(cmValue30);
    SetFormat(brSelectAkt);
  }
  else
  {
    SetTabbedSheetVisible(brSpecif110,  FALSE);
    SetTabbedSheetVisible(brSpecif1101, FALSE);
    SetTabbedSheetVisible(brSpecif1102, FALSE);
    SetTabbedSheetVisible(scSpecif, FALSE);
  }

  SetFormat(if (wGetTune('Pick.SortUSL') = 0, brSpecif1, brSpecif));
  s_SimvRub := sGetTune('NDE.SimvRub');

  SavedDoc := 0;
  InitNalServ;

  //формирование услуг из накладных
  if (_KatSoprNrec <> 0)
    PushBounds(tbFromNakl);

  if ( TypeSopr = 111 )
    SetHelpAndStatusContext(scLongName, -1, sci1Esc, 'ZakupWActUslEditSpec');

  if (TypeSopr = 114)
  {
    TMCUSL := 1;
    SetTitle('Акты приемки');

#ifdef Atl52
    SetHelpAndStatusContext(brSelectNakl, -1, sci178InsPM, 'SellWActPriemSpis')
#else
    SetHelpAndStatusContext(brSelectNakl, -1, sci178InsPM, hcSellWActPriemSpis)
#end
  }

  //автоматическое создание новой записи из интерфейса выбора GetSomeKatSopr
  if (pNrec = -1)
  {
    if (IsValid (#KatSopr))
      PutCommand(cmInsert);
  }

  sTypeDoc := 'AktUslB';
  SaveMyDSK(TRUE, '_InitKatSopr_' + sTypeDoc);

  if ( NOT ReadMyDSK(bFilterNakl, 'Filter_Nakl_bFilterNakl_' + sTypeDoc, TRUE) )
    bFilterNakl := FALSE;

  if ( NOT ReadMyDSK(wFilterDate, 'Filter_What_Date_' + sTypeDoc, TRUE) )
    wFilterDate := 0;

  if (bFilterNakl OR wFilterDate <> 0)
    if (pNRec = comp(0))
      if (_KatSoprNrec = comp(0))
        ProcessCommand(cmCallFilter);

  SaveMyDSK(FALSE, '_InitKatSopr_' + sTypeDoc);
/*
  var _str: string;

  RunInterface('iCheckTitleKatSopr', KatSopr.VidSopr, isFilter, BEGdate, ENDdate,_str);

  if (_str <> '')
    SetTitle(_str);
*/

  if ( wGetTune('COUNTRY') = 2 )
  {
    cfsSetCurrentContainer('brSelectNakl');
    var n: string;
    n := chr(3)+ 'Н' + Chr(13) + Chr(3)+ 'Н';
    cfsSetProp('c_BRSELECTNAKL_PRSF_С_Ф', 'Title', n);
  }

  // Атрибут "Дата оплаты и номер документа" для печати регистрации ГТД
  if ((TypeSopr = 111) and (wGetTune('Country') = ccBel))
  {
    sAttrrGTD := sGetTune('Nalog.Bel.Attr_GTDPlat');

    if (sAttrrGTD <> '')
      piExtAttr.CreateAttr(coKatSopr, sAttrrGTD, cgAttrType_Str);
  }

  isCBDSensitiveModified := false; // см. описание в объявление переменной
  ResetRecalcFactPerfsFlags(); // сбросить флаги о необходимости пересчета фактических показателей
}//cmInit

cmDone:
{
  SaveMyDsk(comp(0), '_KatSoprnRec_');
  DoneNalServ;
  DoneMarker(MarkerNZ, 'KatSopr');
  #include ModifSalDone.vpp // для корректной работы объекта ModifSal.vih
}

cmValue5:
{
  if (NOT OtkatToOldState(TRUE, word(0)))
    Exit;
  else
    AssingPrlPrices1;

  if (KatSopr.VidSopr = 110)
  {
    oRaschAct.SchetPrice(KatSopr.nRec);
    ReReadRecord(#SpSopr);
    CheckSumma(TRUE);
    ReReadRecord(#SpSopr);
  }
}

cmVal3:
{
  RunWindowModal(ReestrWin);
}

#include sopint.vpp
#include FltInDoc.vpp //фильтры по документу

cmValFld3:
{
  var SD  : SoprDocObj;
  var SDB : SoprDocBObj;

  case KKSopr.VidSopr of
    201, 521:
    {
      if ( GetVipRef(SD , 'SoprDoc' ) )
        SD.AktSopUslForm(KKSopr.NRec, FALSE);
    }
    101, 108, 522, 523:
    {
      if ( GetVipRef(SDB, 'SoprDocB') )
        SDB.AktSopUslForm(KKSopr.NRec, FALSE);
    }
  end;

  RereadRecord(#KatSopr);
}

cmValue32:
{
  if (GetMarkerCount(MarkerNZ) = 0)
    FromDocAutoCalcUsl;
  else
    {
      var i,MarkerCount : longint;
      var pickrec       : comp;
      MarkerCount := GetMarkerCount(MarkerNZ);
      PushPos(#KatSopr);

      For (i := 0; i < MarkerCount; i := i + 1)
        {
          if (GetMarkerCount(MarkerNZ) <> 0)
            GetMarker(MarkerNZ, i, pickrec);

          if (GetFirst KatSopr where ((pickrec == KatSopr.nRec)) = tsOk)
            FromDocAutoCalcUsl;
        }

      PopPos(#KatSopr);
    }

  Message ('Пересчет стоимости услуг завершен.');
}

cmDoRaschet:
{
  RefreshNalogs(0);
}

cmExp:
  {
    oOnExpImp.OnExportHandler(ieSopr, KatSopr.VidSopr, KatSopr.NRec, 0, MarkerNZ);
    RescanPanel(tnKatSopr);
  }

cmImp:
  {
    oOnExpImp.OnImportHandler(ieSopr, KatSopr.VidSopr);
    RescanPanel(tnKatSopr);
  }

cmIEHist:
  oOnExpImp.OnExportImportHistory(ieSopr, KatSopr.NRec);

cmProtectedInput:
  Stop;//чтобы по Backspace не возникало сообщение "Запись защищена от модификации"

cmSetCurTable:
{
  if (TarGet = #SpSopr)
    if (KatSopr.cOrgBase = 0)
    {
      Message('Переход невозможен, так как'#10#13 +
              'не заполнен документ.', OkButton);
      Abort;
      Exit;
    }

  if (Target = #KatSopr AND isEditSoprVisible)
    oUKSfuns.JoinAkt(KatSopr.NRec, KatSopr.VidSopr);

  if (SchFactFlag AND KatSopr.cSchFact <> 0) //надо редактировать счет-фактуру
    CheckSchFact(2);
}

cmvalue1:
{
#include soprc31.vpp
}

cmMakeOrder:
  DoMakeDooc;

cmValue30:
  DeleteDooc;

// просмотр документов для учета НДС - Украина
cmVrem:
{
  if (UpdateTable)
    if (IsValid(tnKatSopr))
    {
      RunInterface('NalNakl_View', word(coKatSopr), KatSopr.VidSopr, KatSopr.NRec, Date(0,0,0));
      RereadRecord
    }
}

cmOpenSearch:
{
  if (CurField = #Sum)
  {
    var result: boolean;
    var c1 :comp;

    result := FALSE;

    While (NOT result)
    {
      RunInterface('iFindKSopr', KatSopr.VidSopr, c1, result);

      if (NOT result)
        if ( GetFirst KatSopr where (( c1 == KatSopr.NRec )) = tsOk )
          RescanPanel(#KatSopr);
    }
  }
}

cmValue21:
{
  VidReport := 1;
  putCommand(cmPrintDoc);
}

// Регистрация ГТД
cmValue18 :
{
  if (not UpdateTable)
    Exit;

  // Никакого множественного выбора для России - 3 разных вида актов и каждый по своему обрабатывается
  // Будут вопросы - создать отдельную функцию пакетного создания и регистрации ГТД
  if (wGetTune('Country') <> ccRus)
    if (GetMarkerCount(MarkerNZ) > 0)
      StoreMarker(MarkerNZ, 'NalAkts2Reg');

  if (wGetTune('Country') = ccUkr)
    oGTD_Ukr.RegisterGTD_Ukr(KatSopr.NRec); // Простой алгоритм регистрации ГТД для Украины
  else
    if (wGetTune('Country') = ccBel)
      iGTD.RegisterCustomGTD(KatSopr.NRec); // Простой алгоритм регистрации ГТД для Беларуси
    else
      if ( Pos(csSymbol_NalAkt, KatSopr.NSopr) = 1 )  // Налоговый акт
        iGTD.RegisterCustomGTD(KatSopr.NRec);
      else // Простой акт
        iGTD.RegisterGTD(KatSopr.NRec);

  RereadRecord;
}

// Формирование налоговых актов
cmValue16 :
{
  // При множественном выборе сопрдоков идет попытка формировать НА по всем выбранным записям
!  if (GetMarkerCount(MarkerNZ) > 0)
!    StoreMarker(MarkerNZ, 'KS2NalAkts');
! Никакого множественного выбора - 3 разных вида актов и каждый по своему обрабатывается
! Будут вопросы - создать отдельную функцию пакетного создания и регистрации ГТД

  iGTD.MakeNalAkt(KatSopr.NRec);
  RereadRecord;
}

end; // HandleEvent Interface
End. // Interface

#doc
Локальное меню спецификации интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты выполненных работ</link>
#end

mnuSoprUslSpSopr1BUKS Menu
{
-'Расширенная информация',cmAttrib,'Открыть окно расширенной информации',hcZakupWActUslEditSpec,'Ctrl+Enter',kbCtrlEnter,sci1Esc;
-'Выбор из прайс-листа',cmRestoreDoc,'Выбор позиции из прайс-листа',hcZakupLocMFromPrice,'Ctrl+F3',kbCtrlF3,sci1Esc;
-'Выбор из смет',cmMulSelDO,'Выбор позиции из смет',hcm_zakup_Lok_Smeta,'Ctrl+I',kbCtrlI,sci1Esc;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
-----------;
- 'Расчет стоимости услуги',cmValue20,'Отчет - Расчет стоимости услуги',hccuMCalc,'',,sci1Esc;
- 'Параметры расчетной услуги',cmValue17,'Просмотр и изменение параметров расчетной услуги',hccuMInPar,'',,sci1Esc;
#ifdef __MTR_TO_SPEC__
-----------;
-'Целевой учет', cmIerarchy, '', hcUKS_LokM_Chelev, 'Ctrl+U', kbCtrlU, sci1Esc;
#end
}

#doc
Локальное меню спецификации интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты на прием услуг</link>
#end

mnuSoprUslSpSopr1B Menu
{
-'Расширенная информация',cmAttrib,'Открыть окно расширенной информации',hcZakupWActUslEditSpec,'Ctrl+Enter',kbCtrlEnter,sci1Esc;
-'Выбор из прайс-листа',cmRestoreDoc,'Выбор позиции из прайс-листа',hcZakupLocMFromPrice,'Ctrl+F3',kbCtrlF3,sci1Esc;
-'Выбор из смет',cmMulSelDO,'Выбор позиции из смет',hcm_zakup_Lok_Smeta,'Ctrl+I',kbCtrlI,sci1Esc;
-'Дублирование позиции', cmValue9, 'Дублирование текущей позиции', hcSellDublPos, '', , sci1Esc;
-----------;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
-----------;
-'Расчет стоимости услуги',cmValue20,'Отчет - Расчет стоимости услуги',hccuMCalc,'',,sci1Esc;
-'Параметры расчетной услуги',cmValue17,'Просмотр и изменение параметров расчетной услуги',hccuMInPar,'',,sci1Esc;
#ifdef __MTR_TO_SPEC__
-----------;
-'Целевой учет', cmIerarchy, '', hcUKS_LokM_Chelev, 'Ctrl+U', kbCtrlU, sci1Esc;
#end
}

#doc
Локальное меню главного окна интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты на прием услуг</link>
#end

mnuSoprUslKatSoprB22 Menu
{
-'Расширенная информация',cmAttrib,'Открыть окно расширенной информации',hcZakupWActUslEditTopPanDop,'Ctrl+Enter',kbCtrlEnter,sci1Esc;
-'Изменить дескриптор',cmManagerID,'Изменение/установка дескриптора пользователя',hcIGetDescr,'Alt+M',kbAltM,sci1Esc;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации документа',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к документу',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
-----------;
-'Печать документа',cmPrintDoc,'Печать текущего документа',hcctxSoprPrintDoc,'Ctrl+P',kbCtrlP,sci1Esc;
-'Печать документа в FastReport',cmValue21,'Печать документа в FastReport',hcctxSoprPrintDoc,,,sci1Esc;
-----------;
-'Просмотр налогов',cmSeeDopInfo,'Просмотр налогов по документу',hcSellM1DocNal,'',,sci1Esc;
-'Установка цен из прайс-листа',cmValue5,'Установка цен в документах из выбранного прайс-листа',hcCtxPriceIzm,'',,sci1Esc;
-'Синхронизация данных с ДО', cmValue38, 'Синхронизация данных с ДО', hcm_sell_Sinxron_DO, '', , sci1Esc;
-'Пересчет средних цен в документе', cmDocBas, 'Пересчет средних цен в документе', hcctxRecalcSrPrice, 'Alt+D', kbAltD, sci1Esc;
-----------;
-'Ордера дооценки',cmMakeOrder,'Формирование и просмотр ордеров дооценки по акту',hcActUslLocMEdit,'',,sci1Esc;  // lf_
-'Удаление ордеров дооценки',cmValue30,'Удаление ордеров дооценки по акту',hcActUslLocMEdit,'',,sci1Esc;  // lf_
-----------;
- 'Просмотр схем связей между документами',cmLegend,'Просмотр схем связей между документами',hcdgDocRelationView,'Alt+U',kbAltU,sci1Esc;
}

#doc
Локальное меню главного окна интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты выполненных работ</link>
#end

mnuSoprUslKatSoprB22forUKS Menu
{
-'Расширенная информация',cmAttrib,'Открыть окно расширенной информации',hcZakupWActUslEditTopPanDop,'Ctrl+Enter',kbCtrlEnter,sci1Esc;
-'Изменить дескриптор',cmManagerID,'Изменение/установка дескриптора пользователя',hcIGetDescr,'Alt+M',kbAltM,sci1Esc;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации документа',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к документу',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
-----------;
-'Печать документа',cmPrintDoc,'Печать текущего документа',hcctxSoprPrintDoc,'Ctrl+P',kbCtrlP,sci1Esc;
-----------;
-'Просмотр налогов',cmSeeDopInfo,'Просмотр налогов по документу',hcSellM1DocNal,'',,sci1Esc;
-'Просмотр ордеров',cmAccording,'Просмотр информации по сформированным ордерам документа',hcOrder4SoprVMain,'Alt+S',kbAltS,sci1Esc;
-'Установка цен из прайс-листа',cmValue5,'Установка цен в документах из выбранного прайс-листа',hcCtxPriceIzm,'',,sci1Esc;
-----------;
-'Ордера дооценки',cmMakeOrder,'Формирование и просмотр ордеров дооценки по акту',hcActUslLocMEdit,'',,sci1Esc;  // lf_
-'Удаление ордеров дооценки',cmValue30,'Удаление ордеров дооценки по акту',hcActUslLocMEdit,'',,sci1Esc;  // lf_
-----------;
-'Просмотр схем связей между документами',cmLegend,'Просмотр схем связей между документами',hcdgDocRelationView,'Alt+U',kbAltU,sci1Esc;
------------;
-'Распределение МЦ по разрезу', cmAlt2, 'Распределение спецификации по тек.наличию МЦ с учетом выбранного разреза хранения', hcm_sell_Raspred_MC_Razrez, 'Alt+2', kbAlt2, sci1Esc;
}

#doc
Локальное меню списка документов интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты приемки</link>
#end

mnuMainMenuPri Menu
{
-'Фильтры по документу',cmCallFilter,'Установка и снятие фильтров по документу',hcLok_Filtr_Doc,'Alt+B',kbAltB,sci1Esc;
------------;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
-'Тиражирование внешней классификации',cmExClassRepl,'Тиражирование внешней классификации',hcm_zakup_Tirazhir,,,sci1Esc;
------------;
- 'Экспорт', cmExp, 'Экспорт документов',hcSwiftMAll,'Alt+O', kbAltO, sci1Esc;
- 'Импорт', cmImp, 'Импорт документов',hcSwiftMAll,'Alt+I', kbAltI, sci1Esc;
- 'Протокол', cmIEHist, 'Протокол экспорта/импорта',hcSwiftMAll,'Alt+H', kbAltH, sci1Esc;
-----------;
-'Пересчет налогов',cmDoRaschet,'Пересчет налогов по документу за интервал дат',hcDSoprNalogsCalcParams,'',,sci1Esc;
-'Сохранить документ в буфер',cmSaveDoc,'Сохранение документа в буфер',hcctxSoprSaveDoc,'Ctrl+F2',kbCtrlF2,sci1Esc;
-'Копирование документа из буфера',cmRestoreDoc,'Копировать сохраненный в буфере документ',hcctxSoprRestoreDoc,'Ctrl+F3',kbCtrlF3,sci1Esc;
-----------;
-'Печать документа',cmPrintDoc,'Печать текущего документа',hcctxSoprPrintDoc,'Ctrl+P',kbCtrlP,sci1Esc;
-'Печать реестров' ,cmVal3,'Печать реестров по организациям и по МЦ',hcSellLocMActPriemPrintReestr,'',,sci1Esc;
}

#doc
Локальное меню окна редактирования интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты приемки</link>
#end

mnuSoprUslKatSoprPri Menu
{
-'Расширенная информация',cmAttrib,'Открыть окно расширенной информации',hcZakupWActUslEditTopPanDop,'Ctrl+Enter',kbCtrlEnter,sci1Esc;
-'Изменить дескриптор',cmManagerID,'Изменение/установка дескриптора пользователя',hcIGetDescr,'Alt+M',kbAltM,sci1Esc;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации документа',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к документу',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
-----------;
-'Печать документа',cmPrintDoc,'Печать текущего документа',hcctxSoprPrintDoc,'Ctrl+P',kbCtrlP,sci1Esc;
-'Печать реестров' ,cmVal3,'Печать реестров по организациям и по МЦ',hcSellLocMActPriemPrintReestr,'',,sci1Esc;
-'Просмотр налогов',cmSeeDopInfo,'Просмотр налогов по документу',hcSellM1DocNal,'',,sci1Esc;
}

#doc
Локальное меню спецификации интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты приемки</link>
#end

mnuSoprUslSpSoprPri Menu
{
-'Расширенная информация',cmAttrib,'Открыть окно расширенной информации',hcSellWActPriemEditBottom,'Ctrl+Enter',kbCtrlEnter,sci1Esc;
-'Выбор из прайс-листа',cmRestoreDoc,'Выбор позиции из прайс-листа',hcZakupLocMFromPrice,'Ctrl+F3',kbCtrlF3,sci1Esc;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
#ifdef __MTR_TO_SPEC__
-----------;
-'Целевой учет', cmIerarchy, '', hcUKS_LokM_Chelev, 'Ctrl+U', kbCtrlU, sci1Esc;
#end
}

#doc
Локальное меню спецификации интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты выполненных работ</link>
#end

mnuSoprUslSpSoprPriUKS Menu
{
-'Расширенная информация',cmAttrib,'Открыть окно расширенной информации',hcZakupWActUslEditTopPanDop,'Ctrl+Enter',kbCtrlEnter,sci1Esc;
-'Выбор из прайс-листа',cmRestoreDoc,'Выбор позиции из прайс-листа',hcZakupLocMFromPrice,'Ctrl+F3',kbCtrlF3,sci1Esc;
-'Выбор из смет',cmMulSelDO,'Выбор позиции из смет',hcm_zakup_Lok_Smeta,'Ctrl+I',kbCtrlI,sci1Esc;
-'Выбор партии из текущих остатков',cmSaveDoc,'Выбор партии МЦ из текущих остатков',hciGTekOst,'Ctrl+F2',kbCtrlF2,sci1Esc;
-'Выбор из текущих остатков', cmRestoreDoc, 'Выбор позиций текущих остатков', hcSklViborPrise, 'Ctrl+F3', kbCtrlF3, sci1Esc;
-'Просмотр ордеров',cmAccording,'Просмотр информации по сформированным ордерам документа',hcOrder4SoprVMain,'Alt+S',kbAltS,sci1Esc;
-'Перечень серийных номеров',cmXchangeMCSetup,'',hcManufLocMSerNumList,'',,sci1Esc;
------------;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
#ifdef __MTR_TO_SPEC__
-----------;
-'Целевой учет', cmIerarchy, '', hcUKS_LokM_Chelev, 'Ctrl+U', kbCtrlU, sci1Esc;
#end
}

GetVidKS DIALOG
Fields
  tip ('Вид формы отчета',,scGalDial):  word;
Buttons
  cmOk,Default, , 'Печать' ,,scGalDial;
  cmCancel,,,'Отмена',,scGalDial;

<< 'Формировать...'
      (.) Формы КС-2, КС-3`
      (.) Акт выполненных монтажных работ`
      (.) Форма М-29`

      <. ~П~ечать .>  <. ~О~тмена .>
>>

GetVidKSBel DIALOG
Fields
  tip ('Вид формы отчета',,scGalDial):  word;
Buttons
  cmOk,Default, , 'Печать' ,,scGalDial;
  cmCancel,,,'Отмена',,scGalDial;

<< 'Формировать...'
      (.) Формы КС-2, КС-3`
      (.) Акт выполненных монтажных работ`
      (.) Справка об использованных материалах заказчика`

      <. ~П~ечать .>  <. ~О~тмена .>
>>

GetTipKS DIALOG
Fields
  tip ('Направление акта',,scGalDial):  word;
Buttons
  cmOk,Default, , 'Применить' ,,scGalDial;
  cmCancel,,,'Отмена (по умолчанию будет Акт подрядчика)',,scGalDial;

<< 'Направление...'
      (.) Акт подрядчика`
      (.) Акт собственный`

      <. ~П~рименить .>  <. ~О~тмена .>
>>

#doc
Выбор типа услуги <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты на прием услуг</link>
#end

PrihUsl111 Menu
{
 - '~%~ к МЦ(%)', cmAllVo, 'Выберите признак для распределения стоимости услуги';
 - '~C~умма к МЦ(C)', cmAllVos, 'Выберите признак для распределения стоимости услуги';
 - 'Для распределения по ~в~есу(В)', cmAllVosM, 'Выберите признак для распределения стоимости услуги';
 - 'Для распределения по ~о~бъему(О)', cmAllVosV, 'Выберите признак для распределения стоимости услуги';
 - 'Для распределения по ~к~оличеству(К)', cmValue1, 'Выберите признак для распределения стоимости услуги';
 - 'Для распределения по ко~л~ичеству позиций(КП)', cmValue2, 'Выберите признак для распределения стоимости услуги';
}

#doc
Локальное меню списка документов интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты на прием услуг</link>
#end

SoprDocsMain02_HotKeys Menu
{
- 'Фильтры по документу',cmCallFilter,'Установка и снятие фильтров по документу',hcLok_Filtr_Doc,'Alt+B',kbAltB,sci1Esc;
------------;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
-'Тиражирование внешней классификации',cmExClassRepl,'Тиражирование внешней классификации',hcm_zakup_Tirazhir,,,sci1Esc;
------------;
- 'Экспорт', cmExp, 'Экспорт документов', hcSwiftMAll,'Alt+O', kbAltO, sci1Esc;
- 'Импорт', cmImp, 'Импорт документов', hcSwiftMAll,'Alt+I', kbAltI, sci1Esc;
- 'Протокол', cmIEHist, 'Протокол экспорта/импорта', hcSwiftMAll,'Alt+H', kbAltH, sci1Esc;
----------;
-'Печать документа',cmPrintDoc,'Печать текущего документа',hcctxSoprPrintDoc,'Ctrl+P',kbCtrlP,sci1Esc;
-'Печать реестра актов',cmPlansNo,'Печать реестра актов на прием услуг',hcm_sell_Pechat_Reesrtrov,'Alt+P',kbAltP,sci1Esc;
-'Печать документа в FastReport',cmValue21,'Печать документа в FastReport',hcctxSoprPrintDoc,,,sci1Esc;
-----------;
-'Пересчет налогов',cmDoRaschet,'Пересчет налогов по документу за интервал дат',hcDSoprNalogsCalcParams,'',,sci1Esc;
-'Пересчет стоимости услуг', cmValue32, 'Пересчет стоимости услуг', hcm_sell_Stoim_Uslyg, , , sci1Esc;
-'Сохранить документ в буфер',cmSaveDoc,'Сохранение документа в буфер',hcctxSoprSaveDoc,'Ctrl+F2',kbCtrlF2,sci1Esc;
-'Копирование документа из буфера',cmRestoreDoc,'Копировать сохраненный в буфере документ',hcctxSoprRestoreDoc,'Ctrl+F3',kbCtrlF3,sci1Esc;
-'Установка цен из прайс-листа',cmValue5,'Установка цен в документах из выбранного прайс-листа',hcCtxPriceIzm,'',,sci1Esc;
-----------;
-'Пересчет расчетных услуг (VIP00)',cmValue1,'Пересчет расчетных услуг, которые используют идентификатор расчета VIP00',hcM_zakupPereschRachUslug,'',,sci1Esc;
-----------;
-'Ордера дооценки',cmMakeOrder,'Формирование и просмотр ордеров дооценки по акту',hcLMOrdPereoc,'',,sci1Esc;  // lf_
-'Удаление ордеров дооценки',cmValue30,'Удаление ордеров дооценки, сформированных по акту',hcLMOrdPereoc,'',,sci1Esc;  // lf_
}

#doc
Локальное меню списка документов интерфейса <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты выполненных работ</link>
#end

SoprDocsMain02_HotKeysforUKS Menu
{
- 'Фильтры по документу', cmCallFilter, 'Установка и снятие фильтров по документу', hcLok_Filtr_Doc, 'Alt+B', kbAltB, sci1Esc;
----------;
- 'Печать документа', cmPrintDoc, 'Печать текущего документа', hcctxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
- 'Печать реестра актов', cmPlansNo, 'Печать реестра актов на прием услуг', hcm_sell_Pechat_Reesrtrov, 'Alt+P', kbAltP, sci1Esc;
-----------;
- 'Пересчет налогов', cmDoRaschet, 'Пересчет налогов по документу за интервал дат', hcDSoprNalogsCalcParams,,, sci1Esc;
- 'Пересчет стоимости услуг', cmValue32, 'Пересчет стоимости услуг', hcm_sell_Stoim_Uslyg,,, sci1Esc;
- 'Пересчет расчетных услуг (VIP00)', cmValue1, 'Пересчет расчетных услуг, которые используют идентификатор расчета VIP00', hcM_zakupPereschRachUslug,,, sci1Esc;
- 'Установка цен из прайс-листа', cmValue5, 'Установка цен в документах из выбранного прайс-листа', hcCtxPriceIzm,,, sci1Esc;
------------;
- 'Сохранить документ в буфер', cmSaveDoc, 'Сохранение документа в буфер', hcctxSoprSaveDoc, 'Ctrl+F2', kbCtrlF2, sci1Esc;
- 'Копирование документа из буфера', cmRestoreDoc, 'Копировать сохраненный в буфере документ', hcctxSoprRestoreDoc, 'Ctrl+F3', kbCtrlF3, sci1Esc;
------------;
- 'Внешняя классификация', cmPickClass, 'Установка внешней классификации к позиции', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты', cmPickAttr, 'Установка внешних атрибутов к позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;
- 'Тиражирование внешней классификации', cmExClassRepl, 'Тиражирование внешней классификации', hcm_zakup_Tirazhir,,, sci1Esc;
------------;
- 'Экспорт', cmExp, 'Экспорт документов', hcSwiftMAll, 'Alt+O', kbAltO, sci1Esc;
- 'Импорт', cmImp, 'Импорт документов', hcSwiftMAll, 'Alt+I', kbAltI, sci1Esc;
- 'Протокол', cmIEHist, 'Протокол экспорта/импорта', hcSwiftMAll, 'Alt+H', kbAltH, sci1Esc;
}

#doc
Связка актов на услуги с накладными <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты на прием услуг</link>
#end

mnuMakeLinks Menu
{
- 'Связать с накладной другие акты на услуги',cmValFld3,'Связать с накладной другие акты на услуги',hci_nakl_SvDrygie_Akt,'',,sci1Esc;
}

#doc
Локальное меню окна расширенной информации <link Interface L_SOPRDOC::AKTUSLB>L_SOPRDOC::AKTUSLB - Акты выполненных работ</link>
#end

AktUslDop110_HotKeys Menu
{
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
}

AktUslDop111_HotKeys Menu
{
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
}

mnuAktSpecifInfoMc menu
{
-'Выбор из прайс-листа',cmRestoreDoc,'Выбор позиции из прайс-листа',hcZakupLocMFromPrice,'Ctrl+F3',kbCtrlF3,sci1Esc;
-'Выбор из смет',cmMulSelDO,'Выбор позиции из смет',hcm_zakup_Lok_Smeta,'Ctrl+I',kbCtrlI,sci1Esc;
-'Выбор партии из текущих остатков',cmSaveDoc,'Выбор партии МЦ из текущих остатков',hciGTekOst,'Ctrl+F2',kbCtrlF2,sci1Esc;
-'Выбор из текущих остатков', cmRestoreDoc, 'Выбор позиций текущих остатков', hcSklViborPrise, 'Ctrl+F3', kbCtrlF3, sci1Esc;
-'Перечень серийных номеров',cmXchangeMCSetup,'',hcManufLocMSerNumList,'',,sci1Esc;
------------;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
------------;
-'Выбор группы налогов',cmSetGrNal,'Выбор группы налогов для позиции спецификации документа',hcSpSoprSetGrNal,'',,sci1Esc;
-'Просмотр/редактирование налогов',cmAttrib,'Просмотр/редактирование налогов к позиции документа',hcSellM1DocNal,'Ctrl+Enter',kbCtrlEnter,sci1Esc;
}

mnuAktSpecifInfoUsl menu
{
-'Выбор из прайс-листа',cmRestoreDoc,'Выбор позиции из прайс-листа',hcZakupLocMFromPrice,'Ctrl+F3',kbCtrlF3,sci1Esc;
-'Выбор из смет',cmMulSelDO,'Выбор позиции из смет',hcm_zakup_Lok_Smeta,'Ctrl+I',kbCtrlI,sci1Esc;
-'Внешняя классификация',cmPickClass,'Установка внешней классификации к позиции',hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc;
-'Внешние атрибуты',cmPickAttr,'Установка внешних атрибутов к позиции',hcGkatalM1Attr,'Alt+A',kbAltA,sci1Esc;
-----------;
- 'Расчет стоимости услуги',cmValue20,'Отчет - Расчет стоимости услуги',hccuMCalc,'',,sci1Esc;
- 'Параметры расчетной услуги',cmValue17,'Просмотр и изменение параметров расчетной услуги',hccuMInPar,'',,sci1Esc;
-----------;
-'Выбор группы налогов',cmSetGrNal,'Выбор группы налогов для позиции спецификации документа',hcSpSoprSetGrNal,'',,sci1Esc;
-'Просмотр/редактирование налогов',cmAttrib,'Просмотр/редактирование налогов к позиции документа',hcSellM1DocNal,'Ctrl+Enter',kbCtrlEnter,sci1Esc;
}

#ifdef __7Days__
#end

GetParamSetCopySpecAkta110 DIALOG
  StatusCtx scGalDial;
Fields
  wPickDoc ('Вид действий'): word, noProtect;
Buttons
  cmOk, Default, , 'Ок';
  cmCancel, , ,    'Выход';

<< 'Выполняемые действия:'
 Выполняемые действия:
 (.) Копировать спецификацию договора с соответствующим объектом из акта`
 (.) Копировать спецификацию договора с соответствующим объектом из акта и непроинициализированные`

 <. Выполнить .>                                                            <. Отмена .>
>>
